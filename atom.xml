<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crowsongのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-31T07:21:50.703Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>crowsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea_create_web</title>
    <link href="http://yoursite.com/2018/08/31/idea-create-web/"/>
    <id>http://yoursite.com/2018/08/31/idea-create-web/</id>
    <published>2018-08-31T07:13:07.000Z</published>
    <updated>2018-08-31T07:21:50.703Z</updated>
    
    <content type="html"><![CDATA[<h4 id="流程参考：https-www-cnblogs-com-xuange306-p-7012341-html"><a href="#流程参考：https-www-cnblogs-com-xuange306-p-7012341-html" class="headerlink" title="流程参考：https://www.cnblogs.com/xuange306/p/7012341.html"></a>流程参考：<a href="https://www.cnblogs.com/xuange306/p/7012341.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuange306/p/7012341.html</a></h4><a id="more"></a><h4 id="遇见的小问题："><a href="#遇见的小问题：" class="headerlink" title="遇见的小问题："></a>遇见的小问题：</h4><h6 id="创建Web项目后没有WEB-INF文件夹及web-xml"><a href="#创建Web项目后没有WEB-INF文件夹及web-xml" class="headerlink" title="创建Web项目后没有WEB-INF文件夹及web.xml"></a>创建Web项目后没有WEB-INF文件夹及web.xml</h6><blockquote><p>shift+ctrl+alt+s进入Project Structure<br>打开Project Structure，在facets中选中次级的web或者在Modules中选中web，在deployment Descriptors面板里，点击 +号选择web.xml以及版本号。然后在弹出的对话框中修改xml默认的目录，加上web就可以了</p></blockquote><h6 id="Q-IntelliJ-IDEA-Tomcal启动报错："><a href="#Q-IntelliJ-IDEA-Tomcal启动报错：" class="headerlink" title="Q: IntelliJ IDEA  Tomcal启动报错："></a>Q: IntelliJ IDEA  Tomcal启动报错：</h6><blockquote><p>org.apache.catalina.core.AprLifecycleListener.init The APR based Apache Tomcat Native library failed to load. The error reported was [C:\tomcat\bin\tcnative-1.dll: Can’t load AMD 64-bit .dll on a IA 32-bit platform]  java.lang.UnsatisfiedLinkError: C:\tomcat\bin\tcnative-1.dll: Can’t load AMD 64-bit .dll on a IA 32-bit platform</p></blockquote><h6 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h6><blockquote><p>主要是在64位的系统下安装的虚拟机是64位的，而WTK的sublime.dll不能在64位的平台下加载64位的虚拟机，只能加载32位的。由于WTK在安装的时候加载的64虚拟机的地址，它找到的是64位的虚拟机，所以它提示不能加载32位的虚拟机（在目录下没有32的虚拟机）</p></blockquote><blockquote><p>解决办法<br>下载 the 32bit from <a href="http://www.apache.org/dist/tomcat/tomcat-connectors/native/" target="_blank" rel="noopener">http://www.apache.org/dist/tomcat/tomcat-connectors/native/</a><br>找到最近的版本，我的是 tomcat-native-1.2.16-win32-bin.zip<br>下载后解压，找到<br>tomcat-native-1.2.16-win32-bin.zip\bin\tcnative-1.dll (不是64X文件夹中的)<br>替换到tomcat根目录下<br>tomcat\bin</p></blockquote><blockquote><p>idea tomcat警告参考：<a href="http://blog.51cto.com/13765598/2120489" target="_blank" rel="noopener">http://blog.51cto.com/13765598/2120489</a></p></blockquote><h6 id="Q-intellj-idea启动tomcat服务器后无法访问localhost-8080（白屏）"><a href="#Q-intellj-idea启动tomcat服务器后无法访问localhost-8080（白屏）" class="headerlink" title="Q: intellj idea启动tomcat服务器后无法访问localhost:8080（白屏）"></a>Q: intellj idea启动tomcat服务器后无法访问localhost:8080（白屏）</h6><h6 id="A-1"><a href="#A-1" class="headerlink" title="A:"></a>A:</h6><blockquote><p>原因：没有将tomcat主页的工程部署到intellj idea的虚拟tomcat路径，可在Run/Debug Configurations中Deployment选项中点击右边的绿色加号，选择External Source，然后添加Tomcat安装目录tomcat/webapps/Root目录即可；<br>参考资料：<a href="https://blog.csdn.net/qq_22708467/article/details/79070973" target="_blank" rel="noopener">https://blog.csdn.net/qq_22708467/article/details/79070973</a></p></blockquote><h4 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h4><p>在部署 tomcat 服务器时，点击右上角 edit configurations 选择Deployment 添加了 Artifact 后，右边的Application context中的 / 代表项目部署的虚拟路径:</p><blockquote><ul><li>若 index.jsp 在 aaa/web 目录下，虚拟路径为 /<br>则访问 index.jsp 地址为 localhost/8080 或 localhost/8080/index.jsp . </li><li>若虚拟路径设为 /aaa 则访问 index.jsp 的地址为 localhost/8080/aaa/index.jsp 或 localhost/8080/aaa<br>-request.getContextPath(); 得到的值为虚拟路径</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;流程参考：https-www-cnblogs-com-xuange306-p-7012341-html&quot;&gt;&lt;a href=&quot;#流程参考：https-www-cnblogs-com-xuange306-p-7012341-html&quot; class=&quot;headerlink&quot; title=&quot;流程参考：https://www.cnblogs.com/xuange306/p/7012341.html&quot;&gt;&lt;/a&gt;流程参考：&lt;a href=&quot;https://www.cnblogs.com/xuange306/p/7012341.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xuange306/p/7012341.html&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="idea" scheme="http://yoursite.com/categories/idea/"/>
    
    
      <category term="intelj" scheme="http://yoursite.com/tags/intelj/"/>
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>单例设计模式</title>
    <link href="http://yoursite.com/2018/08/20/SingleDemo/"/>
    <id>http://yoursite.com/2018/08/20/SingleDemo/</id>
    <published>2018-08-20T02:07:53.000Z</published>
    <updated>2018-08-31T07:25:08.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例设计模式：解决一个类中只存在一个对象"><a href="#单例设计模式：解决一个类中只存在一个对象" class="headerlink" title="单例设计模式：解决一个类中只存在一个对象"></a>单例设计模式：解决一个类中只存在一个对象</h3><h4 id="单例设计模式特性："><a href="#单例设计模式特性：" class="headerlink" title="单例设计模式特性："></a>单例设计模式特性：</h4><h5 id="保证对象在内存中的唯一性："><a href="#保证对象在内存中的唯一性：" class="headerlink" title="保证对象在内存中的唯一性："></a>保证对象在内存中的唯一性：</h5><ul><li>为了避免其他程序创建过多对象，先禁止其他程序创建该类对象</li><li>为了让其他类访问到该对象，在本类中自定义一个对象</li><li>方便其他对象对自定义对象的访问，可以对外提供一些访问方式</li></ul><h5 id="用代码的方式实现对象在内存中唯一性："><a href="#用代码的方式实现对象在内存中唯一性：" class="headerlink" title="用代码的方式实现对象在内存中唯一性："></a>用代码的方式实现对象在内存中唯一性：</h5><ul><li>将构造函数私有化</li><li>在类中创建一个本类对象</li><li>提供一个方法可以获取到该对象</li></ul><h5 id="单例模式使用方式："><a href="#单例模式使用方式：" class="headerlink" title="单例模式使用方式："></a>单例模式使用方式：</h5><p>按平时的描述方式描述事物，加上 单例模式 的 3 步方式即可</p><a id="more"></a><h4 id="单例设计模式饿汉式-java-代码实现："><a href="#单例设计模式饿汉式-java-代码实现：" class="headerlink" title="单例设计模式饿汉式 java 代码实现："></a>单例设计模式饿汉式 java 代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//内置成员变化需要私有化</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    方法被调用的方法只有两种：对象、类名</span></span><br><span class="line"><span class="comment">    因为该对象被私有化了，无法外部创建该方法，所以用类名调用</span></span><br><span class="line"><span class="comment">    类名调用需要设置静态方法</span></span><br><span class="line"><span class="comment">    静态方法只能访问静态成员，所以成员也需要静态</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Single ss = Single.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈中加载 main 函数 和 ss</p><p>方法区中有了 Single 的空间、静态的 s 变量、getInstance() 方法</p><p>堆中有了一个 new Single() 地址假设为 0x0015</p><p>方法区的 s 变量指向了 堆中 new Single() 的地址 0x0015</p><p>return s</p><p>Single ss = Single.getInstance();</p><p>使得 ss 也指向 0x0015</p><h4 id="普通方式创建多个对象："><a href="#普通方式创建多个对象：" class="headerlink" title="普通方式创建多个对象："></a>普通方式创建多个对象：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不设置私有化，可外部创建该对象</span></span><br><span class="line">    Single()&#123;&#125;;</span><br><span class="line">    <span class="comment">//单例模式下设置私有化，不可外部创建该对象</span></span><br><span class="line">    <span class="comment">//private Single()&#123;&#125;;</span></span><br><span class="line">    </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建 2 个 Single 对象</span></span><br><span class="line">        Single s1 = <span class="keyword">new</span> Single();</span><br><span class="line">        Single s2 = <span class="keyword">new</span> Single();</span><br><span class="line">        <span class="comment">//设置值为 30</span></span><br><span class="line">        s1.setNum(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">/**输出值为默认值 0</span></span><br><span class="line"><span class="comment">        创建了两个对象，修改其中一个值跟另一个无关</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(s2.getNum());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ss2 的值为 23，表明 ss1 与 ss2 是同一个对象</span></span><br><span class="line"><span class="comment">        单例模式内存中一个一个对象在执行，该对象有 3 个引用：</span></span><br><span class="line"><span class="comment">        SingleDemo 的 ss1、ss2 和 Single 中的 s</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//Single ss1 = Single.getInstance();</span></span><br><span class="line">        <span class="comment">//Single ss2 = Single.getInstance();</span></span><br><span class="line">        <span class="comment">//ss1.setNum(15);</span></span><br><span class="line">        <span class="comment">//System.out.println(ss2);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例设计模式-懒汉式-java-代码"><a href="#单例设计模式-懒汉式-java-代码" class="headerlink" title="单例设计模式 懒汉式 java 代码"></a>单例设计模式 懒汉式 java 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先初始化对象：称为 饿汉式</span></span><br><span class="line"><span class="comment">Single 类一进内存，就已经创建好了对象</span></span><br><span class="line"><span class="comment">class Single&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    private Single()&#123;&#125;;</span></span><br><span class="line"><span class="comment"> private static Single s = new Single();</span></span><br><span class="line"><span class="comment">    private Single getInstance()&#123;</span></span><br><span class="line"><span class="comment">        return s;</span></span><br><span class="line"><span class="comment">    &#125;  </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//对象在方法被调用时才初始化，也叫作对象的延时加载 称为 懒汉式</span></span><br><span class="line"><span class="comment">//Single 类进内存，对象还没有存在，只有调用 getInstance() 方法时，才建立对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s = <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Single ss = Single.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式：Single 类 加载进内存时，方法区就有 s，堆中就有对象，对象的地址值赋给 s</p><p>懒汉式：Single 类 加载进内存时，方法区 s 为空，当调用 getInstance() 方法时，才在内存中建立建立对象，将堆内存中的地址赋给 s，替换空值</p><h4 id="懒汉式防止多个用户创建多个对象"><a href="#懒汉式防止多个用户创建多个对象" class="headerlink" title="懒汉式防止多个用户创建多个对象"></a>懒汉式防止多个用户创建多个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//锁加载判断内部，提升效率</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//加锁，防止创建多个对象</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Single.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    s = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单例设计模式：解决一个类中只存在一个对象&quot;&gt;&lt;a href=&quot;#单例设计模式：解决一个类中只存在一个对象&quot; class=&quot;headerlink&quot; title=&quot;单例设计模式：解决一个类中只存在一个对象&quot;&gt;&lt;/a&gt;单例设计模式：解决一个类中只存在一个对象&lt;/h3&gt;&lt;h4 id=&quot;单例设计模式特性：&quot;&gt;&lt;a href=&quot;#单例设计模式特性：&quot; class=&quot;headerlink&quot; title=&quot;单例设计模式特性：&quot;&gt;&lt;/a&gt;单例设计模式特性：&lt;/h4&gt;&lt;h5 id=&quot;保证对象在内存中的唯一性：&quot;&gt;&lt;a href=&quot;#保证对象在内存中的唯一性：&quot; class=&quot;headerlink&quot; title=&quot;保证对象在内存中的唯一性：&quot;&gt;&lt;/a&gt;保证对象在内存中的唯一性：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;为了避免其他程序创建过多对象，先禁止其他程序创建该类对象&lt;/li&gt;
&lt;li&gt;为了让其他类访问到该对象，在本类中自定义一个对象&lt;/li&gt;
&lt;li&gt;方便其他对象对自定义对象的访问，可以对外提供一些访问方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;用代码的方式实现对象在内存中唯一性：&quot;&gt;&lt;a href=&quot;#用代码的方式实现对象在内存中唯一性：&quot; class=&quot;headerlink&quot; title=&quot;用代码的方式实现对象在内存中唯一性：&quot;&gt;&lt;/a&gt;用代码的方式实现对象在内存中唯一性：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;将构造函数私有化&lt;/li&gt;
&lt;li&gt;在类中创建一个本类对象&lt;/li&gt;
&lt;li&gt;提供一个方法可以获取到该对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;单例模式使用方式：&quot;&gt;&lt;a href=&quot;#单例模式使用方式：&quot; class=&quot;headerlink&quot; title=&quot;单例模式使用方式：&quot;&gt;&lt;/a&gt;单例模式使用方式：&lt;/h5&gt;&lt;p&gt;按平时的描述方式描述事物，加上 单例模式 的 3 步方式即可&lt;/p&gt;
    
    </summary>
    
      <category term="Design Patterns" scheme="http://yoursite.com/categories/Design-Patterns/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Singleton Pattern" scheme="http://yoursite.com/tags/Singleton-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Spring4x_2</title>
    <link href="http://yoursite.com/2018/08/14/Spring4x-2/"/>
    <id>http://yoursite.com/2018/08/14/Spring4x-2/</id>
    <published>2018-08-14T09:26:42.000Z</published>
    <updated>2018-08-31T07:25:33.244Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring-名词参考"><a href="#Spring-名词参考" class="headerlink" title="Spring 名词参考"></a>Spring 名词参考</h4><p>POJO：POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称 </p><p>使用POJO名称是为了避免和<a href="https://baike.baidu.com/item/EJB" target="_blank" rel="noopener">EJB</a>混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,没有业务逻辑，有时可以作为<a href="https://baike.baidu.com/item/VO" target="_blank" rel="noopener">VO</a>(value -object)或<a href="https://baike.baidu.com/item/dto/16016821" target="_blank" rel="noopener">dto</a>(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是可以的,但不允许有业务方法,也不能携带有connection之类的方法。 </p><p><a href="https://blog.csdn.net/wyqwxx86/article/details/80088769" target="_blank" rel="noopener">教程参考</a></p><p><a href="https://blog.csdn.net/theNightSoCold/article/details/72081963" target="_blank" rel="noopener">idea 创建 log4j 文件</a></p><a id="more"></a><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q1"><a href="#Q1" class="headerlink" title="Q1:"></a>Q1:</h5><p>application context not configured for this file</p><p>A:</p><p><a href="https://blog.csdn.net/YangJiaJun0506/article/details/79302364" target="_blank" rel="noopener">application context not configured for this file于spring框架使用中的原因</a></p><h5 id="Q2"><a href="#Q2" class="headerlink" title="Q2:"></a>Q2:</h5><p> cvc-complex-type.2.4.c: 通配符的匹配很全面, 但无法找到元素 ‘tx:Advisor’ 的声明。</p><p>A:</p><p>在 smart-context.xml 中加入 Spring 引用</p><h5 id="Q3"><a href="#Q3" class="headerlink" title="Q3:"></a>Q3:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.sql.SQLException: Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)</span><br></pre></td></tr></table></figure><p>A:</p><p>smart-context.xml 配置 数据库的用户密码错误    </p><h5 id="Q4"><a href="#Q4" class="headerlink" title="Q4:"></a>Q4:</h5><p>c:if 与 c:url 标签无效</p><p>A:</p><p>accepted</p><p>First add this to the top of your “.jsp” file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span><br></pre></td></tr></table></figure><p>It will still give syntax error but you can fix that by adding “javax.servlet:jstl:1.2” (without quotes) as a module dependency. To do that, follow these steps:</p><ol><li>Click your project name and press <strong>“F4”</strong> to bring up the module settings dialog.</li><li>Then go to the “dependencies” tab in the “modules” section.</li><li>Click the green “+” icon –&gt; library –&gt; <strong>new library</strong> –&gt; From Maven.</li><li>Search for <code>javax.servlet:jstl:1.2</code> in the search bar and press OK and it will download and add the above mentioned library as a module.</li><li>Now you should not have any kind of syntax error.</li></ol><p><a href="https://stackoverflow.com/questions/31043869/intellij-and-jsp-jstl-cannot-resolve-taglib-for-jstl-in-tomcat7" target="_blank" rel="noopener">c:if标签 Cannot resolve symbol</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Spring-名词参考&quot;&gt;&lt;a href=&quot;#Spring-名词参考&quot; class=&quot;headerlink&quot; title=&quot;Spring 名词参考&quot;&gt;&lt;/a&gt;Spring 名词参考&lt;/h4&gt;&lt;p&gt;POJO：POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称 &lt;/p&gt;
&lt;p&gt;使用POJO名称是为了避免和&lt;a href=&quot;https://baike.baidu.com/item/EJB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EJB&lt;/a&gt;混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,没有业务逻辑，有时可以作为&lt;a href=&quot;https://baike.baidu.com/item/VO&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VO&lt;/a&gt;(value -object)或&lt;a href=&quot;https://baike.baidu.com/item/dto/16016821&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dto&lt;/a&gt;(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是可以的,但不允许有业务方法,也不能携带有connection之类的方法。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wyqwxx86/article/details/80088769&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教程参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/theNightSoCold/article/details/72081963&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;idea 创建 log4j 文件&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>springAutoAssembly</title>
    <link href="http://yoursite.com/2018/08/10/springAutoAssembly/"/>
    <id>http://yoursite.com/2018/08/10/springAutoAssembly/</id>
    <published>2018-08-10T06:19:16.000Z</published>
    <updated>2018-08-16T16:03:04.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过-Java-代码装配-bean"><a href="#通过-Java-代码装配-bean" class="headerlink" title="通过 Java 代码装配 bean"></a>通过 Java 代码装配 bean</h2><p>通常组件扫描和自动化装配实现 Spring 的自动化配置，但是有时候例如要将第三方库中的组件装配到你的应用中，这种情况下没办法在它的类上添加 @Component 和 @Autowired 注解，就不能使用自动化配置了。</p><p>需要进行显示装配方式：java/XML</p><p>java(javaConfig) 是比较好的方案，它更强大、类型安全、对重构友好，它是 java 代码，但是 JavaConfig 是配置代码，不应该包含任何业务逻辑，会将其放在单独的包中与其他应用程序逻辑分离开。</p><a id="more"></a><h4 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h4><p>如果去掉 CDPlayerConfig 的 @ComponentScan 注解，再次运行 CDPlayerTest 的话，测试会失败，出现异常。测试期望被注入CDPlayer 和 CompactDisc，但是这些 bean 没有被创建，组件扫描不会发现它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.soundsystem;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">//@ComponentScan</span><br><span class="line">public class CDPlayerConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明简单的-bean"><a href="#声明简单的-bean" class="headerlink" title="声明简单的 bean"></a>声明简单的 bean</h4><p>在 <code>JavaConfig</code> 中声明 <code>bean</code> ，编写一个创建所需类型的实例的方法，给这个方法添加 <code>@Bean</code> 注解。</p><p>声明 <code>CompactDisc bean</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Bean 注解告诉 Spring 这个方法返回一个对象，该对象要注册为 Spring 应用上下文中的 <code>bean</code> ，方法体中包含了最终产生 <code>bean</code> 实例的逻辑。</p><p>默认情况下，<code>bean</code> 的 id 跟带有<code>@bean</code>注解的方法名一样，本例中为 <code>sgtPeppers</code>，如果要重新设置可以通过<code>name</code>属性指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"lonelyHeartsClubBand"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法体返回了一个新的 SgtPeppers 实例，因为是<code>java</code>代码所以可以使用<code>java</code>提供的全部功能，只要最终能生成<code>CompactDisc</code>实例就行。</p><p>可以用 <code>java</code>的功能在一组 CD 中随机选择一个 <code>CompactDisc</code> 播放：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">randomBeatlesCD</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice = (<span class="keyword">int</span>)Math.floor(Math.random()*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WhiteAlbum();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HardDaysNight();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">enw <span class="title">Revolver</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://www.cnblogs.com/bossen/p/5824067.html" target="_blank" rel="noopener">Spring中Bean及@Bean的理解</a></p><p>java 是面相对象，对象有方法和属性，需要对象实例来调用方法和属性（实例化），有方法或属性的类都需要实例化才能具象化地去使用这些方法和属性。bean 是类的代理，这样它就能代表类拥有该拥有的东西了。</p><h6 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h6><blockquote><p>使用 bean:  即是把已经在xml文件中配置好的Bean拿来用，完成属性、方法的组装；比如@Autowired , @Resource，可以通过byTYPE（@Autowired）、byNAME（@Resource）的方式获取Bean； </p></blockquote><blockquote><p>注册Bean:  @Component , @Repository , @ Controller , @Service , @Configration这些注解都是把你要实例化的对象转化成一个Bean，放在IoC容器中，等你要用的时候，它会和上面的@Autowired , @Resource配合到一起，把对象、属性、方法完美组装。 </p></blockquote><blockquote><p>@bean:  意思是@Bean明确地指示了一种方法，什么方法呢——产生一个bean的方法，并且交给Spring容器管理；从这我们就明白了为啥@Bean是放在方法的注释上了，因为它很明确地告诉被注释的方法，你给我产生一个Bean，然后交给Spring容器，剩下的你就别管了 </p></blockquote><ul><li><p>Spring 注入：</p><p>IOC 容器加载时会扫描 xml 文件中 bean 的配置，对这些 bean 进行实例化（初始化）。注入指在初始化一个实例的时候对这个实例的成员变量进行赋值。</p></li></ul><h4 id="借助-JavaConfig-实现注入"><a href="#借助-JavaConfig-实现注入" class="headerlink" title="借助 JavaConfig 实现注入"></a>借助 JavaConfig 实现注入</h4><p>当需要声明一个依赖于 CompactDisc 的 CDPlayer bean 时，可用如下方法在 JavaConfig 中进行装配：</p><ol><li><p>引用创建 bean 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(sgtPeppers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的 bean ID 为 cdPlayer，与方法名相同。cdPlayer() 方法没有使用默认的构造器构建实例，而是调用了需要传入 CompactDisc 对象的构造器来创建 CDPlayer 实例，但是它并不是通过调用 sgtPeppers() 方法得到的，sgtPeppers() 方法上添加了 @Bean 注解，所以 Spring 将会拦截所有对它的条用，会直接返回该方法所创建的 bean</p></li><li><p>cdPlayer() 方法请求一个 CompactDisc 作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactdisc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管 CompactDisc 使用什么方式创建出来的，Spring 都会将其传入到配置方法中，并用来创建 CDPlayer bean。以上构造器和下面的 Setter 方法只是 @Bean 的其中一些方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">CDPlayer cdPlayer = <span class="keyword">new</span> CDPlayer(compactDisc);</span><br><span class="line">cdPlayer.setCompactDisc(compactDisc)</span><br><span class="line">    <span class="keyword">return</span> cdPlayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="声明一个简单的"><a href="#声明一个简单的" class="headerlink" title="声明一个简单的 "></a>声明一个简单的 <bean></bean></h4><h5 id="属性注入（设值注入）"><a href="#属性注入（设值注入）" class="headerlink" title="属性注入（设值注入）"></a>属性注入（设值注入）</h5><p><bean> 元素类似于 JavaConfig 的 @Bean 注解。</bean></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"compactDisc"</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"compactDisc"</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id 为 cdPlayer 的 CDPlayer 类，其中有一个名称为 compactDisc 的成员变量。 </p><p><property> 元素为属性的 Setter 方法所提供的功能与 <constructor-arg> 元素为构造器所提供的功能相同。</constructor-arg></property></p><p>通过 ref 属性，引用了 ID 为 compactDisc 的 bean，用 setCompactDisc() 方法将其注入到 compactDisc 属性中。所以 CDPlayer 中必须有 setCompactDisc() 的方法，由 IOC 容器自动调用方法进行赋值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通过-Java-代码装配-bean&quot;&gt;&lt;a href=&quot;#通过-Java-代码装配-bean&quot; class=&quot;headerlink&quot; title=&quot;通过 Java 代码装配 bean&quot;&gt;&lt;/a&gt;通过 Java 代码装配 bean&lt;/h2&gt;&lt;p&gt;通常组件扫描和自动化装配实现 Spring 的自动化配置，但是有时候例如要将第三方库中的组件装配到你的应用中，这种情况下没办法在它的类上添加 @Component 和 @Autowired 注解，就不能使用自动化配置了。&lt;/p&gt;
&lt;p&gt;需要进行显示装配方式：java/XML&lt;/p&gt;
&lt;p&gt;java(javaConfig) 是比较好的方案，它更强大、类型安全、对重构友好，它是 java 代码，但是 JavaConfig 是配置代码，不应该包含任何业务逻辑，会将其放在单独的包中与其他应用程序逻辑分离开。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="autoAssembly" scheme="http://yoursite.com/tags/autoAssembly/"/>
    
  </entry>
  
  <entry>
    <title>spring 框架基础</title>
    <link href="http://yoursite.com/2018/08/02/spring/"/>
    <id>http://yoursite.com/2018/08/02/spring/</id>
    <published>2018-08-02T01:48:20.000Z</published>
    <updated>2018-08-10T10:14:44.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-框架基础"><a href="#Spring-框架基础" class="headerlink" title="Spring 框架基础"></a>Spring 框架基础</h2><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">面向对象编程</a>中的一种设计原则，可以用来减低计算机代码之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6" target="_blank" rel="noopener">耦合度</a>。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 </p><p>IOC 是一种设计模式，原来创建对象的主动权和时间是由自己控制的，现在把需要使用的对象的创建，销毁的控制权交给别人（IOC容器），使用时直接获取，这种对象可以单例或多例。IOC 有利于降低耦合度。</p><p><a href="http://www.360doc.com/content/18/0125/09/27831725_724899826.shtml" rel="noopener" target="_blank">依赖注入和控制反转的理解</a></p><p>AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335" target="_blank" rel="noopener">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。 </p><a id="more"></a><h4 id="idea-的简单-Spring-文件创建及测试"><a href="#idea-的简单-Spring-文件创建及测试" class="headerlink" title="idea 的简单 Spring 文件创建及测试"></a>idea 的简单 Spring 文件创建及测试</h4><ol><li>创建一个 project 勾选 Spring 及 web Application</li><li>创建 interface、实现接口类、配置类以及测试类</li></ol><p>idea 创建测试类方法：</p><p>在 bean 同目录下创建一个 test 测试文件夹，同时按住 ctrl+shift+alt+s 调出 project structure 窗口，选择modules 栏中的 Sources 栏，选中创建 test 文件夹，在 Mark as 栏选择 Tests，将 Tests 文件夹作为 Test 文件创建的目录。</p><p>在 实现接口类的类名上 alt+enter 选择 create test，在 TestLibrary 选择 JUnit4， 如果出现 JUnit4 Library notfound in the module ，点击 fix 选择 Use ‘JUnit4’ from idea distribution 点 ok，在下方 Member 栏将方法选中，可创建该类方法的测试方法</p><img src="/2018/08/02/spring/1533293101268.png" title="演示"><p>在测试类文件中类的上方添加注释 @RunWith(SpringJUnit4ClassRunner.class) 以便在测试开始的时候自动创建 Spring 的应用上下文</p><p>添加注解 @ContextConfiguration(classes=CDPlayerConfig.class) 表示需要在 CDPlayerConfig 中加载配置，因为 CDPlayerConfig 类中包含了 @ComponentScan ，则最终引用上下文也会包含 CompactiDisc 的bean</p><p>在类中添加 注释 表示将 bean 注入到测试代码之中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private CompactDisc cd;</span><br></pre></td></tr></table></figure><p>一个简单的测试方法，断言测试 cd 属性不为 null ，表示 spring 能够发现 CompactDisc 类，能自动在 Spring 上下文中创建 bean 并将其注入到测试代码中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void cdShouldNotBeNull()&#123;</span><br><span class="line">    assertNotNull(cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果运行测试类报错 org.junit 不存在</p><p>ctrl + shift + alt + s 进入 project structure 窗口 ，在 Library 窗口 </p><p>点击左边绿色的加号 -&gt; Java -&gt; 找到 IDEA 安装路径下的 Lib 中的junit-4.12 -&gt; 确定 </p><p>ctrl + shift + t 在 测试 文件与 被测试 文件间切换</p><p><a href="https://www.youtube.com/watch?v=Bld3644bIAo" rel="noopener" target="_blank">idea 使用 Junit4 测试教程（需科学上网）</a></p><p><a href="https://blog.csdn.net/tiantiandjava/article/details/41204607" rel="noopener" target="_blank">idea 打开显示 Spring Configure check 解决方法</a></p><hr><h4 id="为组件扫描的-bean-命名"><a href="#为组件扫描的-bean-命名" class="headerlink" title="为组件扫描的 bean 命名"></a>为组件扫描的 bean 命名</h4><p>Spring 应用上下文所有的 bean 一般都会根据类名指定一个 ID，将类名的第一个字母变为小写（SgtPeppers 设置为 sgtPeppers），如果要自己设置不同的 ID，则在 SgtPeppers 类注解 @Component 中配置 ID 名，如</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"lonelyHeartsClub"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  或者使用 @Named 注解也可以，但是通常使用 @Component</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Named</span>(<span class="string">"lonelyHeartsClub"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置组件扫描基础包"><a href="#设置组件扫描基础包" class="headerlink" title="设置组件扫描基础包"></a>设置组件扫描基础包</h4><p>如果没有为 @ComponentScan 设置任何属性，它会以配置类所在的包作为基础包（base package）来扫描组件（扫描）。如果想将装配类放在单独的包中跟其他的应用代码进行区分，那么默认基础包将不能满足要求。</p><p>为了指定不同的基础包，可以在 @ComponentScan 的 value 属性中指明包的名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"soundsystem)</span></span><br><span class="line"><span class="string">public class CDPlayerConfig &#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>如果为了更清楚地表明设置的是基础包，可以通过 basePackages 属性进行配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"soundsystem"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要设置多个基础包，可以将 basePackages 属性设置为需要扫描包的数组即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"soundsystem"</span>,<span class="string">"video"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上用 String 类型表示的基础包设置是类型不安全的(not type-safe)，如果重构代码的话，所指定的基础包可能会出错。</p><p>此时应用 @ComponentScan 指定包中所包含的类或接口,为 basePackageClasses 属性所设置的数组中包含了类，这些类所在的的包会作为组件扫描的基础包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackageClasses=(CDPlayer.class,DVDPlayer.class))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为-bean-添加注解实现自动装配"><a href="#为-bean-添加注解实现自动装配" class="headerlink" title="为 bean 添加注解实现自动装配"></a>为 bean 添加注解实现自动装配</h4><p>  CDPlayer 类中，给构造器添加 @Autowired 注解，表明当 Spring 创建 CDPlayer bean 时，会通过这个构造器来进行实例化，并且传入一个可设置给 CompactDisc 类型的 bean。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd = cd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  该注解可用在构造器，也可用在属性的 Setter 方法上，CDPlayer 有一个 setCompactDisc() 方法，可以采用如下的注解装配：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.cd = cd;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>  在 Spring 初始化 bean 后，它会尽可能满足 bean 的依赖，本例中的依赖是通过带有 @Autowired 注解声明的，@Autowired 能在构造器、Setter 方法，或者其他方法上发挥同样的作用，Spring 都会去满足方法参数上所声明的依赖。</p><p>  如果有且只有一个 bean 匹配依赖需求的话，那么这个 bean 会被装配进来。但没有匹配 bean 的情况下，在应用上下文创建的时候，Spring 会抛出一个异常，为了避免异常出现可以将 @Autowired 的 required 属性设置为 false，同时代码中需进行 null 检查。</p><p>  如果有多个 bean 满足依赖关系 Spring 会抛出一个异常。</p><p>  Autowired 是 Spring 特有注解，可以选择 @Inject 注解（源自 Java 依赖注入规范）代替。</p><h4 id="验证自动装配"><a href="#验证自动装配" class="headerlink" title="验证自动装配"></a>验证自动装配</h4><p>  <a href="http://mvnrepository.com/artifact/com.github.stefanbirkner/system-rules" rel="noopener" target="_blank">System Rules 库 </a></p><p>  <a href="https://yanbin.blog/java-unit-test-assert-console-output/#more-7504&quot; rel=&quot;external nofollow" target="_blank" rel="noopener">Java 单元测试如何断言(检查)控制台输出</a></p><p>  注入 CompactDisc ，注入 CDPlayer bean 到测试代码的 player 成员变量之中（为更通用的 MediaPlayer 类型），在 play 测试方法中，可以调用 CDPlayer 的 player() 方法，断言其行为与你的预期一致</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.contrib.java.lang.system.StandardOutputStreamLog;</span><br><span class="line"><span class="keyword">import</span> org.junit.contrib.java.lang.system.SystemOutRule;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes=CDPlayerConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> SystemOutRule log = <span class="keyword">new</span> SystemOutRule();</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MediaPlayer player;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    <span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertNotNull(cd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.play();</span><br><span class="line">        assertEquals(</span><br><span class="line">                <span class="string">"playing Sgt. Pepper's Lonely Hearts Club Band"</span> +</span><br><span class="line">                        <span class="string">"by The Beatles\n"</span>,</span><br><span class="line">                log.getLog();</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-框架基础&quot;&gt;&lt;a href=&quot;#Spring-框架基础&quot; class=&quot;headerlink&quot; title=&quot;Spring 框架基础&quot;&gt;&lt;/a&gt;Spring 框架基础&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;控制反转&lt;/strong&gt;（Inversion of Control，缩写为&lt;strong&gt;IoC&lt;/strong&gt;），是&lt;a href=&quot;https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向对象编程&lt;/a&gt;中的一种设计原则，可以用来减低计算机代码之间的&lt;a href=&quot;https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;耦合度&lt;/a&gt;。其中最常见的方式叫做&lt;strong&gt;依赖注入&lt;/strong&gt;（Dependency Injection，简称&lt;strong&gt;DI&lt;/strong&gt;），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 &lt;/p&gt;
&lt;p&gt;IOC 是一种设计模式，原来创建对象的主动权和时间是由自己控制的，现在把需要使用的对象的创建，销毁的控制权交给别人（IOC容器），使用时直接获取，这种对象可以单例或多例。IOC 有利于降低耦合度。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/18/0125/09/27831725_724899826.shtml&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;依赖注入和控制反转的理解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AOP为Aspect Oriented Programming的缩写，意为：&lt;a href=&quot;https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向切面编程&lt;/a&gt;，通过&lt;a href=&quot;https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;预编译&lt;/a&gt;方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是&lt;a href=&quot;https://baike.baidu.com/item/OOP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OOP&lt;/a&gt;的延续，是软件开发中的一个热点，也是&lt;a href=&quot;https://baike.baidu.com/item/Spring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring&lt;/a&gt;框架中的一个重要内容，是&lt;a href=&quot;https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数式编程&lt;/a&gt;的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的&lt;a href=&quot;https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;耦合度&lt;/a&gt;降低，提高程序的可重用性，同时提高了开发的效率。 &lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="IOC" scheme="http://yoursite.com/tags/IOC/"/>
    
      <category term="依赖" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96/"/>
    
      <category term="注入" scheme="http://yoursite.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis_Reply 微信自动回复</title>
    <link href="http://yoursite.com/2018/07/30/MyBatis-Reply/"/>
    <id>http://yoursite.com/2018/07/30/MyBatis-Reply/</id>
    <published>2018-07-30T07:48:55.000Z</published>
    <updated>2018-08-10T10:09:26.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现输入关键字微信自动回复的功能"><a href="#实现输入关键字微信自动回复的功能" class="headerlink" title="实现输入关键字微信自动回复的功能"></a>实现输入关键字微信自动回复的功能</h2><h4 id="添加一对多关系配置"><a href="#添加一对多关系配置" class="headerlink" title="添加一对多关系配置"></a>添加一对多关系配置</h4><p>创建 command 与关联数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table command(id int primary key , name varchar(16) , description varchar(16));</span><br><span class="line">create table command_content (id int primary key , content varchar(2048) , command_id int, foreign key(command_id) references command(id) on delete cascade on update cascade);</span><br></pre></td></tr></table></figure><p>查询主表的实体，将查询 sql 语句放在主表对应的 xml 文件中，将查询出的数据填充到主表对应的属性中，同时填充子表的列表</p><p>left join COMMAND_CONTENT 关联附表</p><p>COMMAND a       COMMAND_CONTENT b  给表取别名，主表为 a ；附表为 b</p><p>a.ID C_ID 给 a 表 ID 取别名为 C_ID</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ID C_ID,a.NAME,a.DESCRIPTION,b.Id,b.CONTENT,b.COMMAND_ID from COMMAND a left join COMMAND_CONTENT b on a.ID=b.COMMAND_ID</span><br></pre></td></tr></table></figure><p>mybatis 取属性名时，用的是 ResultSet 的 getMetaData().getColumnName(column); 方法</p><p>不会取到 a.ID 的 a 前缀</p><p>如果创建了不存在的 主表 id 对应 command_id 则无法再创建新的 column</p><img src="/2018/07/30/MyBatis-Reply/1533039910534.png" title="error"><p>空语句可以产生提示，有了内容就无法发送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">HTTP Status 500 – Internal Server Error</span><br><span class="line">Type Exception Report</span><br><span class="line"></span><br><span class="line">Description The server encountered an unexpected condition that prevented it from fulfilling the request.</span><br><span class="line"></span><br><span class="line">Exception</span><br><span class="line"></span><br><span class="line">org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: java.lang.IllegalArgumentException: Result Maps collection does not contain value for CommandContent.Content</span><br><span class="line">### The error may exist in com/imooc/config/sqlxml/Command.xml</span><br><span class="line">### The error may involve Command.queryCommandList</span><br><span class="line">### The error occurred while handling results</span><br><span class="line">### SQL: select a.ID C_ID,a.NAME,a.DESCRIPTION,b.Id,b.CONTENT,b.COMMAND_ID     from COMMAND a left join COMMAND_CONTENT b     on a.ID=b.COMMAND_ID</span><br><span class="line">### Cause: java.lang.IllegalArgumentException: Result Maps collection does not contain value for CommandContent.Content</span><br><span class="line">org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:150)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)</span><br><span class="line">com.imooc.dao.CommandDao.queryCommandList(CommandDao.java:34)</span><br><span class="line">com.imooc.service.QueryService.queryByCommand(QueryService.java:53)</span><br><span class="line">com.imooc.servlet.AutoReplyServlet.doGet(AutoReplyServlet.java:18)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:635)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">Root Cause</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: Result Maps collection does not contain value for CommandContent.Content</span><br><span class="line">org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:888)</span><br><span class="line">org.apache.ibatis.session.Configuration.getResultMap(Configuration.java:640)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getNestedResultMap(DefaultResultSetHandler.java:1011)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyNestedResultMappings(DefaultResultSetHandler.java:945)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:918)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForNestedResultMap(DefaultResultSetHandler.java:881)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:303)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:196)</span><br><span class="line">org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)</span><br><span class="line">org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)</span><br><span class="line">org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)</span><br><span class="line">org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)</span><br><span class="line">org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)</span><br><span class="line">org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)</span><br><span class="line">org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)</span><br><span class="line">com.imooc.dao.CommandDao.queryCommandList(CommandDao.java:34)</span><br><span class="line">com.imooc.service.QueryService.queryByCommand(QueryService.java:53)</span><br><span class="line">com.imooc.servlet.AutoReplyServlet.doGet(AutoReplyServlet.java:18)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:635)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">Note The full stack trace of the root cause is available in the server logs.</span><br><span class="line"></span><br><span class="line">Apache Tomcat/8.5.29</span><br></pre></td></tr></table></figure><p>原因：在 Command.xml 中的 collention 属性的 ResultMap 引用 CommandContent.xml 下的 id ,引用名错误</p><p>方法：(CommandContent.ResultMap).id=”Content”</p><p>(Command.Collection)ResultMap=”CommandContent.Content”</p><p>如果没有在 Configuration.xml 文件中引入 CommandContent.xml 与 Command.xml 也会产生该错误</p><h4 id="mybatis-一对多关系的配置"><a href="#mybatis-一对多关系的配置" class="headerlink" title="mybatis 一对多关系的配置"></a>mybatis 一对多关系的配置</h4><p>数据库子表内含“段子”关键词的多个内容，对应主表的“段子”的 id 。每次用户发送”段子“时，取出其中的所有内容，拼接进查询服务 QueryService 中创建的 (List)contentList 集合中，再创建随机数返回其中一条内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--类似于 java package 的用法，用来区分不同项目,namespace 必须添加--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--作为子表包含具体多个内容对应主表的一个 id 然后被主表所引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"CommandContent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.imooc.bean.CommandContent"</span> <span class="attr">id</span>=<span class="string">"Content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CONTENT"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"COMMAND_ID"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"commandId"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--类似于 java package 的用法，用来区分不同项目,namespace 必须添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Command"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要反应一个一对多关系，需要用到在主表中引用子表列表的集合,引用CommandContent.xml 中的 Content 属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.imooc.bean.Command"</span> <span class="attr">id</span>=<span class="string">"Command"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"C_ID"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"NAME"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"DESCRIPTION"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"contentList"</span> <span class="attr">resultMap</span>=<span class="string">"CommandContent.Content"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--查询主表同时关联子表--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryCommandList"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.bean.Command"</span> <span class="attr">resultMap</span>=<span class="string">"Command"</span>&gt;</span></span><br><span class="line">    select a.ID C_ID,a.NAME,a.DESCRIPTION,b.Id,b.CONTENT,b.COMMAND_ID</span><br><span class="line">    from COMMAND a left join COMMAND_CONTENT b</span><br><span class="line">    on a.ID=b.COMMAND_ID</span><br><span class="line">      <span class="comment">&lt;!--where 关键字指，在其中的 if 语句都不满足条件则不输出 where 关键字，反之，有一个 if 满足则输出 where + if 中语句--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--where 还能将 if 拼接的 sql 语句最前端的 and 去掉，防止语句不准确--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(name.trim()) "</span>&gt;</span></span><br><span class="line">     and a.NAME=#&#123;name&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">     and a.DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上两个 xml 要引入到 Configuration.xml 中</p><h4 id="将原来的单条信息查询改为一对多的数据查询"><a href="#将原来的单条信息查询改为一对多的数据查询" class="headerlink" title="将原来的单条信息查询改为一对多的数据查询"></a>将原来的单条信息查询改为一对多的数据查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Command;</span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.CommandContent;</span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.CommandDao;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"><span class="keyword">import</span> com.imooc.util.Iconst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command, String description)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="keyword">return</span> messageDao.queryMessageList(command,description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过指令查询自动回复内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryByCommand</span><span class="params">(String command)</span></span>&#123;</span><br><span class="line"><span class="comment">//        MessageDao messageDao = new MessageDao();</span></span><br><span class="line">        CommandDao commandDao = <span class="keyword">new</span> CommandDao();</span><br><span class="line"><span class="comment">//        List&lt;Message&gt; messageList;</span></span><br><span class="line">        List&lt;Command&gt; commandList;</span><br><span class="line">        <span class="keyword">if</span>(Iconst.HELP_COMMAND.equals(command))&#123;</span><br><span class="line"><span class="comment">//            如果指令是帮助，则将所有指令查出来并拼接；</span></span><br><span class="line"><span class="comment">//            messageList = messageDao.queryMessageList(null, null);</span></span><br><span class="line">            commandList = commandDao.queryCommandList(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//            for(int i= 0;i &lt; messageList.size();i++)&#123;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i &lt; commandList.size();i++)&#123;</span><br><span class="line">                <span class="comment">//如果不是第一行则添加换行</span></span><br><span class="line">                <span class="keyword">if</span>(i !=<span class="number">0</span>)&#123;</span><br><span class="line">                    result.append(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                拼接所有查询出来的指令及描述</span></span><br><span class="line"><span class="comment">//                result.append("回复[" + messageList.get(i).getCommand() + "]可以查看"</span></span><br><span class="line"><span class="comment">//                        + messageList.get(i).getDescription());</span></span><br><span class="line">                result.append(<span class="string">"回复["</span> + commandList.get(i).getName() + <span class="string">"]可以查看"</span></span><br><span class="line">                        + commandList.get(i).getDescription());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只需要通过指令，不需要描述来查询自动回复,如果为 null 则不进入 if 判断语句，不会添加 and sql 语句</span></span><br><span class="line"><span class="comment">//        messageList = messageDao.queryMessageList(command, null);</span></span><br><span class="line"><span class="comment">//        if(messageList.size() &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">//            return messageList.get(0).getContent();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        commandList = commandDao.queryCommandList(command, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span>(commandList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//取得第一条查询语句的 子表集合内容/列表信息</span></span><br><span class="line">            List&lt;CommandContent&gt; contentList = commandList.get(<span class="number">0</span>).getContentList();</span><br><span class="line">            <span class="comment">//取得列表信息其中一条返回</span></span><br><span class="line">            <span class="comment">//取 [0,size()) 的随机数</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="keyword">new</span> Random().nextInt(contentList.size());</span><br><span class="line"><span class="comment">//            取得随机的 commandContent 的对象，然后从对象中取得内容</span></span><br><span class="line">            <span class="keyword">return</span> contentList.get(i).getContent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当指令没有匹配的回复内容时，用此内容替代</span></span><br><span class="line">        <span class="keyword">return</span> Iconst.NO_MATCHING_CONTENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动回复 servlet 将跳转功能转换为 写查询返回语句的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.service.QueryService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoReplyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        QueryService queryService = <span class="keyword">new</span> QueryService();</span><br><span class="line">        out.write(queryService.queryByCommand(req.getParameter(<span class="string">"content"</span>)));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><ol><li><p>where 标签</p><p>where标签 在其中的 if 语句都不满足条件则不输出 where 关键字，反之，有一个 if 满足则输出 where + if 中语句<br>where 还能将 if 拼接的 sql 语句最前端的 and 去掉，防止语句不准确</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">   and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去掉 where 1=1 ，但是加上 where 标签即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">   and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>include 引用标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE</span><br></pre></td></tr></table></figure></li></ol><p>语句能用以下语法代替</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"columns"</span>/&gt;</span> from MESSAGE</span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"columns"</span>&gt;</span>ID,COMMAND,DESCRIPTION,CONTENT<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>set 标签</li></ol><p>修改升级数据库的功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update MESSAGE set COMMAND=#&#123;command&#125;,DESCRIPTION=#&#123;description&#125;</span><br></pre></td></tr></table></figure><p>update 标签</p><p>为了使 sql 语句结尾的 ‘,’ 不多余加入了 set 标签，效果跟 where 去 and 类似，能去掉语句最后多余的 ‘,’</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">update MESSAGE set </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span></span><br><span class="line">        COMMAND=#&#123;command&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">     and DESCRIPTION=#&#123;description&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    COMMAND=#&#123;command&#125;,DESCRIPTION=#&#123;description&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>trim标签</li></ol><blockquote><p>trim 标签中的 prefix 属性，表示前缀，可以等于 where/set…（可自定义）如果各种判断结束有字符串输出就加入 where/set…</p></blockquote><blockquote><p>trim 标签中的 suffix 属性，表示后面，可以加 test 或自定义 ，如果 if 中有内容输出就在最后加一个 test</p></blockquote><blockquote><p>trim 标签的 prefixOverride 属性，表示删除前面内容，例如 prefixOverride=”and/or” 如果在前面出现了and 与 or 则切掉，同理 suffixOverride=”,” 可以去除结尾的 ‘,’</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当 prefix 值为 where 且能去掉首部的 and/or，该 trim 能替换 where 标签</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverride</span>=<span class="string">"and/or"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">同理当 prefix 值为 set 且去掉尾部的 ','，该 trim 能替换 set 标签</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverride</span>=<span class="string">","</span>&gt;</span><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>choose 标签</li></ol><p>chosse when 相当于 java 中的 else if，又或者是 switch case</p><p>choose otherwise 相当于 else，或者是 default</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">   and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>association 标签</li></ol><p>需要根据子表内容查询相关联的主表内容，association 与 collection 标签相似 。 property 为 bean 中主表实体的引用，resultMap 指向主表的 nameSpace.(resultMap 的 id)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"command"</span> <span class="attr">resultMap</span>=<span class="string">"Command.Command"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="标签总结"><a href="#标签总结" class="headerlink" title="标签总结"></a>标签总结</h4><ol><li>定义 sql 语句</li></ol><p>insert，delete，update，select</p><ol start="2"><li>配置 java 对象属性与查询结果集中列名的对应关系（列名不是数据库表中的列名，而是查询结果集的列名）</li></ol><p>resultMap</p><ol start="3"><li>动态拼接 sql 语句</li></ol><p>foreach，if，choose</p><ol start="4"><li>格式化输出（动态拼接 sql 语句不符合 sql 语法，对该语法进行格式化）</li></ol><p>where，set，trim</p><ol start="5"><li>配置关联关系（一对多，多对一）</li></ol><p>collention，association</p><ol start="6"><li>常量标签（可在需要地方引用他）</li></ol><p>sql </p><ol start="7"><li>引用标签（引用常量标签）</li></ol><p>include</p><p>resultMap 使用标签配置对应关系，结果集列名与 java 类属性名可以不相同，有 typeHandler 可以配置字符集</p><p>resultType 不需要进行配置，但是结果集中的列名与 java 类中的属性名相同</p><p>parameterType 与 ognl 表达式相关联  #{}</p><p>parameterMap 与 resultMap 相似，需要指向 ParameterMap 标签配置的映射关系的 id 。表示参数中的属性与数据库列的对应关系。</p><p>以 Map 结尾表示映射，需要配置映射关系</p><p>Type 结尾表示类型，resultType 与 parameterType 原名 resultClass 与 parameterClass，与 java 类类似</p><p>#{} 被 mybatis 解析为 ？，然后被 preparedStatement 赋值为 ‘段子’，有预编译效果，一半采用该方法</p><p>${} 直接被 mybatis 拼接 字符串 （String）段子，没有引号，需要自己添加单引号 ‘${command}’</p><p> ${} 一般用于取直接从页面上传过来的列名进行操作</p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ul><li><p>sql 语法错误：使用 log4j 查看拼接后的 sql 语句，将其复制到 nativeMysql 中，将值赋给 ？的占位符，进行 sql 语句的判断</p></li><li><p>注解型 sql 比 配置型 sql 方便，但是有局限性</p></li><li><p>编码问题 ：文件本身编码、jsp 设置编码、servlet 接受页面传值，用来转换的编码、用 get 方式提交中文时，tomcat 也要配置编码</p><p>网页乱码 :</p><p>在talk.jsp上方加上 </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span>    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>  prefix=<span class="string">"c"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ul><p>  若以上全部配置好，而与数据库交互出现乱码，则在 Configuration.xml 写连接数据库的 url 时，就需要加上编码方式、建立数据库与建表时的编码也需要注意获取自增主键值：</p><ul><li><p>useGeneratedKeys : 表示插入到这张表时采用生成的主键,而不是自己指定一个主键，Command 这个类的其他属性值来自于页面，而 id 是自增的，所以页面中没有 id 值</p></li><li><p>keyProperty : mybatis 会取到新增数据的主键，keyProperty 用来告诉 mybatis 将主键存到 Command 对象的哪一个属性中，这里的主键应该是 id.</p></li><li><p>在 Command 对象传入 xml 时，id 是没有值的，在 sqlSession 调用配置中 sql 语句执行完后，id 就有值了</p></li></ul><p>在talk.jsp上方加上 </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span>    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>  prefix=<span class="string">"c"</span> %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">userGeneratedKeys</span>=<span class="string">"ture"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.bran.Command"</span>&gt;</span></span><br><span class="line">insert into COMMAND(NAME,DESCRIPTION) value(#&#123;name&#125;,#&#123;description&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>向 js 文件中传地址：</li></ul><p>添加一个隐藏块，通过 id 与 value 向 js 中传入 basePath 的值</p><ul><li>idea rename 一个类：</li></ul><p>在一个类上右键 refactor → rename → 修改类名 → 取消 Search in Comments and strings (在评论和字符串中搜索) 跟 Search for textoccurrences (搜索文本事件) → 选择 variable name 点击 ok 即可</p><ol><li>如果不取消 2 个勾选，rename 会无效。 </li><li>选择 variable name 会使得子类重命名在调用该类对象的对象名</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实现输入关键字微信自动回复的功能&quot;&gt;&lt;a href=&quot;#实现输入关键字微信自动回复的功能&quot; class=&quot;headerlink&quot; title=&quot;实现输入关键字微信自动回复的功能&quot;&gt;&lt;/a&gt;实现输入关键字微信自动回复的功能&lt;/h2&gt;&lt;h4 id=&quot;添加一对多关系配置&quot;&gt;&lt;a href=&quot;#添加一对多关系配置&quot; class=&quot;headerlink&quot; title=&quot;添加一对多关系配置&quot;&gt;&lt;/a&gt;添加一对多关系配置&lt;/h4&gt;&lt;p&gt;创建 command 与关联数据库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create table command(id int primary key , name varchar(16) , description varchar(16));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create table command_content (id int primary key , content varchar(2048) , command_id int, foreign key(command_id) references command(id) on delete cascade on update cascade);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查询主表的实体，将查询 sql 语句放在主表对应的 xml 文件中，将查询出的数据填充到主表对应的属性中，同时填充子表的列表&lt;/p&gt;
&lt;p&gt;left join COMMAND_CONTENT 关联附表&lt;/p&gt;
&lt;p&gt;COMMAND a       COMMAND_CONTENT b  给表取别名，主表为 a ；附表为 b&lt;/p&gt;
&lt;p&gt;a.ID C_ID 给 a 表 ID 取别名为 C_ID&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="autoReply" scheme="http://yoursite.com/tags/autoReply/"/>
    
      <category term="weChat" scheme="http://yoursite.com/tags/weChat/"/>
    
  </entry>
  
  <entry>
    <title>jdbcToMyBatis</title>
    <link href="http://yoursite.com/2018/07/25/jdbcToMyBatis/"/>
    <id>http://yoursite.com/2018/07/25/jdbcToMyBatis/</id>
    <published>2018-07-25T09:32:40.000Z</published>
    <updated>2018-08-10T08:36:38.065Z</updated>
    
    <content type="html"><![CDATA[<p>css 设置不显示问题：</p><p>将 resources 放入了 WEB-INF 文件夹中（这文件夹中的内容只能根据内部跳转或重定向等网页操作才能访问，不能直接访问）</p><p>request.getContextPath() 获取的是上下文路径。是你的web项目的根路径，就是 webContent (MyEclipse中是webRoot) 或者 idea 中的 web 路径</p><p><a href="https://www.cnblogs.com/qq3111901846/p/6242096.html" rel="noopener" target="_blank">拼装当前网页相对路径</a></p><p><a href="https://blog.csdn.net/cos_sin_tan/article/details/45311793" rel="noopener" target="_blank">url-pattern 配置</a></p><p>此文为 jdbc 版，如已了解直接转至 <a href="https://crow-song.github.io/2018/07/23/MyBatis/" rel="noopener" target="_blank">mybatis版</a></p><a id="more"></a><ul><li>第一版大体框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;%--拼接当前网页相对路径--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span>content=<span class="string">"IE=9; IE=8; IE=7; IE=EDGE"</span> /&gt;</span><br><span class="line">&lt;title&gt;内容列表页面&lt;/title&gt;</span><br><span class="line">&lt;%--css 文件的相对路径--%&gt;</span><br><span class="line">&lt;link href=<span class="string">"resources/css/all.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=<span class="string">"background: #e1e9eb;"</span>&gt;</span><br><span class="line"> &lt;form action=<span class="string">""</span> id=<span class="string">"mainForm"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"current"</span>&gt;当前位置：&lt;br/&gt;</span><br><span class="line">        &lt;a href=<span class="string">"javascript:void(0)"</span> style=<span class="string">"color:#6E6E6E;"</span>&gt;</span><br><span class="line">            内容管理</span><br><span class="line">        &lt;/a&gt; &amp;gt; 内容列表</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"rightCont"</span>&gt;</span><br><span class="line">        &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"g_title fix"</span>&gt;内容列表 </span><br><span class="line">            &lt;a class="btn03" href="#"&gt;新 增&lt;/a&gt;</span><br><span class="line">            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;a class="btn03" href="#"&gt;删 除&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab1"</span>&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width="90" align="right"&gt;演示字段1：&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td width="90" align="right"&gt;演示字段2：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td width=<span class="string">"85"</span> align=<span class="string">"right"</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"submit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tabSub"</span> value=<span class="string">"查 询"</span> /&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"zixun fix"</span>&gt;</span><br><span class="line">        &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab2"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;&lt;input type="checkbox" id="all" onclick="#"/&gt;&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;演示字段1&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;演示字段2&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr style=<span class="string">"background-color:#ECF6EE;"</span>&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr style=<span class="string">"background-color:#ECF6EE;"</span>&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;4&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'page fix'</span>&gt;</span><br><span class="line">            共 &lt;b&gt;4&lt;/b&gt; 条</span><br><span class="line">            &lt;a href='###' class='first'&gt;首页&lt;/a&gt;</span><br><span class="line">            &lt;a href='###' class='pre'&gt;上一页&lt;/a&gt;</span><br><span class="line">            当前第&lt;span&gt;1/1&lt;/span&gt;页</span><br><span class="line">            &lt;a href='###' class='next'&gt;下一页&lt;/a&gt;</span><br><span class="line">            &lt;a href='###' class='last'&gt;末页&lt;/a&gt;</span><br><span class="line">            跳至&amp;nbsp;&lt;input type=<span class="string">'text'</span> value=<span class="string">'1'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'allInput w28'</span> /&gt;&amp;nbsp;页&amp;nbsp;</span><br><span class="line">            &lt;a href='###' class='go'&gt;GO&lt;/a&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">       </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line">         version=<span class="string">"3.1"</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;welcome-file-list&gt;</span><br><span class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;/welcome-file-list&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此处可用 servlet 中的注释代替</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    &lt;!--&lt;servlet&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;servlet-name&gt;ListServlet&lt;/servlet-name&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">imooc</span>.<span class="title">servlet</span>.<span class="title">ListServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;--&gt;</span></span><br><span class="line"><span class="class">    &lt;!--&lt;/<span class="title">servlet</span>&gt;--&gt;</span></span><br><span class="line"><span class="class">    &lt;!--&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;--&gt;</span></span><br><span class="line"><span class="class">        &lt;!--&lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">ListServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;--&gt;</span></span><br><span class="line">         &lt;!--访问 http://localhost:8080/List.action 后跳转到 list.jsp 页面--&gt;   </span><br><span class="line">        &lt;!--&lt;url-pattern&gt;/List.action&lt;/url-pattern&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/servlet-mapping&gt;--&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指令名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String command;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>第一版完善</li></ul><p>完善 list.jsp 及 ListSerlvet.java 的相关部分</p><p>sql 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sql preparedstatement 语句</span></span><br><span class="line"><span class="comment">// ? 占位符</span></span><br><span class="line"><span class="comment">// 用缺省值的方式，使用 List 在后面遍历填充字段信息比较方便</span></span><br><span class="line">stringsql = <span class="string">"select * from people p where p.id = ? and p.name = ?"</span>;</span><br><span class="line">preparedstatement ps = connection.preparestatement(sql);</span><br><span class="line"><span class="comment">//设置缺省值的值</span></span><br><span class="line"><span class="comment">//index 的值从 1 开始</span></span><br><span class="line">ps.setint(<span class="number">1</span>,id);</span><br><span class="line">ps.setstring(<span class="number">2</span>,name);</span><br><span class="line"><span class="comment">//执行 sql 语句</span></span><br><span class="line">resultset rs = ps.executequery();</span><br></pre></td></tr></table></figure><p>list.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;%--使用 jstl--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%--拼接当前网页相对路径--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span>content=<span class="string">"IE=9; IE=8; IE=7; IE=EDGE"</span> /&gt;</span><br><span class="line">&lt;title&gt;内容列表页面&lt;/title&gt;</span><br><span class="line">&lt;%--css 文件的相对路径--%&gt;</span><br><span class="line">&lt;link href=<span class="string">"&lt;%=basePath%&gt;/resources/css/all.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=<span class="string">"background: #e1e9eb;"</span>&gt;</span><br><span class="line">&lt;%--提交到 ListServlet 上进行初始化与查询--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"&lt;%=basePath%&gt;/List.action"</span> id=<span class="string">"mainForm"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">&lt;div class="current"&gt;当前位置：&lt;a href="javascript:void(0)" style="color:#6E6E6E;"&gt;内容管理&lt;/a&gt; &amp;gt; 内容列表&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"rightCont"</span>&gt;</span><br><span class="line">&lt;p class="g_title fix"&gt;内容列表 &lt;a class="btn03" href="#"&gt;新 增&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a class="btn03" href="#"&gt;删 除&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab1"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;指令名称：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"command"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;command&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;描述：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"description"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;description&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">                            &lt;td width="85" align="right"&gt;&lt;input type="submit" class="tabSub" value="查 询" /&gt;&lt;/td&gt;</span><br><span class="line">       &lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"zixun fix"</span>&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab2"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;th&gt;&lt;input type="checkbox" id="all" onclick="#"/&gt;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段1&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段2&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;messageList&#125;"</span> var=<span class="string">"message"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;tr &lt;c:if test="$&#123;status.index % 2 != 0&#125;"&gt;style='background-color:#ECF6EE;'&lt;/c:if&gt;&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;status.index + 1&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.command&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.description&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'page fix'</span>&gt;</span><br><span class="line">共 &lt;b&gt;4&lt;/b&gt; 条</span><br><span class="line">&lt;a href='###' class='first'&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='pre'&gt;上一页&lt;/a&gt;</span><br><span class="line">当前第&lt;span&gt;1/1&lt;/span&gt;页</span><br><span class="line">&lt;a href='###' class='next'&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='last'&gt;末页&lt;/a&gt;</span><br><span class="line">跳至&amp;nbsp;&lt;input type=<span class="string">'text'</span> value=<span class="string">'1'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'allInput w28'</span> /&gt;&amp;nbsp;页&amp;nbsp;</span><br><span class="line">&lt;a href='###' class='go'&gt;GO&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ListServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到表单文本框提交的数据</span></span><br><span class="line">            req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            String command = req.getParameter(<span class="string">"command"</span>);</span><br><span class="line">            String description = req.getParameter(<span class="string">"description"</span>);</span><br><span class="line">            <span class="comment">//将查询完的值保留在查询栏中</span></span><br><span class="line">            req.setAttribute(<span class="string">"command"</span>,command);</span><br><span class="line">            req.setAttribute(<span class="string">"description"</span>,description);</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/micro_message"</span>,</span><br><span class="line">                    <span class="string">"root"</span>,<span class="string">"dfwhj43815"</span>);</span><br><span class="line">            StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1"</span>);</span><br><span class="line">            <span class="comment">//创建一个 List 将需要拼接的 sql 语句查询内容装进去，最后用 for 循环取出，set 到 PreparedStatement 后执行</span></span><br><span class="line">            List&lt;String&gt; paramList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="comment">//.trim() 方法返回一个 String 的副本，用来去除首尾的空格</span></span><br><span class="line">            <span class="keyword">if</span>(command != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(command.trim()))&#123;</span><br><span class="line">            <span class="comment">//查询sql语句拼接不用sql.append(" and command = '"+command+"'")  因为容易被SQL注入攻击</span></span><br><span class="line">                sql.append(<span class="string">" and COMMAND=?"</span>);</span><br><span class="line">                paramList.add(command);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(description != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(description.trim()))&#123;</span><br><span class="line">                sql.append(<span class="string">" and DESCRIPTION like '%' ? '%'"</span>);</span><br><span class="line">                paramList.add(description);</span><br><span class="line">            &#125;</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql.toString());</span><br><span class="line">            <span class="comment">//在 sql 语句执行前，将参数加进去</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramList.size(); i++) &#123;</span><br><span class="line">                ps.setString(i + <span class="number">1</span>,paramList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            List&lt;Message&gt;messageList = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                <span class="comment">//添加到容器中的不是对象本身，此时操作对象仍可以改变在容器中的内容。</span></span><br><span class="line">                <span class="comment">//也可以将对象在最后添加到容器</span></span><br><span class="line">                message.setId(rs.getString(<span class="string">"ID"</span>));</span><br><span class="line">                message.setCommand(rs.getString(<span class="string">"COMMAND"</span>));</span><br><span class="line">                message.setDescription(rs.getString(<span class="string">"DESCRIPTION"</span>));</span><br><span class="line">                message.setContent(rs.getString(<span class="string">"CONTENT"</span>));</span><br><span class="line">                messageList.add(message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将容器添加到 request 的 attribute 可以在页面上显示出来</span></span><br><span class="line">            req.setAttribute(<span class="string">"messageList"</span>,messageList);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u013806366/article/details/51979930" rel="noopener" target="_blank">idea 引入 c 标签</a></p><p>网页有框架没有数据，提示找不到 jdbc，没有正确导入 Driver 包；</p><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘message’ at line 1</p><p>​    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)<br>    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)<br>    at java.lang.reflect.Constructor.newInstance(Unknown Source)</p><p>Sql 语句有语法错误：from 写成了 form</p><hr><ul><li><p>第一版代码重构</p><p>将原来 servlet 的功能分出去</p></li></ul><ol><li><p>servlet 的功能</p><p>设置编码</p><p>接受页面的值</p><p>向页面传值</p></li><li><p>dao 层的功能</p><p>根据查询条件查询消息列表，跟表 Message 相关的所有操作都在这层</p></li><li><p>service 层的功能</p><p>调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</p></li></ol><p><img src="D:\hexo\source\_posts\jdbcToMyBatis\1532415686359.png" alt="项目目录"></p><p>ListSerlvet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.service.ListService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//接受页面的值</span></span><br><span class="line">        String command = req.getParameter(<span class="string">"command"</span>);</span><br><span class="line">        String description = req.getParameter(<span class="string">"description"</span>);</span><br><span class="line">        <span class="comment">//向页面传值</span></span><br><span class="line">        req.setAttribute(<span class="string">"command"</span>,command);</span><br><span class="line">        req.setAttribute(<span class="string">"description"</span>,description);</span><br><span class="line">        <span class="comment">//查询消息列表并传给页面。调用 ListService 的函数，将查询的结果放到 req 中</span></span><br><span class="line">        ListService listService = <span class="keyword">new</span> ListService();</span><br><span class="line">        req.setAttribute(<span class="string">"messageList"</span>,listService.queryMessageList(command,description));</span><br><span class="line">        <span class="comment">//向页面跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao 层跟表相关，此 dao 包含跟 message 表相关的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据查询条件查询消息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command,String description)</span></span>&#123;</span><br><span class="line">        List&lt;Message&gt;messageList = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/micro_message"</span>,</span><br><span class="line">                    <span class="string">"root"</span>,<span class="string">"dfwhj43815"</span>);</span><br><span class="line">            StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1"</span>);</span><br><span class="line">            <span class="comment">//创建一个 List 将需要拼接的 sql 语句查询内容装进去，最后用 for 循环取出，set 到 PreparedStatement 后执行</span></span><br><span class="line">            List&lt;String&gt; paramList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="comment">//.trim() 方法返回一个 String 的副本，用来去除首尾的空格</span></span><br><span class="line">            <span class="keyword">if</span>(command != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(command.trim()))&#123;</span><br><span class="line">                <span class="comment">//查询sql语句拼接不用sql.append(" and command = '"+command+"'")  因为容易被SQL注入攻击</span></span><br><span class="line">                sql.append(<span class="string">" and COMMAND=?"</span>);</span><br><span class="line">                paramList.add(command);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(description != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(description.trim()))&#123;</span><br><span class="line">                sql.append(<span class="string">" and DESCRIPTION like '%' ? '%'"</span>);</span><br><span class="line">                paramList.add(description);</span><br><span class="line">            &#125;</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql.toString());</span><br><span class="line">            <span class="comment">//在 sql 语句执行前，将参数加进去</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramList.size(); i++) &#123;</span><br><span class="line">                ps.setString(i + <span class="number">1</span>,paramList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                <span class="comment">//添加到容器中的不是对象本身，此时操作对象仍可以改变在容器中的内容。</span></span><br><span class="line">                <span class="comment">//也可以将对象在最后添加到容器</span></span><br><span class="line">                message.setId(rs.getString(<span class="string">"ID"</span>));</span><br><span class="line">                message.setCommand(rs.getString(<span class="string">"COMMAND"</span>));</span><br><span class="line">                message.setDescription(rs.getString(<span class="string">"DESCRIPTION"</span>));</span><br><span class="line">                message.setContent(rs.getString(<span class="string">"CONTENT"</span>));</span><br><span class="line">                messageList.add(message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> messageList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command, String description)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="keyword">return</span> messageDao.queryMessageList(command,description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css 设置不显示问题：&lt;/p&gt;
&lt;p&gt;将 resources 放入了 WEB-INF 文件夹中（这文件夹中的内容只能根据内部跳转或重定向等网页操作才能访问，不能直接访问）&lt;/p&gt;
&lt;p&gt;request.getContextPath() 获取的是上下文路径。是你的web项目的根路径，就是 webContent (MyEclipse中是webRoot) 或者 idea 中的 web 路径&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/qq3111901846/p/6242096.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;拼装当前网页相对路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/cos_sin_tan/article/details/45311793&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;url-pattern 配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此文为 jdbc 版，如已了解直接转至 &lt;a href=&quot;https://crow-song.github.io/2018/07/23/MyBatis/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mybatis版&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="jdbc" scheme="http://yoursite.com/tags/jdbc/"/>
    
      <category term="myBatis" scheme="http://yoursite.com/tags/myBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="http://yoursite.com/2018/07/23/MyBatis/"/>
    <id>http://yoursite.com/2018/07/23/MyBatis/</id>
    <published>2018-07-23T07:00:11.000Z</published>
    <updated>2018-08-10T09:21:33.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用-mybatis-替代-jdbc"><a href="#用-mybatis-替代-jdbc" class="headerlink" title="用 mybatis 替代 jdbc"></a>用 mybatis 替代 jdbc</h2><p><a href="https://github.com/mybatis/mybatis-3/releases" rel="noopener" target="_blank">mybatis 下载地址</a></p><p><a href="https://crow-song.github.io/2018/07/25/jdbcToMyBatis/" rel="noopener" target="_blank">jdbc 版跳转此处</a></p><p>dao (data access objection 数据访问对象)层需求 ：</p><ol><li>能与数据库交互</li><li>能执行 sql 语句</li></ol><p>mybatis ：向 dao 层提供对象 SqlSession</p><p>SqlSession 作用：</p><ol><li>向 sql 语句传入参数</li><li>执行 sql 语句</li><li>获取执行 sql 语句的结果</li><li>事务的控制</li></ol><p>如何得到 SqlSession：</p><ol><li>通过配置文件获取数据库连接的相关信息</li><li>通过配置信息构建 SqlSessionFactory</li><li>通过 SqlSessionFactory 打开 数据库会话（SqlSession）</li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指令名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String command;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Copyright 2009-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">       you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">       You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">       distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">       See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">       limitations under the License.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--类似于 java package 的用法，用来区分不同项目,namespace 必须添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Message"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--对应 jdbc 的 message.setId(rs.getString("ID")); 等方法--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--type 表示的是数据库字段对应 java 中哪个类的对象；id 随意取名；--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果在数据库中为主键，则配 id colum,否则配 result colum 标签；--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--colum 对应数据库列的属性名；property 是数据库对应 java bean对象中的属性名--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbcType 对应数据库中属性的类型 Int、varchar 等--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.imooc.bean.Message"</span> <span class="attr">id</span>=<span class="string">"MessageResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"COMMAND"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"command"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"DESCRIPTION"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CONTENT"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select id 必须是唯一的，但与 resultMap 中的 id 可以重名--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--parameterType 是传入 sqlSession 的参数的属性--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--resultMap 指向 resultMap 标签的 id--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--OGNL 表达式 如果是自定义类型就直接写自定义属性的属性名（command）--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--可以从 java 对象中调用属性值 而且可以直接调用 java 对象的方法--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--但是 与符号 &amp;&amp; 需要转义成 &amp;amp;&amp;amp  或者用 OGNl 的 and 操作符--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--双引号 "" 需要转义成 &amp;quot;&amp;quot;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--占位符 ? 需要用 #&#123;command&#125; 来替换，表示用 command 值来填充 ? 这是 mybatis 的解析规则--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis 配置中 sql 语句前后不需要留空格，会自动拼接--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--模糊查询 like 跟 '%' 保留，问号 ? 替换，问号两边依旧保留空格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryMessageList"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.bean.Message"</span> <span class="attr">resultMap</span>=<span class="string">"MessageResult"</span>&gt;</span></span><br><span class="line">    select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">     and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单个删除--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--#&#123;&#125; 中的取值写法可以视为与 OGNL 相同：当参数为 String 与基本数据类型时，标签属性为 _parameter,</span></span><br><span class="line"><span class="comment"> 若为自定义类型则写自定义类型属性名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOne"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from MESSAGE where ID = #&#123;_parameter&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--批量删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatch"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">        delete from MESSAGE where ID in (</span><br><span class="line">          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">              #&#123;item&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Copyright 2009-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">       you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">       You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">       distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">       See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">       limitations under the License.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;settings&gt;</span></span><br><span class="line"><span class="comment">      &lt;setting name="useGeneratedKeys" value="false"/&gt;</span></span><br><span class="line"><span class="comment">      &lt;setting name="useColumnLabel" value="true"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/settings&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;typeAliases&gt;</span></span><br><span class="line"><span class="comment">      &lt;typeAlias alias="UserAlias" type="org.apache.ibatis.submitted.complex_property.User"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAliases&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/micro_message"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"dfwhj43815"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用来引入 sqlxml 配置文件的内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper 可以多个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/imooc/config/sqlxml/Message.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.db.DBAccess;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao 层跟表相关，此 dao 包含跟 message 表相关的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybytis 根据查询条件查询消息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command,String description)</span></span>&#123;</span><br><span class="line">        DBAccess dbAccess = <span class="keyword">new</span> DBAccess();</span><br><span class="line">        <span class="comment">//要在 final 中关闭此会话，所以放在外面</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建 List 将查询语句内容放进 List 中</span></span><br><span class="line">        List&lt;Message&gt;messageList = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">        <span class="comment">//捕获 DBAccess 抛出的异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = dbAccess.getSqlSession();</span><br><span class="line">            <span class="comment">//新建一个对象，将 command description 对象封装到对象中</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message();</span><br><span class="line">            message.setCommand(command);</span><br><span class="line">            message.setDescription(description);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过 sqlSession 执行 查找sql 语句；值为 namespace.resultMap</span></span><br><span class="line">            messageList = sqlSession.selectList(<span class="string">"Message.queryMessageList"</span>,message);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sqlSession!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                sqlSession.close();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> messageList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 单条删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        DBAccess dbAccess = <span class="keyword">new</span> DBAccess();</span><br><span class="line">        <span class="comment">//要在 final 中关闭此会话，所以放在外面</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//捕获 DBAccess 抛出的异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = dbAccess.getSqlSession();</span><br><span class="line">            <span class="comment">//通过 sqlSession 执行 删除sql 语句；值为 Message.mapper 的 namespace.resultMap</span></span><br><span class="line">            sqlSession.delete(<span class="string">"Message.deleteOne"</span>,id);</span><br><span class="line">            <span class="comment">//使用 mybatis 时对 commit 进行了封装，需要手动进行提交</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Connection conn;</span></span><br><span class="line"><span class="comment">             * 下面两条sql语句是自动提交互不影响的</span></span><br><span class="line"><span class="comment">             * 但是将 conn.setAutoCommit(false) 设定后，下面的 sql 语句将处于一个事物中</span></span><br><span class="line"><span class="comment">             * 需要进行 conn.commit(); 或 conn.roolback(); 才能一次性手动提交</span></span><br><span class="line"><span class="comment">             * conn.prepareStatement("sql").execute();</span></span><br><span class="line"><span class="comment">             * conn.prepareStetement("sql").execute();</span></span><br><span class="line"><span class="comment">             * conn.commit();</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 如下的 sqlSession.commit()；实际上就是 conn.commmit();</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sqlSession!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                sqlSession.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBatch</span><span class="params">(List&lt;Integer&gt; ids)</span></span>&#123;</span><br><span class="line">        DBAccess dbaccess = <span class="keyword">new</span> DBAccess();</span><br><span class="line">        SqlSession sqlsession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlsession = dbaccess.getSqlSession();</span><br><span class="line">            <span class="comment">//执行删除语句</span></span><br><span class="line">            sqlsession.delete(<span class="string">"Message.deleteBatch"</span>,ids);</span><br><span class="line">            sqlsession.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        MessageDao messageDao = new MessageDao();</span></span><br><span class="line"><span class="comment">//        messageDao.queryMessageList("","");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问数据库类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBAccess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//通过配置文件获取数据库连接信息</span></span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"com/imooc/config/Configuration.xml"</span>);</span><br><span class="line">        <span class="comment">//通过配置信息构建一个 SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        <span class="comment">//通过 sqlSessionFactory 打开一个数据库会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command, String description)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="keyword">return</span> messageDao.queryMessageList(command,description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 维护 Service</span></span><br><span class="line"><span class="comment"> * 维护相关业务的功能</span></span><br><span class="line"><span class="comment"> * 页面的一个动作对应了一个 Servlet ；而 Service 不应该同时增加</span></span><br><span class="line"><span class="comment"> * 把相似的功能（修改，新增，删除，批量删除等）放在一个维护 Service 中</span></span><br><span class="line"><span class="comment"> * 以后可以一直添加新功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 将取值的转型及判断是否为空 都放在 Service 中进行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaintainService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单条删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断 id 是否为空，或 空字符串</span></span><br><span class="line">        <span class="keyword">if</span>(id != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(id.trim())) &#123;</span><br><span class="line">            MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">            <span class="comment">//将 id 从 String 转型为 int 并作为参数传入 deleteOne 函数</span></span><br><span class="line">            messageDao.deleteOne(Integer.valueOf(id));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBatch</span><span class="params">(String [] ids)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="comment">//创建 id 的 List</span></span><br><span class="line">        List&lt;Integer&gt; idList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String id : ids) &#123;</span><br><span class="line">            <span class="comment">//转型为 Integer 再传入 List</span></span><br><span class="line">            <span class="keyword">if</span>(id!=<span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(id.trim())) &#123;</span><br><span class="line">                idList.add(Integer.valueOf(id));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用 messageDao 的 deleteBatch 方法</span></span><br><span class="line">        messageDao.deleteBatch(idList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.service.ListService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//接受页面的值</span></span><br><span class="line">        String command = req.getParameter(<span class="string">"command"</span>);</span><br><span class="line">        String description = req.getParameter(<span class="string">"description"</span>);</span><br><span class="line">        <span class="comment">//向页面传值</span></span><br><span class="line">        req.setAttribute(<span class="string">"command"</span>,command);</span><br><span class="line">        req.setAttribute(<span class="string">"description"</span>,description);</span><br><span class="line">        <span class="comment">//查询消息列表并传给页面。调用 ListService 的函数，将查询的结果放到 req 中</span></span><br><span class="line">        ListService listService = <span class="keyword">new</span> ListService();</span><br><span class="line">        req.setAttribute(<span class="string">"messageList"</span>,listService.queryMessageList(command,description));</span><br><span class="line">        <span class="comment">//向页面跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.service.ListService;</span><br><span class="line"><span class="keyword">import</span> com.imooc.service.MaintainService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单条删除控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteOneServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//接受页面的值</span></span><br><span class="line">        String id = req.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        MaintainService maintainService = <span class="keyword">new</span> MaintainService();</span><br><span class="line">        <span class="comment">//需要接受的参数为 int 但是判断接受的值是否为空以及转型应该在 Service 中进行</span></span><br><span class="line">        maintainService.deleteOne(id);</span><br><span class="line">        <span class="comment">//向页面跳转 直接跳转到 list.jsp 会使得列表全部消失；列表初始化需要 listServlet 进行一些操作</span></span><br><span class="line">        <span class="comment">//所以应该先跳到 listServlet</span></span><br><span class="line"><span class="comment">//        req.getRequestDispatcher("/WEB-INF/jsp/back/list.jsp").forward(req,resp);</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/List.action"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.service.MaintainService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteBatchServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        MaintainService maintainService = <span class="keyword">new</span> MaintainService();</span><br><span class="line">        String[] ids = req.getParameterValues(<span class="string">"id"</span>);</span><br><span class="line">        maintainService.deleteBatch(ids);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//页面跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/List.action"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;%--使用 jstl--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%--拼接当前网页相对路径--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span>content=<span class="string">"IE=9; IE=8; IE=7; IE=EDGE"</span> /&gt;</span><br><span class="line">&lt;title&gt;内容列表页面&lt;/title&gt;</span><br><span class="line">&lt;link href=<span class="string">"&lt;%=basePath%&gt;/resources/css/all.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;script src="&lt;%=basePath %&gt;/resources/js/common/jquery-1.8.0.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="&lt;%=basePath %&gt;/resources/js/back/list.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      <span class="function">function <span class="title">deleteOne</span><span class="params">(path,id)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(confirm(<span class="string">"确定要删除吗？"</span>))&#123;</span><br><span class="line">              document.getElementById(<span class="string">"id"</span>).value=id;</span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).action = path+<span class="string">"/DeleteOneServlet.action"</span>;</span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).submit();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=<span class="string">"background: #e1e9eb;"</span>&gt;</span><br><span class="line">&lt;%--提交到 ListServlet 上进行初始化与查询--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"&lt;%=basePath%&gt;/List.action"</span> id=<span class="string">"mainForm"</span> method=<span class="string">"post"</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">&lt;div class="current"&gt;当前位置：&lt;a href="javascript:void(0)" style="color:#6E6E6E;"&gt;内容管理&lt;/a&gt; &amp;gt; 内容列表&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"rightCont"</span>&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"g_title fix"</span>&gt;</span><br><span class="line">                        内容列表 </span><br><span class="line">                        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn03"</span> href=<span class="string">"#"</span>&gt;</span><br><span class="line">                        新 增</span><br><span class="line">                        &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn03"</span> href=<span class="string">"javascript:deleteBatch('&lt;%=basePath%&gt;');"</span>&gt;</span><br><span class="line">                        删 除</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                      &lt;/p&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab1"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;指令名称：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"command"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;command&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;描述：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"description"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;description&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">                            &lt;td width="85" align="right"&gt;&lt;input type="submit" class="tabSub" value="查 询" /&gt;&lt;/td&gt;</span><br><span class="line">       &lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"zixun fix"</span>&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab2"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;th&gt;&lt;input type="checkbox" id="all" onclick="#"/&gt;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段1&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段2&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> id=<span class="string">"id"</span> name=<span class="string">"id"</span> /&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;messageList&#125;"</span> var=<span class="string">"message"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;tr &lt;c:if test="$&#123;status.index % 2 != 0&#125;"&gt;style='background-color:#ECF6EE;'&lt;/c:if&gt;&gt;</span><br><span class="line">&lt;%--value 值与下面的 id 表达式相同--%&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="id" value="$&#123;message.id&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;status.index + 1&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.command&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.description&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;%--使用 get 方法提交，不适合隐私信息及中文信息提交--%&gt;</span><br><span class="line">&lt;%--&lt;a href="$&#123;basePath&#125;/DeleteOneServlet.action?id=$&#123;message.id&#125;"&gt;删除&lt;/a&gt;--%&gt;</span><br><span class="line">&lt;%--&lt;a href=<span class="string">"$&#123;basePath&#125;/DeleteOneServlet.action?id=$&#123;message.id&#125;"</span>--%&gt;</span><br><span class="line"> &lt;%--onclick="return confirm('确定要删除这条信息吗？');"&gt;删除&lt;/a&gt;--%&gt;</span><br><span class="line">&lt;a href="#" onclick="deleteOne('$&#123;pageContext.request.contextPath&#125;',$&#123;message.id&#125;)"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'page fix'</span>&gt;</span><br><span class="line">共 &lt;b&gt;4&lt;/b&gt; 条</span><br><span class="line">&lt;a href='###' class='first'&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='pre'&gt;上一页&lt;/a&gt;</span><br><span class="line">当前第&lt;span&gt;1/1&lt;/span&gt;页</span><br><span class="line">&lt;a href='###' class='next'&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='last'&gt;末页&lt;/a&gt;</span><br><span class="line">跳至&amp;nbsp;&lt;input type=<span class="string">'text'</span> value=<span class="string">'1'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'allInput w28'</span> /&gt;&amp;nbsp;页&amp;nbsp;</span><br><span class="line">&lt;a href='###' class='go'&gt;GO&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">程序未报错，但 tomcat 连接后直接停止：</span><br><span class="line"></span><br><span class="line">Connected to the target VM, address: &apos;127.0.0.1:10605&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:10605&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解决方法：把 main 测试函数注释掉，通过 tomcat 发布文件</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      <span class="function">function <span class="title">deleteOne</span><span class="params">(path,id)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(confirm(<span class="string">"确定要删除吗？"</span>))&#123;</span><br><span class="line">              document.getElementById(<span class="string">"id"</span>).value=id;</span><br><span class="line">              <span class="comment">//将路径首字母小写会使函数失效，这里对应的是web.xml 配置的 url     //"/deleteOneServlet.action"</span></span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).action = path+<span class="string">"/DeleteOneServlet.action"</span>;</span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).submit();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2018/07/23/MyBatis/1532700163605.png" title="项目目录1"><img src="/2018/07/23/MyBatis/1532700189052.png" title="项目目录2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">idea 未报错，点击删除，批量删除无效，网页前台控制台报错：</span><br><span class="line">Uncaught ReferenceError: deleteBatch is not defined</span><br><span class="line">    at &lt;anonymous&gt;:1:1</span><br><span class="line">    </span><br><span class="line">解决：DeleteBatchServlet 后忘记加 .action  应将其提交到 web.xml 配置的 url 上</span><br><span class="line">$(&quot;#mainForm&quot;).attr(&quot;action&quot;,basePath+&quot;/DeleteBatchServlet.action&quot;);</span><br><span class="line"></span><br><span class="line">//此处 name = &quot;id&quot; 而不是 id = &quot;id&quot;,而且不加 value 时，checkbox 选中时返回的值是 on</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;id&quot; value=&quot;$&#123;message.id&#125;&quot;/&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">网页报错：</span><br><span class="line">Type Exception Report</span><br><span class="line"></span><br><span class="line">Message For input string: &quot;&quot;</span><br><span class="line"></span><br><span class="line">Description The server encountered an unexpected condition that prevented it from fulfilling the request.</span><br><span class="line"></span><br><span class="line">Exception</span><br><span class="line"></span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;&quot;</span><br><span class="line">java.lang.NumberFormatException.forInputString(Unknown Source)</span><br><span class="line">java.lang.Integer.parseInt(Unknown Source)</span><br><span class="line">java.lang.Integer.valueOf(Unknown Source)</span><br><span class="line">com.imooc.service.MaintainService.deleteBatch(MaintainService.java:41)</span><br><span class="line">com.imooc.servlet.DeleteBatchServlet.doGet(DeleteBatchServlet.java:17)</span><br><span class="line">com.imooc.servlet.DeleteBatchServlet.doPost(DeleteBatchServlet.java:25)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:661)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">Note The full stack trace of the root cause is available in the server logs.</span><br><span class="line"></span><br><span class="line">问题：ids 在接受值时 String[] ids = req.getParameterValues(&quot;id&quot;);</span><br><span class="line">会多出一个 index[0] = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">解决： 在 service 中判断是否为空</span><br><span class="line">if(id!=null &amp;&amp; !&quot;&quot;.equals(id.trim())) &#123;</span><br><span class="line">                idList.add(Integer.valueOf(id));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">点击删除后，页面跳转到 http://localhost:8080/DeleteBatchServlet.action</span><br><span class="line">但是没有删除所选中的几条值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">日志：</span><br><span class="line">2018-07-27 12:54:52,186 [http-nio-8080-exec-3] DEBUG [Message.deleteBatch] - ==&gt;  Preparing: delete from MESSAGE where ID in( ? , ? ) </span><br><span class="line">2018-07-27 12:54:52,187 [http-nio-8080-exec-3] DEBUG [Message.deleteBatch] - ==&gt; Parameters: 5(Integer), 6(Integer)</span><br><span class="line">2018-07-27 12:54:52,188 [http-nio-8080-exec-3] DEBUG [Message.deleteBatch] - &lt;==    Updates: 2</span><br><span class="line">2018-07-27 12:54:52,226 [http-nio-8080-exec-3] DEBUG [Message.queryMessageList] - ==&gt;  Preparing: select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1 </span><br><span class="line">2018-07-27 12:54:52,227 [http-nio-8080-exec-3] DEBUG [Message.queryMessageList] - ==&gt; Parameters: </span><br><span class="line">2018-07-27 12:54:52,229 [http-nio-8080-exec-3] DEBUG [Message.queryMessageList] - &lt;==      Total: 3</span><br><span class="line"></span><br><span class="line">解决：messageDao 中传入的参数类型错误，应该为 List&lt;Integer&gt;ids</span><br><span class="line">public void deleteBatch(List&lt;Integer&gt; ids)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u011439289/article/details/51828978" rel="noopener" target="_blank">idea 导入本地 jar 包源码</a></p><p>log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n  </p><p> %d 日志生成的时间</p><p> %t 是产生日志所处的线程名称</p><p> %p 输出日志的级别，%-5p 将占5位字符，不足5位用空格填补，- 指的是在右边补空</p><p>%c 你输出日志的包以及类的全名</p><p>%m 是你附加的信息 </p><p> %n 换行 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用-mybatis-替代-jdbc&quot;&gt;&lt;a href=&quot;#用-mybatis-替代-jdbc&quot; class=&quot;headerlink&quot; title=&quot;用 mybatis 替代 jdbc&quot;&gt;&lt;/a&gt;用 mybatis 替代 jdbc&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mybatis/mybatis-3/releases&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mybatis 下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://crow-song.github.io/2018/07/25/jdbcToMyBatis/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;jdbc 版跳转此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dao (data access objection 数据访问对象)层需求 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能与数据库交互&lt;/li&gt;
&lt;li&gt;能执行 sql 语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;mybatis ：向 dao 层提供对象 SqlSession&lt;/p&gt;
&lt;p&gt;SqlSession 作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向 sql 语句传入参数&lt;/li&gt;
&lt;li&gt;执行 sql 语句&lt;/li&gt;
&lt;li&gt;获取执行 sql 语句的结果&lt;/li&gt;
&lt;li&gt;事务的控制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何得到 SqlSession：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过配置文件获取数据库连接的相关信息&lt;/li&gt;
&lt;li&gt;通过配置信息构建 SqlSessionFactory&lt;/li&gt;
&lt;li&gt;通过 SqlSessionFactory 打开 数据库会话（SqlSession）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>AnnTest java 注解</title>
    <link href="http://yoursite.com/2018/07/18/AnnTest/"/>
    <id>http://yoursite.com/2018/07/18/AnnTest/</id>
    <published>2018-07-18T03:23:02.000Z</published>
    <updated>2018-08-10T08:35:22.056Z</updated>
    
    <content type="html"><![CDATA[<h4 id="运行机制划分注解"><a href="#运行机制划分注解" class="headerlink" title="运行机制划分注解"></a>运行机制划分注解</h4><ol><li><p>源码注解：只在源码中存在，编译成 .class 文件就不存在了。</p></li><li><p>编译时注解：注解在源码和 .class 文件中都存在</p><p>@Override  @Deprecated  @Suppvisewarning</p><p>@Override ：表示覆写了某一个方法</p><p>@Deprecated ：表示一个方法已经过期，可用 @Suppvisewarning 忽略警告</p></li><li><p>运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解。</p><p>@Autowired</p></li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="comment">//忽略方法中的方法过期警告，也可以放在类外，忽略整个类的过期警告</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">        p.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//提示方法已过期</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元注解RetentionPolicy，表明注解的生命周期：</span><br><span class="line">1、SOURCE：在原文件中有效，被编译器丢弃。 </span><br><span class="line">2、CLASS：在class文件有效，可能会被虚拟机忽略。 </span><br><span class="line">3、RUNTIME：在运行时有效。</span><br></pre></td></tr></table></figure><blockquote><p>  @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。  如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。     注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，     方法并不从它所重载的方法继承annotation。  </p></blockquote><p>@Inherited 对接口没作用，只会继承类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//自定义注解，在 Child 中使用</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Description &#123;</span><br><span class="line">    <span class="function">String  <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"><span class="meta">@Description</span>(<span class="string">"i am class annotation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Description</span>(<span class="string">"i am method annotation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">//只能取到运行时加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PraseAnn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用类加载器加载类</span></span><br><span class="line">            Class c = Class.forName(<span class="string">"com.ann.test.Child"</span>);</span><br><span class="line">            <span class="comment">//找到类上的注解</span></span><br><span class="line">            <span class="keyword">boolean</span> isExist = c.isAnnotationPresent(Description.class);</span><br><span class="line">            <span class="keyword">if</span>(isExist)&#123;</span><br><span class="line">                <span class="comment">//拿到注解实例</span></span><br><span class="line">                Description d = (Description) c.getAnnotation(Description.class);</span><br><span class="line">                System.out.println(d.value());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到方法上的注解</span></span><br><span class="line">            Method[] ms = c.getMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isMExist = m.isAnnotationPresent(Description.class);</span><br><span class="line">                <span class="keyword">if</span>(isMExist)&#123;</span><br><span class="line">                    Description d =  m.getAnnotation(Description.class);</span><br><span class="line">                    System.out.println(d.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//另一种解析方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                Annotation[]as = m.getAnnotations();</span><br><span class="line">                <span class="keyword">for</span> (Annotation a : as) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Description)&#123;</span><br><span class="line">                        Description d = (Description) a;</span><br><span class="line">                        System.out.println(d.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 PraseAnn 输出结果</p><p><code>i am class annotation</code><br><code>i am method annotation</code><br><code>i am method annotation</code></p><p><a href="https://blog.csdn.net/sw5131899/article/details/54947192" rel="noopener" target="_blank">java 注解  Element</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     Column column = field.getAnnotation(Column.class);得到的是字段上注解内容，然后通过</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     String columnName = column.value();得到就是此注解下的字段名，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     <span class="doctag">@Column</span>("id") （好比上面的 column，不过只是比如column是一个注解对象）</span></span><br><span class="line"><span class="comment">     private int id;  （columnName 就得到的是  id  ）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     <span class="doctag">@Table</span>("数据库中的表名")</span></span><br><span class="line"><span class="comment">     <span class="doctag">@Column</span>("数据库中的列名/字段名:id/user_name...")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"user_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"nick_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"city"</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"mobile"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">//作用域：类或接口</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="comment">//生命周期：运行时</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line">    <span class="comment">//使用值只有一个：表名 user</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">//作用域：字段、枚举的常量</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="comment">//生命周期：运行时有效</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Filter f1 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f1.setId(<span class="number">10</span>);<span class="comment">//查询 id 为 10 的用户</span></span><br><span class="line"></span><br><span class="line">        Filter f2 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f2.setUserName(<span class="string">"lucy"</span>);<span class="comment">//查询用户名为 lucy 的用户</span></span><br><span class="line"></span><br><span class="line">        Filter f3 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f3.setEmail(<span class="string">"liu@sina.com,zh@163.com,77777@qq.com"</span>);<span class="comment">//查询邮箱为其中任意一个用户</span></span><br><span class="line"></span><br><span class="line">        String sql1 = query(f1);</span><br><span class="line">        String sql2 = query(f2);</span><br><span class="line">        String sql3 = query(f3);</span><br><span class="line"></span><br><span class="line">        System.out.println(sql1);</span><br><span class="line">        System.out.println(sql2);</span><br><span class="line">        System.out.println(sql3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">query</span><span class="params">(Filter f)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 class</span></span><br><span class="line">        Class c = f.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 table 的名字</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = c.isAnnotationPresent(Table.class);</span><br><span class="line">        <span class="keyword">if</span>(!exists)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Table t = (Table) c.getAnnotation(Table.class);</span><br><span class="line">        String tableName = t.value();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  例如为不定数量的查询条件，我们在后台写查询的时候，</span></span><br><span class="line"><span class="comment">         类似于这样的语句 string sql ="select * from table where"</span></span><br><span class="line"><span class="comment">         为了使语句通顺不报错，加上 where 1=1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sb.append(<span class="string">"select * form"</span>).append(tableName).append(<span class="string">"where 1=1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的字段</span></span><br><span class="line">        Field[] fArray = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fArray) &#123;</span><br><span class="line">            <span class="comment">//处理每个字段对应的 sql</span></span><br><span class="line">            <span class="comment">//拿到字段名</span></span><br><span class="line">            <span class="keyword">boolean</span> fExists = field.isAnnotationPresent(Column.class);</span><br><span class="line">            <span class="keyword">if</span>(!fExists)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Column column = field.getAnnotation(Column.class);</span><br><span class="line">            String columnName = column.value();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿到字段值</span></span><br><span class="line">            String filedName = field.getName();</span><br><span class="line">            String getMethodName = <span class="string">"get"</span> + filedName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+filedName.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//通过反射取得 method</span></span><br><span class="line">            System.out.println(getMethodName);</span><br><span class="line">            Object fieldValue = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method getMethod = c.getMethod(getMethodName);</span><br><span class="line">                fieldValue = getMethod.invoke(f);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//拼装 sql</span></span><br><span class="line">            <span class="keyword">if</span>(fieldValue==<span class="keyword">null</span> ||(fieldValue <span class="keyword">instanceof</span> Integer &amp;&amp; (Integer)fieldValue==<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">" and "</span>).append(filedName);</span><br><span class="line">            <span class="keyword">if</span>(fieldValue <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                sb.append(<span class="string">"="</span>).append(<span class="string">"'"</span>).append(columnName).append(<span class="string">"'"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fieldValue <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                sb.append(<span class="string">"="</span>).append(columnName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;运行机制划分注解&quot;&gt;&lt;a href=&quot;#运行机制划分注解&quot; class=&quot;headerlink&quot; title=&quot;运行机制划分注解&quot;&gt;&lt;/a&gt;运行机制划分注解&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;源码注解：只在源码中存在，编译成 .class 文件就不存在了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译时注解：注解在源码和 .class 文件中都存在&lt;/p&gt;
&lt;p&gt;@Override  @Deprecated  @Suppvisewarning&lt;/p&gt;
&lt;p&gt;@Override ：表示覆写了某一个方法&lt;/p&gt;
&lt;p&gt;@Deprecated ：表示一个方法已经过期，可用 @Suppvisewarning 忽略警告&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解。&lt;/p&gt;
&lt;p&gt;@Autowired&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Annotation" scheme="http://yoursite.com/categories/Annotation/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="imooc" scheme="http://yoursite.com/tags/imooc/"/>
    
  </entry>
  
  <entry>
    <title>Reflection 反射</title>
    <link href="http://yoursite.com/2018/07/17/active-class/"/>
    <id>http://yoursite.com/2018/07/17/active-class/</id>
    <published>2018-07-17T03:51:02.000Z</published>
    <updated>2018-08-10T08:36:25.212Z</updated>
    
    <content type="html"><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>指的是可以于运行时加载,探知和使用编译期间完全未知的类. 程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性; 加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。 不是所有的实例化都是 new ，new 时必须知道这个类是什么，而很多时候做不到预先知道类名，很多框架如 Spring 应用了反射的原理。</p><a id="more"></a><ul><li>new 创建的对象是 <font color="rgb(245," 135,="" 31)="">静态加载类</font>，在编译时就需要加载所有可能用到的类，若在编译时找不到类直接报错。一个功能有问题，其他功能都无法使用。</li></ul><p>class 为类类型/字节码（编译后的类）</p><p>OfficeBetter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OfficeBetter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args [])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态加载类，在运行时加载</span></span><br><span class="line"></span><br><span class="line">Class c = Class.forName(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">OfficeAble oa = (OfficeAble)c.newInstance();</span><br><span class="line"></span><br><span class="line">oa.start();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OfficeAble.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OfficeAble</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建接口，由使用者来实现该接口,重写 start 方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Word.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">OfficeAble</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"word--starts"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>编译 javac *.java</li><li>运行 java OfficeBetter Word (main 类 + 实现接口类)</li><li>输出结果 word–starts</li></ol><h4 id="获取类的信息"><a href="#获取类的信息" class="headerlink" title="获取类的信息"></a>获取类的信息</h4><p>首先要获取类的类类型</p><p><code>Class c1 = int.class;</code>  //int 的类类型</p><p><code>String c2 = String.class</code>  //String 的类类型</p><p><code>void c3 = void.class</code></p><p><code>System.out.println(c1.getName());</code>  //打印包含包名的类的名称</p><p><code>System.out.println(c2.getSimpleName());</code>  //打印不包含包名的类的名称</p><p><code>System.out.println(c3.getName());</code>   //打印结果：void</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintClassMessage</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传递的是哪个子类的对象，c 就是该子类的类类型</span></span><br><span class="line"></span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getMethods() 获取所有 public 的函数，包括父类继承而来的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods() 获取的是该类自己声明的方法，不问访问权限；</span></span><br><span class="line"></span><br><span class="line">        Method [] ms = c.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ms.length; i++)&#123;</span><br><span class="line">        <span class="comment">//得到方法返回值类型的类类型</span></span><br><span class="line">        Class returnType = ms[i].getReturnType();</span><br><span class="line">        System.out.print(returnType.getName()+<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//得到方法的名称</span></span><br><span class="line">        System.out.print(ms[i].getName()+<span class="string">"("</span>);</span><br><span class="line">        <span class="comment">//获取参数类型，得到的是参数列表的类型的类类型</span></span><br><span class="line">        Class [] paramTypes = ms[i].getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class class1:paramTypes)&#123;</span><br><span class="line">            System.out.print(class1.getName()+<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFieldMessage</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        <span class="comment">//成员变量也是对象；</span></span><br><span class="line">        Field[] fs = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">            Class fieldType = field.getType();</span><br><span class="line">            String typeName = fieldType.getName();</span><br><span class="line">            <span class="comment">//得到成员变量名称</span></span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.println(typeName + <span class="string">" "</span> + fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印对象的构造函数信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConMessage</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        <span class="comment">/*构造函数也是对象</span></span><br><span class="line"><span class="comment">        java.lang.Constructor 封装了构造函数的信息</span></span><br><span class="line"><span class="comment">        getConstructors 获取所有的 public 的构造函数</span></span><br><span class="line"><span class="comment">        Constructor []cs = c.getConstructors();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Constructor [] cs = c.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : cs) &#123;</span><br><span class="line">            System.out.print(constructor.getName()+<span class="string">"("</span>);</span><br><span class="line">            <span class="comment">//获取构造函数的参数列表--&gt;得到的是参数列表的类类型</span></span><br><span class="line">            Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class class1 : parameterTypes) &#123;</span><br><span class="line">                System.out.print(class1.getName()+<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//PrintClassMessage 方法测试类</span><br><span class="line">public class ClassDemo3 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s = &quot;hello&quot;;</span><br><span class="line">        ClassUtil.PrintClassMessage(s);</span><br><span class="line"></span><br><span class="line">        Integer n1 = 1;</span><br><span class="line">        ClassUtil.PrintClassMessage(n1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//printieldMessage() 方法测试类</span><br><span class="line">public class ClassDemo4 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClassUtil.printFieldMessage(&quot;hello&quot;);</span><br><span class="line">        System.out.println(&quot;==========&quot;);</span><br><span class="line">        ClassUtil.printFieldMessage(new Integer(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//printConMessage() 方法测试类</span><br><span class="line">public class ClassDemo5 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClassUtil.printConMessage(&quot;hello&quot;);</span><br><span class="line">        ClassUtil.printConMessage(new Integer(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法的反射操作"><a href="#方法的反射操作" class="headerlink" title="方法的反射操作"></a>方法的反射操作</h4><p>method.invoke(对象，参数列表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取print(int a,int b)方法，获取一个方法就是获取类的信息，获取类的信息就要获得类的类类型</span></span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        Class c = a1.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取方法 名称和参数决定</span></span><br><span class="line"><span class="comment">         * getMethod 获取的是 public 的方法</span></span><br><span class="line"><span class="comment">         * getDelcaredMethod 自己声明的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method m = c.getMethod(<span class="string">"print"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line"><span class="comment">//          或 Method m = c.getMethod("pirnt", new Class[]&#123;int.class, int.class&#125;);</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 方法的反射操作</span></span><br><span class="line"><span class="comment">             * a1.print(10,20); 方法的反射操作是用 m 对象来进行方法的调用 和 a1.print 调用效果完全相同</span></span><br><span class="line"><span class="comment">             * 方法没有返回值，则返回 null ，有返回值则返回具体的返回值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            Object o = m.invoke(a1, <span class="keyword">new</span> Object[]&#123;<span class="number">10</span>, <span class="number">20</span>&#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">            <span class="comment">//获取方法对象</span></span><br><span class="line">            Method m1 = c.getMethod(<span class="string">"print"</span>, String.class, String.class);</span><br><span class="line">            <span class="comment">//用方法进行反射操作</span></span><br><span class="line">            o = m1.invoke(a1, <span class="string">"Hello"</span>, <span class="string">"Word"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">            Method m2 = c.getMethod(<span class="string">"print"</span>);</span><br><span class="line">            <span class="comment">//或 Method m1 = c.getMethod("print", new Class[]&#123;&#125;);</span></span><br><span class="line">            m2.invoke(a1);</span><br><span class="line">            <span class="comment">//  或m2.invoke(a1,new Object[]&#123;&#125;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a,String b)</span></span>&#123;</span><br><span class="line">        System.out.println(a.toUpperCase() + <span class="string">","</span> + b.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello Word"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过反射了解泛型本质"><a href="#通过反射了解泛型本质" class="headerlink" title="通过反射了解泛型本质"></a>通过反射了解泛型本质</h4><p>class 为类类型/字节码（编译后的类）</p><p>class/method 等反射操作都是绕过编译的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//泛型，只能放 String 类型；</span></span><br><span class="line">        <span class="comment">//防止加入 list1.add(10); 这种操作</span></span><br><span class="line">        ArrayList&lt;String&gt;list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">"hello"</span>);</span><br><span class="line">        Class c1 = list.getClass();</span><br><span class="line">        Class c2 = list1.getClass();</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 反射的操作都是编译之后的操作（跳过编译阶段）</span></span><br><span class="line"><span class="comment">         * c1 == c2 返回 true 说明编译之后的集合泛型是去泛型化的</span></span><br><span class="line"><span class="comment">         * java 中集合的泛型是防止错误输入，只在编译阶段有效，绕过编译就无效</span></span><br><span class="line"><span class="comment">         * 验证：通过方法反射操作，绕过编译</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Method m = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m = c2.getMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">            m.invoke(list1,<span class="number">10</span>);<span class="comment">//绕过编译操作就绕过了泛型</span></span><br><span class="line">            System.out.println(list1.size());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  for (String string : list1) &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(string);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                此时遍历会发生错误异常，提示不能将 int 转换成 String</span></span><br><span class="line"><span class="comment">             * java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h4&gt;&lt;p&gt;指的是可以于运行时加载,探知和使用编译期间完全未知的类. 程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性; 加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。 不是所有的实例化都是 new ，new 时必须知道这个类是什么，而很多时候做不到预先知道类名，很多框架如 Spring 应用了反射的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="imooc" scheme="http://yoursite.com/tags/imooc/"/>
    
      <category term="reflection" scheme="http://yoursite.com/tags/reflection/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>hexo next 搭建博客</title>
    <link href="http://yoursite.com/2018/07/11/article-title/"/>
    <id>http://yoursite.com/2018/07/11/article-title/</id>
    <published>2018-07-11T15:09:21.000Z</published>
    <updated>2018-08-10T08:27:15.968Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a><a href=" https://www.cnblogs.com/visugar/p/6821777.html" rel="noopener" target="_blank">hexo 安装</a></h4><p>插入图片：</p><p>node_modules：是依赖包<br>public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章<br>themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息</p><hr><p>接下来依次在命令行输入<br>hexo g<br>hexo s</p><img src="/2018/07/11/article-title/hexog.jpg" title="hexo g"><img src="/2018/07/11/article-title/hexos.jpg" title="hexos"><p>在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，<br>看到网页则配置结束</p><hr><h4 id="将Hexo与github-page-联系起来"><a href="#将Hexo与github-page-联系起来" class="headerlink" title="将Hexo与github page 联系起来"></a>将Hexo与github page 联系起来</h4><a id="more"></a><p>设置Git的user name和email：(如果是第一次的话)</p><p><code>git config --global user.name &quot;crow-song&quot;</code><br><code>git config --global user.email &quot;crowsong.end@gmail.com&quot;</code></p><h4 id="设置-ssh-密钥"><a href="#设置-ssh-密钥" class="headerlink" title="设置 ssh 密钥"></a>设置 ssh 密钥</h4><p>参考：<a href="https://blog.csdn.net/love_fdu_llp/article/details/38752365" target="_blank" rel="noopener">https://blog.csdn.net/love_fdu_llp/article/details/38752365</a></p><p><a href="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p><ol><li>检查本机是否有ssh key设置</li></ol><p><code>$ cd ~/.ssh 或cd .ssh</code></p><p>如果没有则提示： No such file or directory</p><p>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm * 删除所有文件)</p><ol start="2"><li><code>ssh-keygen -t rsa -C &quot;crowsong.end@gmail.com&quot;</code>  生成密钥对</li></ol><p>之后全部 enter 就行</p><p>秘钥存放路径为：c:/Users/xxxx_000/.ssh/下 </p><ol start="3"><li>查看你生成的公钥：$ cat ~/.ssh/id_rsa.pub   </li></ol><p>复制公钥到 github 账户的 AccountSettings → SSHKeys → 点击 new SSH Key</p><p>title 随意填写，公钥复制进文本域内 点击确定</p><ol start="4"><li>确认设置</li></ol><p>验证下这个key是不是正常工作。 $ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> # Attempts to ssh to github  键入 yes </p><p>看到： Hi username! You’ve successfully authenticated, but GitHub does not # provide shell access. 就表示设置成功。 </p><p>接下来使用 hexo d 不再需要输入用户和密码了</p><hr><p>配置Deployment<br>同样在_config.yml文件中，找到Deployment，然后按照如下修改：<br>repo 中是仓库地址（自己的 git 发布网址）</p><p>deploy:<br>  type:git<br>  repo:<a href="https://crow-song.github.io/" target="_blank" rel="noopener">https://crow-song.github.io/</a><br>  branch:master</p><hr><h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><p>新建一篇博客，执行下面的命令：</p><p>hexo new post “article title”</p><p>这时候在我的 电脑的目录下 ..\hexo\source\ _posts 将会看到 article title.md 文件</p><p>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>参考：<a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p><h4 id="hexo的next主题个性化教程"><a href="#hexo的next主题个性化教程" class="headerlink" title="hexo的next主题个性化教程"></a><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="nofollw">hexo的next主题个性化教程</a></h4><ul><li><p>Typora md文档多标签样式：</p><blockquote><p>tags: </p><ul><li><p>博客创建</p></li><li><p>hexo</p></li></ul></blockquote></li><li><p>修改 css 样式，找到目标对应 css 文件，修改 background:#transparent （面板透明色）</p><p>rgba(255,255,255,.9) </p></li><li><p><a href=" https://blog.csdn.net/thewindkee/article/details/55086735" rel="noopener" target="_blank">添加网易云音乐插件 </a></p><p>在 mian.xxxx.css 中设置位置   .header-music {margin-top: 55px;margin-left: 0px; } </p></li><li><p><a href="http://www.yzznl.cn/archives/225.html" rel="noopener" target="_blank">nofollw 作用</a></p></li><li><p><a href="https://www.jianshu.com/p/cf0628478a4e " rel="noopener" target="_blank">添加图片</a></p><p>可用样式为 </p><p>图片放在对应 md 文件的文件夹中</p></li><li><p>添加链接： ctrl+k</p></li><li><p>添加背景图：   将括号里面的这里填写背景图片地址替换为你所要显示的背景图片地址，#ffffff表示背景颜色为#ffffff(白色)修改为你想要的背景颜色代码，repeat表示图片平铺，不平铺改为no-repeat，scroll表示图片随对象滚动，图片固定不滚动改为fixed。</p><p> 头像旋转放大： hover 选择器使用 选择鼠标移到链接上的样式 xxx:hover(xxx 可以是 img 也可以是类选择器等。如果直接使用 img:hover 会将插入图片一起放大)     .site-author-image:hover </p></li><li><p><a href="https://blog.csdn.net/ganzhilin520/article/details/79048034" rel="noopener" target="_blank">设置网站图标 Favicon </a></p><p> 设置网站图标时使用 ico 图片会无法正常显示，使用 32*32 png 图片即可</p></li><li><p><a href="https://www.jianshu.com/p/092de536d948" rel="noopener" target="_blank">Typora markdown 语法</a></p></li><li><p><a href="https://www.wesker926.com/2017/09/27/Next%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%A0%87%E7%AD%BE%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2%E5%92%8C%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">设置标签随机大小与颜色</a></p><p> 设置过程中出现 jQuery 报错：Uncaught ReferenceError: $ is not defined</p><p> 可以添加 jQuery 引用 <script src="http://libs.baidu.com/jquery/1.9.0/jquery.js" type="text/javascript"></script></p><p> 网站 debug 通过但部署后报错：(index):1 Mixed Content: The page at ‘<a href="https://crow-song.github.io/tags/&#39;" target="_blank" rel="noopener">https://crow-song.github.io/tags/&#39;</a> was loaded over HTTPS, but requested an insecure script ‘<a href="http://libs.baidu.com/jquery/1.9.0/jquery.js&#39;" target="_blank" rel="noopener">http://libs.baidu.com/jquery/1.9.0/jquery.js&#39;</a>. This request has been blocked; the content must be served over HTTPS.</p><p> 将其 http 改为 https</p></li></ul><hr><blockquote><p>github fork 别人的博客后 404 错误<br><a href="https://github.com/qiubaiying/qiubaiying.github.io/issues/98" target="_blank" rel="noopener">https://github.com/qiubaiying/qiubaiying.github.io/issues/98</a><br>在code下找到CNAME文件，将里面的内容改为：https://你的Github账号名.github.io，然后点底部的commit changes，应该就可以了</p></blockquote><blockquote><p>hexo d 或 hexo deploy 无反应<br>解决: 配置文档中 _config.yml 冒号后需要加空格<br>deploy:<br>type: git<br>repo: <a href="https://github.com/crow-song/crow-song.github.io.git" target="_blank" rel="noopener">https://github.com/crow-song/crow-song.github.io.git</a><br>branch: master</p></blockquote><blockquote><p>hexo g 错误<br>ERROR Process failed: _posts/article-title.md<br>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:<br>md 文档中开头 3 个标题冒号后也需要加空格<br>title: article title<br>date: 2018-07-11 23:09:21<br>tags: 博客创建</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;hexo-安装&quot;&gt;&lt;a href=&quot;#hexo-安装&quot; class=&quot;headerlink&quot; title=&quot;hexo 安装&quot;&gt;&lt;/a&gt;&lt;a href=&quot; https://www.cnblogs.com/visugar/p/6821777.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;hexo 安装&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;插入图片：&lt;/p&gt;

&lt;p&gt;node_modules：是依赖包&lt;br&gt;public：存放的是生成的页面&lt;br&gt;scaffolds：命令生成文章等的模板&lt;br&gt;source：用命令创建的各种文章&lt;br&gt;themes：主题&lt;br&gt;_config.yml：整个博客的配置&lt;br&gt;db.json：source解析所得到的&lt;br&gt;package.json：项目所需模块项目的配置信息&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接下来依次在命令行输入&lt;br&gt;hexo g&lt;br&gt;hexo s&lt;/p&gt;
&lt;img src=&quot;/2018/07/11/article-title/hexog.jpg&quot; title=&quot;hexo g&quot;&gt;
&lt;img src=&quot;/2018/07/11/article-title/hexos.jpg&quot; title=&quot;hexos&quot;&gt;
&lt;p&gt;在浏览器中打开&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:4000/&lt;/a&gt;，&lt;br&gt;看到网页则配置结束&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;将Hexo与github-page-联系起来&quot;&gt;&lt;a href=&quot;#将Hexo与github-page-联系起来&quot; class=&quot;headerlink&quot; title=&quot;将Hexo与github page 联系起来&quot;&gt;&lt;/a&gt;将Hexo与github page 联系起来&lt;/h4&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="博客创建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
