<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crowsongのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-08T09:33:47.036Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>crowsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springBootDDD</title>
    <link href="http://yoursite.com/2019/11/20/springBootDDD/"/>
    <id>http://yoursite.com/2019/11/20/springBootDDD/</id>
    <published>2019-11-20T06:58:09.000Z</published>
    <updated>2020-01-08T09:33:47.036Z</updated>
    
    <content type="html"><![CDATA[<p>springboot 使用mybatis 分层</p><blockquote><p><a href="https://www.cnblogs.com/smfx1314/p/9689824.html" target="_blank" rel="noopener">https://www.cnblogs.com/smfx1314/p/9689824.html</a></p></blockquote><h5 id="DDD-风格分层架构"><a href="#DDD-风格分层架构" class="headerlink" title="DDD 风格分层架构"></a>DDD 风格分层架构</h5><p>遵循基本的分层架构风格。</p><ul><li>User Interface —— 用户接口层。对外提供各种协议形式的服务，并提供Validation参数校验，authenticate权限认证，业务实体组装器Assembler等。图中标绿组件。</li><li>Application —— 应用服务层。组合多个业务实体、基础设施层的各种组件完成业务服务。图中标黄部分。</li><li>Domain —— 业务领域层。DDD概念中的核心业务层，封装所有业务逻辑，包含entity、value object、domain service、domain event等。图中标蓝部分。</li><li>Infrastructure —— 基础设施层。提供公共组件，如：Logging、Trascation、HttpClient等。图中标灰部分。</li></ul><blockquote><p><a href="https://www.cnblogs.com/daoqidelv/p/7499244.html" target="_blank" rel="noopener">https://www.cnblogs.com/daoqidelv/p/7499244.html</a></p></blockquote><a id="more"></a><hr><h5 id="eureka-使用"><a href="#eureka-使用" class="headerlink" title="eureka 使用"></a>eureka 使用</h5><p>服务端：</p><p>idea 使用 springboot Initializr 初始化项目，选择  spring Cloud Discovery -&gt; Eureka Server</p><p>在 Application 注解 @EnableEurekaServer</p><p>application.properties 中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8761</span><br><span class="line">#应用的主机名称</span><br><span class="line">eureka.instance.hostname: localhost</span><br><span class="line">#值为false意味着自身仅作为服务器，不作为客户端</span><br><span class="line">eureka.client.registerWithEureka: false</span><br><span class="line">#值为false意味着无需注册自身</span><br><span class="line">eureka.client.fetchRegistry: false</span><br><span class="line"># 指明了应用的URL</span><br><span class="line">eureka.client.serviceUrl.defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><p>客户端：</p><p>idea 使用 springboot Initializr 初始化项目，选择  spring Cloud Discovery -&gt; Eureka Discovery Client</p><p>在 Application 上注释 @EnableDiscoveryClient</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#注册名</span><br><span class="line">spring.application.name: micro-weather-eureka-client</span><br><span class="line">#服务器地址</span><br><span class="line">eureka.client.service-url.defaultZone: http://localhost:9091/eureka/</span><br></pre></td></tr></table></figure><hr><h5 id="springboot-配合-jpa-多数据源配置"><a href="#springboot-配合-jpa-多数据源配置" class="headerlink" title="springboot 配合 jpa 多数据源配置"></a>springboot 配合 jpa 多数据源配置</h5><p>如果没有 <code>jpaProperties.getHibernateProperties(hibernateSettings);</code> 方法，则可能是 springboot 版本为 2.2 以上，换低版本可解决，如 2.0.3 。如果在 1.x 版本的 springboot 依赖的 hibernate 方法也不一样，getHibernateProperties 方法的参数也有区别</p><blockquote><p>代码参考：<a href="https://github.com/crow-song/SpringBootJpaChangeDB" target="_blank" rel="noopener">https://github.com/crow-song/SpringBootJpaChangeDB</a></p></blockquote><blockquote><p>参考：<a href="https://blog.csdn.net/qq_26440803/article/details/83316743" target="_blank" rel="noopener">https://blog.csdn.net/qq_26440803/article/details/83316743</a></p><p><a href="https://www.jianshu.com/p/c207f53ba63c" target="_blank" rel="noopener">https://www.jianshu.com/p/c207f53ba63c</a></p></blockquote><h5 id="idea-使用-maven-打-jar-包"><a href="#idea-使用-maven-打-jar-包" class="headerlink" title="idea 使用 maven 打 jar 包"></a>idea 使用 maven 打 jar 包</h5><p>有问题可以尝试：以下几个 pom 配置，按需取</p><p><code>&lt;packing&gt;jar&lt;/packing&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;mainClass&gt;com.micro.weather.eureka.client.eureka.EurekaClientApplication&lt;/mainClass&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右边 maven LifeStyle 执行 clean ，package</p><p>在 jar 包上可以直接重命名</p><h5 id="jar-包后台运行"><a href="#jar-包后台运行" class="headerlink" title="jar 包后台运行"></a>jar 包后台运行</h5><p><code>nohup java -jar venues.jar &gt;temp.txt &amp;</code></p><p><code>jobs</code> 查看后台</p><p><code>fg 233</code> fg + 编号将任务调回前台</p><p><code>netstat -nlp |grep :9181</code></p><p>查看某端口占用的线程的pid</p><p><code>netstat -nlp |grep :9181</code></p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_30739519/article/details/51115075" target="_blank" rel="noopener">https://blog.csdn.net/qq_30739519/article/details/51115075</a></p></blockquote><blockquote><p>参考：<a href="https://waylau.com/eureke-server-register-and-server-discovery/" target="_blank" rel="noopener">https://waylau.com/eureke-server-register-and-server-discovery/</a></p></blockquote><hr><h5 id="springboot-yml-profile-不同环境配置"><a href="#springboot-yml-profile-不同环境配置" class="headerlink" title="springboot yml-profile 不同环境配置"></a>springboot yml-profile 不同环境配置</h5><p>如果使用YAML来配置属性，则可以遵循与配置文件相同的命名规范，即创建application-{profile}.yml这样的YAML文件，并将与Profile无关的属性继续放在application.yml里</p><blockquote><p>参考:<a href="https://cloud.tencent.com/developer/article/1079847" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1079847</a></p><p>参考：<a href="https://www.jianshu.com/p/6ac270aac03e" target="_blank" rel="noopener">https://www.jianshu.com/p/6ac270aac03e</a></p></blockquote><hr><h5 id="springboot-多数据源配置-JPA"><a href="#springboot-多数据源配置-JPA" class="headerlink" title="springboot 多数据源配置 JPA"></a>springboot 多数据源配置 JPA</h5><blockquote><p>参考：<a href="https://blog.csdn.net/qq_26440803/article/details/83316743" target="_blank" rel="noopener">https://blog.csdn.net/qq_26440803/article/details/83316743</a></p></blockquote><hr><h5 id="springboot-jpa-ddl-auto-选择"><a href="#springboot-jpa-ddl-auto-选择" class="headerlink" title="springboot jpa ddl-auto 选择"></a>springboot jpa ddl-auto 选择</h5><ul><li>create表示每次应用启动的时候，都会将之前的表全部drop掉，重新根据实体类生成一遍。</li><li>create-drop在create的基础上，在应用关闭的时候还会drop一次。</li><li>update可能是比较常用的，每次启动的时候会看看实体类有什么变化，然后看需不需要更改表结构。</li><li>validate不会对表进行更改，但是会看看他和实体类是否对应</li><li>none什么都不做</li></ul><p>一般在测试时可以使用 create-drop 或 update，生产环境不要使用 ddl-auto</p><blockquote><p>We do it in production albeit with an application that’s not mission critical and with no highly paid DBAs on staff. It’s just one less manual process that’s subject to human error - the application can detect the difference and do the right thing, plus you’ve presumably tested it in various development and test environments.</p><p>One caveat - in a clustered environment you may want to avoid it because multiple apps can come up at the same time and try to modify the schema which could be bad. Or put in some mechanism where only one instance is allowed to update the schema.</p></blockquote><blockquote><p>参考:<a href="https://blog.csdn.net/u012930316/article/details/76718744" target="_blank" rel="noopener">springboot data JPA的spring.jpa.hibernate.ddl-auto 的见解思考</a></p><p><a href="https://stackoverflow.com/questions/221379/hibernate-hbm2ddl-auto-update-in-production" target="_blank" rel="noopener">Hibernate: hbm2ddl.auto=update in production?</a></p></blockquote><hr><h5 id="springbootJPA-返回-DTO-值问题"><a href="#springbootJPA-返回-DTO-值问题" class="headerlink" title="springbootJPA 返回 DTO 值问题"></a>springbootJPA 返回 DTO 值问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaAccountPORepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>,<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"select new com.springboot.jpadata.application.api.response.AccountResponseDTO("</span> +</span><br><span class="line">            <span class="string">"a.id,a.name,a.money) "</span> +</span><br><span class="line">            <span class="string">"from Account a"</span>)</span><br><span class="line">    <span class="function">List&lt;AccountResponseDTO&gt; <span class="title">queryAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是要查询后返回 ResponseDTO 的部分值，需要在 DTO 中创建只包含那几个值的构造函数，</p><p>有 DTO 字段为 null 的情况可以把那几个 null 的字段去掉</p><hr><h5 id="JPA-Query-模糊查询"><a href="#JPA-Query-模糊查询" class="headerlink" title="JPA @Query 模糊查询"></a>JPA @Query 模糊查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT u.username FROM User u WHERE u.username LIKE CONCAT('%',:username,'%')"</span>)</span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">findUsersWithPartOfName</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>出处：<a href="https://stackoverflow.com/questions/21456494/spring-jpa-query-with-like" target="_blank" rel="noopener">https://stackoverflow.com/questions/21456494/spring-jpa-query-with-like</a></p></blockquote><hr><h5 id="springboot-restful-风格"><a href="#springboot-restful-风格" class="headerlink" title="springboot restful 风格"></a>springboot restful 风格</h5><blockquote><p><a href="https://mp.weixin.qq.com/s/XQURTg5we4RqmDzYzouURA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/XQURTg5we4RqmDzYzouURA</a></p></blockquote><hr><h5 id="springboot-整合-mybatis-实现-sql-输出"><a href="#springboot-整合-mybatis-实现-sql-输出" class="headerlink" title="springboot 整合 mybatis 实现 sql 输出"></a>springboot 整合 mybatis 实现 sql 输出</h5><p>在 logback-spring.xml 文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置包打印日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>= <span class="string">"com.jinhaoxun.acapply.dao.applyMapper"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>打印日志级别，为 TRACE 或 DEBUG 就能打印出 sql</p><p>其中 name 可为类名或者一个目录名</p><blockquote><p>参考：<a href="https://www.jianshu.com/p/a7f1a33b9825" target="_blank" rel="noopener">springboot项目配置logback打印日志，并自定义日志级别打印mybatis的sql语句</a></p></blockquote><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-springboot-启动报错-failed-to-load-driver-class"><a href="#Q-springboot-启动报错-failed-to-load-driver-class" class="headerlink" title="Q:springboot 启动报错 failed to load driver class"></a>Q:springboot 启动报错 failed to load driver class</h5><p>A:</p><p><code>failed to load driver class oracle.jdbc.oracledriver in either of hikariConfig class loader or Thread tontext classloader</code></p><p>启动报错，需要在 maven 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc7<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q-springboot-启动报错-Not-a-managed-type"><a href="#Q-springboot-启动报错-Not-a-managed-type" class="headerlink" title="Q:springboot 启动报错 Not a managed type:"></a>Q:springboot 启动报错 Not a managed type:</h5><p>Not a managed type: class com.springboot.jpadata.infrastructure.persistence.po.master.Users</p><p>A：没有注入实体类，看报错的实体类是哪个，加上 @Entiry 或其他对应的注解</p><blockquote><p>参考:<a href="https://blog.csdn.net/u012930316/article/details/76718744" target="_blank" rel="noopener">spring data jpa 出现Not a managed type</a></p></blockquote><hr><h5 id="Q-springbootlogback-出现报错"><a href="#Q-springbootlogback-出现报错" class="headerlink" title="Q:springbootlogback 出现报错"></a>Q:springbootlogback 出现报错</h5><p>A:16:46:33,199 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - openFile(/var/log/opentsdb/opentsdb.log,true) call failed. java.io.FileNotFoundException:</p><p>没有该路径，需要手动创建，或者在 logback-spring.xml 中配置 fileNamePattern</p><hr><h5 id="Q-Unsupported-major-minor-version-52-0"><a href="#Q-Unsupported-major-minor-version-52-0" class="headerlink" title="Q:Unsupported major.minor version 52.0"></a>Q:Unsupported major.minor version 52.0</h5><p>A:</p><p>直译过来意思是：不支持version52.0，其中version 52.0是魔码的其中一个版本，他对应的是jdk1.8</p><p>所以异议过来就是：不支持jdk1.8</p><p>简单来说，就是执行环境的jdk版本 低于 编译的jdk版本</p><p>jar 包编译时使用了 jdk 1.8,但是 linux 上使用的是 1.7 版本导致 java -jar 报错</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_36769100/article/details/78880341" target="_blank" rel="noopener">https://blog.csdn.net/qq_36769100/article/details/78880341</a></p></blockquote><hr><h5 id="Q-springboot-jar-包启动报错端口被占用"><a href="#Q-springboot-jar-包启动报错端口被占用" class="headerlink" title="Q:springboot jar 包启动报错端口被占用"></a>Q:springboot jar 包启动报错端口被占用</h5><p>The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</p><p>A:java -jar demo.jar –server.port=9090</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;springboot 使用mybatis 分层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/smfx1314/p/9689824.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/smfx1314/p/9689824.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;DDD-风格分层架构&quot;&gt;&lt;a href=&quot;#DDD-风格分层架构&quot; class=&quot;headerlink&quot; title=&quot;DDD 风格分层架构&quot;&gt;&lt;/a&gt;DDD 风格分层架构&lt;/h5&gt;&lt;p&gt;遵循基本的分层架构风格。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Interface —— 用户接口层。对外提供各种协议形式的服务，并提供Validation参数校验，authenticate权限认证，业务实体组装器Assembler等。图中标绿组件。&lt;/li&gt;
&lt;li&gt;Application —— 应用服务层。组合多个业务实体、基础设施层的各种组件完成业务服务。图中标黄部分。&lt;/li&gt;
&lt;li&gt;Domain —— 业务领域层。DDD概念中的核心业务层，封装所有业务逻辑，包含entity、value object、domain service、domain event等。图中标蓝部分。&lt;/li&gt;
&lt;li&gt;Infrastructure —— 基础设施层。提供公共组件，如：Logging、Trascation、HttpClient等。图中标灰部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/daoqidelv/p/7499244.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/daoqidelv/p/7499244.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>tenthPower</title>
    <link href="http://yoursite.com/2019/11/01/tenthPower/"/>
    <id>http://yoursite.com/2019/11/01/tenthPower/</id>
    <published>2019-11-01T07:32:12.000Z</published>
    <updated>2020-01-06T07:42:07.222Z</updated>
    
    <content type="html"><![CDATA[<p>创建 js 文件并将 text 文本输入到文件中</p><p><code>echo text&gt;demo.js</code></p><p>创建空文件</p><p><code>type nul&gt;demo.js</code></p><hr><h5 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a;</span><br><span class="line">    <span class="keyword">if</span>(b)&#123;</span><br><span class="line">        a = <span class="string">'abc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>使用 let 如果if 判断为 false 那么就会表示该变量是 undefined 的</p><p>如果使用 var 则不会有这个问题</p><a id="more"></a><hr><h5 id="全局只读变量"><a href="#全局只读变量" class="headerlink" title="全局只读变量"></a>全局只读变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="string">'abc'</span>;</span><br><span class="line">name =<span class="string">'123'</span>;</span><br><span class="line">console.log(name);</span><br></pre></td></tr></table></figure><p>使用 const 定义的值无法再进行赋值，如果赋值会抛出异常</p><hr><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板字符串</span></span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello,"</span>+name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">"卡面来打"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello，<span class="subst">$&#123;name2&#125;</span>come on!`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//换行</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">let</span> name3 = <span class="string">"双打撒声地所多\</span></span><br><span class="line"><span class="string">所发生的发丝东发送\</span></span><br><span class="line"><span class="string">水电费所发生的范德萨"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`打发第三方</span></span><br><span class="line"><span class="string">阿发所发生的</span></span><br><span class="line"><span class="string">大发送方式`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name3+info);</span><br></pre></td></tr></table></figure><hr><h5 id="默认变量定义"><a href="#默认变量定义" class="headerlink" title="默认变量定义"></a>默认变量定义</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num=<span class="number">200</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">test(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>如果 num 没有 test 赋值，则默认值为 200，如果赋值则为赋的值</p><hr><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">add=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">minus = <span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b;</span><br><span class="line"><span class="built_in">console</span>.log(minus(<span class="number">100</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>箭头前为参数，箭头后为函数体，如果函数只有一行可省略大括号</p><hr><h5 id="对象初始化简写方式"><a href="#对象初始化简写方式" class="headerlink" title="对象初始化简写方式"></a>对象初始化简写方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求：创建一个函数，传递两个参数 name 和 age，返回包含 name 和 age 的两个属性的对象</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="comment">// function people(name,age)&#123;</span></span><br><span class="line"><span class="comment">//     return&#123;</span></span><br><span class="line"><span class="comment">//         name:name,</span></span><br><span class="line"><span class="comment">//         age:age</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//#ES6 对象初始化简写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">people</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(people(<span class="string">"abc"</span>,<span class="number">12</span>)));</span><br></pre></td></tr></table></figure><hr><h5 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people=&#123;</span><br><span class="line">    name:<span class="string">'lishunshen'</span>,</span><br><span class="line">    age:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="comment">// const name=people.name;</span></span><br><span class="line"><span class="comment">// const name=people.age;</span></span><br><span class="line"><span class="comment">// console.log(name);</span></span><br><span class="line"><span class="comment">// console.log(age);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 解构</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age&#125; = people;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><hr><h5 id="属性扩展"><a href="#属性扩展" class="headerlink" title="属性扩展"></a>属性扩展</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性扩展</span></span><br><span class="line"><span class="keyword">const</span> color=[<span class="string">'red'</span>,<span class="string">'green'</span>];</span><br><span class="line"><span class="keyword">const</span> colorful=[...color,<span class="string">'yellow'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colorful);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> personnal = &#123;...person,<span class="attr">address</span>:<span class="string">'杭州'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(personnal);</span><br></pre></td></tr></table></figure><hr><h5 id="import-export-babel-插件"><a href="#import-export-babel-插件" class="headerlink" title="import export babel 插件"></a>import export babel 插件</h5><p>ES6 不默认支持 import 与 export，需要导入插件 使用 babel-node demo9 运行</p><p>lib.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn0=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn0...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span>&#123;fn0&#125;</span><br></pre></td></tr></table></figure><p>demo9</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>&#123;fn0&#125; <span class="keyword">from</span> <span class="string">'./lib'</span></span><br><span class="line">fn0();</span><br></pre></td></tr></table></figure><p>.babelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;es2015&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>promise     </p><hr><h4 id="Mock-js"><a href="#Mock-js" class="headerlink" title="Mock.js"></a>Mock.js</h4><h5 id="数据模板定义规范（DTD）"><a href="#数据模板定义规范（DTD）" class="headerlink" title="数据模板定义规范（DTD）"></a>数据模板定义规范（DTD）</h5><p>demo1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">'name'</span>:<span class="string">'测试'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo2</p><p>竖线分隔符，重复生成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'测试'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"list"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,       </span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,       </span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>竖线后数字表示重复几次</p><p>demo3</p><p>竖线后可以跟 x-y 表示重复后面的字符串随机 x 次到 y 次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-4'</span>:<span class="string">'测试'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo4</p><p>竖线后 +1 表示属性值自增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|1-8'</span>:<span class="string">'テスト'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'233'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(data,<span class="literal">null</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>id 会从 1 一直自增下去</p><p>demo5</p><p>竖线后的数字表示随机生成 x - y 中的其中一个数字，冒号后数字 0 不能带引号，如果带引号则会生成随机 x - y 个 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-3'</span>:<span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'point|122-500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000-8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money2|1000-5000.2-4'</span>:<span class="number">0</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo6</p><p>随机生成 x - y 的带有 2 个小数位的随机数，. 的后面可以为 x - y 的格式，表示随机生成 x -y 位的小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-3'</span>:<span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'point|122-500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000-8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'status|1'</span>:<span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo7</p><p>竖线后为 1，随机生成 true 或 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5-10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-3'</span>:<span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'point|122-500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000-8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'status|1'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'default|1-3'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'detail|2-3'</span>:&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'date'</span>:<span class="string">'2019-12-25'</span>,<span class="string">'content'</span>:<span class="string">'merry christmas'</span>&#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>竖线后为 x - y ，表示 true 出现次数为 x/x+y ，false 出现次数较多</p><p>detail|2-3 表示随机取出对象中属性 2 - 3个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5‐10'</span>: [&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2‐3'</span>:<span class="string">'测试'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'point|122‐500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000‐8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'status|1'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'default|1‐3'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'detail|2‐3'</span>:&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'date'</span>:<span class="string">'2005‐01‐01'</span>,<span class="string">'content'</span>:<span class="string">'记录'</span>&#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h5 id="数据占位符定义规范（DPO）"><a href="#数据占位符定义规范（DPO）" class="headerlink" title="数据占位符定义规范（DPO）"></a>数据占位符定义规范（DPO）</h5><p>基本方法</p><p>随机生成字符串，数字，日期跟图片地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'@string'</span>,</span><br><span class="line">        <span class="string">'point'</span>:<span class="string">'@integer'</span>,</span><br><span class="line">        <span class="string">'birthday'</span>:<span class="string">'@date'</span>,</span><br><span class="line">        <span class="string">'pic'</span>:<span class="string">'@image'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>文本方法</p><p>随机生成中文名，中文姓氏，英文名，标题，汉字（个数）个数可以为（x-y）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cname：中文名</span></span><br><span class="line"><span class="comment">//cfirst：中文姓氏</span></span><br><span class="line"><span class="comment">//Last：英文名</span></span><br><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'@cname'</span>,</span><br><span class="line">        <span class="string">'ename'</span>:<span class="string">'@last'</span>,</span><br><span class="line">        <span class="string">'cfirst'</span>:<span class="string">'@cfirst'</span>,</span><br><span class="line">        <span class="string">'point'</span>:<span class="string">'@integer'</span>,</span><br><span class="line">        <span class="string">'birthday'</span>:<span class="string">'@date'</span>,</span><br><span class="line">        <span class="string">'pic'</span>:<span class="string">'@image'</span>,</span><br><span class="line">        <span class="string">'title'</span>:<span class="string">'@title'</span>,</span><br><span class="line">        <span class="string">'content'</span>:<span class="string">'@cword(100)'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>网络方法</p><p>@region 生成地区，@county 生成区县</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成 url ip email 等信息</span></span><br><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">"mockjs"</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'@cname'</span>,</span><br><span class="line">        <span class="string">'ename'</span>:<span class="string">'@last'</span>,</span><br><span class="line">        <span class="string">'cfirst'</span>:<span class="string">'@first'</span>,</span><br><span class="line">        <span class="string">'point'</span>:<span class="string">'@integer'</span>,</span><br><span class="line">        <span class="string">'bithday'</span>:<span class="string">'@date'</span>,</span><br><span class="line">        <span class="string">'pic'</span>:<span class="string">'@image'</span>,</span><br><span class="line">        <span class="string">'title'</span>:<span class="string">'@title'</span>,</span><br><span class="line">        <span class="string">'content'</span>:<span class="string">'@cword(100)'</span>,</span><br><span class="line">        <span class="string">'url'</span>:<span class="string">'@url'</span>,</span><br><span class="line">        <span class="string">'ip'</span>:<span class="string">'@ip'</span>,</span><br><span class="line">        <span class="string">'email'</span>:<span class="string">'@email'</span>,</span><br><span class="line">        <span class="string">'area'</span>:<span class="string">'@region'</span>,</span><br><span class="line">        <span class="string">'address'</span>:<span class="string">'@county(true)'</span>,</span><br><span class="line">        <span class="string">'region'</span>:<span class="string">'@region'</span>,</span><br><span class="line">        <span class="string">'county'</span>:<span class="string">"@county"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><hr><h4 id="本地安装easyMock"><a href="#本地安装easyMock" class="headerlink" title="本地安装easyMock"></a>本地安装easyMock</h4><p>使用 centos7 显示</p><p>VMware Workstation 与 Device/Credential Guard</p><p>一条命令搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p>重启电脑后即可</p><p>如果想重新开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><blockquote><p>出处：<a href="https://www.zhihu.com/question/64511903" target="_blank" rel="noopener">https://www.zhihu.com/question/64511903</a></p></blockquote><p>虚拟机跟 docker 不兼容问题</p><p>当你想用VM的时候<br>关闭HPV；<br>使用管理员powshell输入命令：bcdedit /set hypervisorlaunchtype off<br>重启<br>具体参考VM兼容问题<br>当你想用docker的时候<br>打开HPV<br>使用管理员powshell输入命令：bcdedit /set hypervisorlaunchtype auto<br>重启<br>具体参考：docker兼容问题</p><blockquote><p>出处：<a href="https://blog.csdn.net/rusi__/article/details/103672866" target="_blank" rel="noopener">https://blog.csdn.net/rusi__/article/details/103672866</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建 js 文件并将 text 文本输入到文件中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo text&amp;gt;demo.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建空文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;type nul&amp;gt;demo.js&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;全局变量与局部变量&quot;&gt;&lt;a href=&quot;#全局变量与局部变量&quot; class=&quot;headerlink&quot; title=&quot;全局变量与局部变量&quot;&gt;&lt;/a&gt;全局变量与局部变量&lt;/h5&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 let 如果if 判断为 false 那么就会表示该变量是 undefined 的&lt;/p&gt;
&lt;p&gt;如果使用 var 则不会有这个问题&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="springboot" scheme="http://yoursite.com/categories/java/springboot/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>gitUse</title>
    <link href="http://yoursite.com/2019/11/01/gitUse/"/>
    <id>http://yoursite.com/2019/11/01/gitUse/</id>
    <published>2019-11-01T02:11:22.000Z</published>
    <updated>2020-01-08T07:28:54.220Z</updated>
    
    <content type="html"><![CDATA[<p>git 命令</p><ul><li>下载仓库文件到本地</li></ul><p><code>git clone http://xxx.git</code></p><ul><li><p>下载分支代码到本地仓库</p><p><code>git clone -b feature/EDW-xxx http://xxx.git</code></p></li><li><p>查看本地目录对应远程仓库地址</p></li></ul><p>在本地 git 目录下</p><p><code>git remote -v</code></p><a id="more"></a><p>查看当前本地分支：<code>git branch</code></p><p>查看远程分支：<code>git branch -a</code></p><p>切换本地分支到 feature/xxx：<code>git checkout -b /feature/xxx origin/feature/xxx</code></p><p>切换回 master 分支：<code>git checkout master</code></p><p><code>git add 文件</code></p><p><code>git add 文件夹/</code></p><p><code>git commit -m &quot;提交信息&quot;</code></p><p>查看状态：<code>git status</code></p><p><code>git pull</code></p><p><code>git push 远程分支</code></p><hr><p>使用步骤：</p><p>clone 代码到本地：<code>git clone http://xxx.git</code></p><p>查看本地代码分支：<code>git branch</code></p><p>查看远程代码分支：<code>git branch -a</code></p><p>切换本地分支到远程分支一样的分支下：<code>git checkout -b /feature/xxx origin/freture/xxx</code></p><p>修改该分支代码</p><p>进行 add 修改过想提交的代码：<code>git add src/</code> 可以添加一个或多个文件，也可以添加一个目录</p><p>commit 代码并添加提交信息：<code>git commit -m &quot;message&quot;</code> </p><p>查看提交状态：<code>git status</code></p><p>push 到远程仓库：<code>git push -u origin/feature/xxx</code></p><hr><h4 id="Q-amp-A："><a href="#Q-amp-A：" class="headerlink" title="Q&amp;A："></a>Q&amp;A：</h4><h5 id="Q-git-push-error-java-home-not-found-in-your-environment"><a href="#Q-git-push-error-java-home-not-found-in-your-environment" class="headerlink" title="Q: git push error:java_home not found in your environment"></a>Q: git push error:java_home not found in your environment</h5><p>Please set the JAVA_HOME variable in your environment to match the location of your Java instalation.</p><p>mMake sure successfully execute command: ./mvnw.cmd clean test.error: failed to push some refs to ‘<a href="http://url.git&#39;" target="_blank" rel="noopener">http://url.git&#39;</a></p><p>git did not exit cleanly (exit code 1) (2765 ms @2019/12/17 8:59:28)</p><p>git 提交显示没有 java_home,但是在 git bash 和 cmd 下使用 java -version 都显示一样的 java 版本和目录</p><p>A:</p><p>如果是安装版的 jdk，需要手动配置 JAVA_HOME ，git push 会使用 maven 编译，导致找不到 jdk 等路径不然会 git push</p><blockquote><p>参考：<a href="https://stackoverflow.com/questions/17315425/error-in-setting-java-home" target="_blank" rel="noopener">Error in setting JAVA_HOME</a></p></blockquote><hr><h5 id="Q-git-push-error"><a href="#Q-git-push-error" class="headerlink" title="Q:git push error:"></a>Q:git push error:</h5><p>Non-resolvable parent POM for com.xxx:1.0.0: Could not find artifact com.xxx:xxx-starter-parent:pom:2.0.3-SNAPSHOT and ‘parent.relativePath’ points at no local POM @line13,column 10-&gt;[Help 2]</p><p>some problems were encountered while processing the poms</p><p>A：git push 时一直报找不到父工程的 pom 文件，然而本地idea maven install 正常</p><p>尝试了很多网上说的使用 relativePath 来配置父 pom 文件路径，但是我这个问题比较特殊。</p><p>在 git push 时会使用 maven 进行编译，而且默认找的是 User/.m2 下的 setting.xml 配置文件，默认仓库也是 ./m2 下那个，如果该仓库下没有对应的 setting.xml 和 仓库会报该错误。</p><p>因为我的 idea 中手动设置了新的地址放置 setting.xml 跟 repository 仓库，在 idea 编译 maven 时不会出现问题，如果在 git push 会报错</p><p>默认值为../pom.xml</p><p>查找顺序：relativePath元素中的地址–本地仓库–远程仓库</p><p>设定一个空值将始终从仓库中获取，不从本地路径获取。</p><blockquote><p>参考：<a href="https://blog.csdn.net/jiangyu1013/article/details/94319284" target="_blank" rel="noopener">maven 工程 pom.xml 中 relativePath 的作用</a></p></blockquote><hr><h5 id="git-本地删除文件后远程没删除"><a href="#git-本地删除文件后远程没删除" class="headerlink" title="git 本地删除文件后远程没删除"></a>git 本地删除文件后远程没删除</h5><p>在本地打开 git bash ，使用 <code>git status</code> 查看红色的文件，这些是修改了未 add 的文件，使用 <code>git add 文件或文件夹夹/</code> ，然后使用 <code>git commit -m &quot;message&quot;</code> ,<code>git push</code></p><p>提交后即可</p><blockquote><p>参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载仓库文件到本地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git clone http://xxx.git&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载分支代码到本地仓库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone -b feature/EDW-xxx http://xxx.git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看本地目录对应远程仓库地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本地 git 目录下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>springBootHM</title>
    <link href="http://yoursite.com/2019/10/21/springBootHM/"/>
    <id>http://yoursite.com/2019/10/21/springBootHM/</id>
    <published>2019-10-21T07:12:05.000Z</published>
    <updated>2019-11-01T07:26:09.397Z</updated>
    
    <content type="html"><![CDATA[<p>@SpringBootApplication</p><ul><li><p>@EnableAutoConfiguration</p></li><li><p>@SpringBootConfiguration</p></li><li>@ComponentScan</li></ul><p>包含三个注解，ComponentScan 能查找当前 Application 包下所有文件</p><a id="more"></a><p>@EnableAutoConfiguration</p><p>@Import({AutoConfigurationImportSelector.class})</p><p>org.springframework.boot.autoconfigure.AutoConfigurationImportSelector</p><p>AutoConfigurationImportSelector 类中的<br>getCandidateConfigurations() 方法中</p><p>该方法中打印的就是当前包下的 META-INF/spring.factories</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br></pre></td></tr></table></figure><p>查找 spring.factories 中的一个配置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br></pre></td></tr></table></figure><p>查找 ServletWebServerFactoryAutoConfiguration 类，在该类上的一个注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableConfigurationProperties(&#123;ServerProperties.class&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">erverProperties.class</span><br><span class="line">prefix = &quot;server&quot;,</span><br></pre></td></tr></table></figure><p>下有许多内置的属性<br><code>private Integer port;</code><br>通过配置文件加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/org/springframework/boot/spring-boot-autoconfigure/2.2.0.RELEASE/spring-boot-autoconfigure-2.2.0.RELEASE.jar!/META-INF/spring-configuration-metadata.json</span><br></pre></td></tr></table></figure><p>json<br>中其中一个配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"server.port"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"java.lang.Integer"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Server HTTP port."</span>,</span><br><span class="line">      <span class="attr">"sourceType"</span>: <span class="string">"org.springframework.boot.autoconfigure.web.ServerProperties"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="number">8080</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>能在 application.properties  等配置文件中进行覆写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=12222</span><br><span class="line">server.servlet.context-path=/demo</span><br></pre></td></tr></table></figure><p>yml 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">12345</span></span><br><span class="line"></span><br><span class="line"><span class="attr">city:</span> <span class="string">beijing</span></span><br><span class="line"><span class="comment">#city:</span></span><br><span class="line"><span class="comment">#  - beijing</span></span><br><span class="line"><span class="comment">#  - shanghai</span></span><br><span class="line"><span class="comment">#  - zhejiang</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#city: [nanjing,tianjin]</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">rufui</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">  addr:</span> <span class="string">beijing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置数据、集合（对象数据）</span></span><br><span class="line"><span class="attr">students:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    addr:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">tom</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    addr:</span> <span class="string">nanjing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置行内集合对象</span></span><br><span class="line"><span class="comment">#students: [&#123;name: luck,age: 19,addr: zhejiang&#125;,&#123;name: mike,age: 22,addr: tianjin&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">map:</span></span><br><span class="line"><span class="attr">  key1:</span> <span class="string">value1</span></span><br><span class="line"><span class="attr">  key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure><hr><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h4 id="springboot-整合-junit-测试-java-lang-Exception-No-runnable-methods"><a href="#springboot-整合-junit-测试-java-lang-Exception-No-runnable-methods" class="headerlink" title="springboot 整合 junit 测试 java.lang.Exception: No runnable methods"></a>springboot 整合 junit 测试 java.lang.Exception: No runnable methods</h4><blockquote><p>没有可运行的方法</p><p>因为没有在测试类中的对应方法上面加 @Test 注解</p></blockquote><p>经过查看因为在测试类中加入的 @Test 方法是 org.junit.jupiter.api 的 Test 注释，把错误的包删掉，重新导入 org.junit.Test 的包</p><blockquote><p>参考：<a href="https://www.cnblogs.com/libra0920/p/6228838.html" target="_blank" rel="noopener">https://www.cnblogs.com/libra0920/p/6228838.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@SpringBootApplication&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@EnableAutoConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@SpringBootConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;@ComponentScan&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包含三个注解，ComponentScan 能查找当前 Application 包下所有文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>thinkingInJava</title>
    <link href="http://yoursite.com/2019/09/11/thinkingInJava/"/>
    <id>http://yoursite.com/2019/09/11/thinkingInJava/</id>
    <published>2019-09-11T06:49:56.000Z</published>
    <updated>2019-11-01T07:26:35.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-抽象的进步"><a href="#1-1-抽象的进步" class="headerlink" title="1.1 抽象的进步"></a>1.1 抽象的进步</h2><p>在面向对象的程序设计中，尽管我们真正要做的是新建各种各样的数据“类型”（Type），但几乎所有面向对象的程序设计语言都采用了“class”关键字。当您看到“type”这个字的时候，请同时想到“class”；反之亦然。</p><a id="more"></a><h2 id="1-2-对象的接口"><a href="#1-2-对象的接口" class="headerlink" title="1.2 对象的接口"></a>1.2 对象的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Light lt = <span class="keyword">new</span> Light();</span><br><span class="line">lt.on();</span><br></pre></td></tr></table></figure><p>在这个例子中，类型／类的名称是Light，可向Light对象发出的请求包括包括打开（on）、关闭（off）、变得更明亮（brighten）或者变得更暗淡（dim）。通过简单地声明一个名字（lt），我们为Light对象创建了一个“句柄”。然后用new关键字新建类型为Light的一个对象。再用等号将其赋给句柄。为了向对象发送一条消息，我们列出句柄名（lt），再用一个句点符号（.）把它同消息名称（on）连接起来。从中可以看出，使用一些预先定义好的类时，我们在程序里采用的代码是非常简单和直观的。</p><h2 id="1-3-实现方案的隐藏"><a href="#1-3-实现方案的隐藏" class="headerlink" title="1.3 实现方案的隐藏"></a>1.3 实现方案的隐藏</h2><p>Java采用三个显式（明确）关键字以及一个隐式（暗示）关键字来设置类边界：public，private，protected以及暗示性的friendly。若未明确指定其他关键字，则默认为后者。这些关键字的使用和含义都是相当直观的，它们决定了谁能使用后续的定义内容。“public”（公共）意味着后续的定义任何人均可使用。而在另一方面，“private”（私有）意味着除您自己、类型的创建者以及那个类型的内部函数成员，其他任何人都不能访问后续的定义信息。private在您与客户程序员之间竖起了一堵墙。若有人试图访问私有成员，就会得到一个编译期错误。“friendly”（友好的）涉及“包装”或“封装”（Package）的概念——即Java用来构建库的方法。若某样东西是“友好的”，意味着它只能在这个包装的范围内使用（所以这一访问级别有时也叫作“包装访问”）。“protected”（受保护的）与“private”相似，只是一个继承的类可访问受保护的成员，但不能访问私有成员。</p><h2 id="1-4-方案的重复使用"><a href="#1-4-方案的重复使用" class="headerlink" title="1.4 方案的重复使用"></a>1.4 方案的重复使用</h2><p>为重复使用一个类，最简单的办法是仅直接使用那个类的对象。但同时也能将那个类的一个对象置入一个新类。我们把这叫作“创建一个成员对象”。新类可由任意数量和类型的其他对象构成。无论如何，只要新类达到了设计要求即可。这个概念叫作“组织”——在现有类的基础上组织一个新类。有时，我们也将组织称作“包含”关系，比如“一辆车包含了一个变速箱”。</p><p>对象的组织具有极大的灵活性。新类的“成员对象”通常设为“私有”（Private），使用这个类的客户程序员不能访问它们。这样一来，我们可在不干扰客户代码的前提下，从容地修改那些成员。也可以在“运行期”更改成员，这进一步增大了灵活性。后面要讲到的“继承”并不具备这种灵活性，因为编译器必须对通过继承创建的类加以限制。</p><p>由于继承的重要性，所以在面向对象的程序设计中，它经常被重点强调。作为新加入这一领域的程序员，或许早已先入为主地认为“继承应当随处可见”。沿这种思路产生的设计将是非常笨拙的，会大大增加程序的复杂程度。相反，新建类的时候，首先应考虑“组织”对象；这样做显得更加简单和灵活。利用对象的组织，我们的设计可保持清爽。一旦需要用到继承，就会明显意识到这一点。</p><h2 id="1-5-继承：重新使用接口"><a href="#1-5-继承：重新使用接口" class="headerlink" title="1.5 继承：重新使用接口"></a>1.5 继承：重新使用接口</h2><p>但在许多时候，我们必须为衍生类型加入新的接口元素。所以不仅扩展了接口，也创建了一种新类型。这种新类型仍可替换成基础类型，但这种替换并不是完美的，因为不可在基础类里访问新函数。我们将其称作“类似”关系；新类型拥有旧类型的接口，但也包含了其他函数，所以不能说它们是完全等价的。举个例子来说，让我们考虑一下制冷机的情况。假定我们的房间连好了用于制冷的各种控制器；也就是说，我们已拥有必要的“接口”来控制制冷。现在假设机器出了故障，我们把它换成一台新型的冷、热两用空调，冬天和夏天均可使用。冷、热空调“类似”制冷机，但能做更多的事情。由于我们的房间只安装了控制制冷的设备，所以它们只限于同新机器的制冷部分打交道。新机器的接口已得到了扩展，但现有的系统并不知道除原始接口以外的任何东西。</p><h2 id="1-6-多形对象的互换使用"><a href="#1-6-多形对象的互换使用" class="headerlink" title="1.6 多形对象的互换使用"></a>1.6 多形对象的互换使用</h2><p>设计程序时，我们经常都希望基础类只为自己的衍生类提供一个接口。也就是说，我们不想其他任何人实际创建基础类的一个对象，只对上溯造型成它，以便使用它们的接口。为达到这个目的，需要把那个类变成“抽象”的——使用abstract关键字。若有人试图创建抽象类的一个对象，编译器就会阻止他们。这种工具可有效强制实行一种特殊的设计。</p><p>亦可用abstract关键字描述一个尚未实现的方法——作为一个“根”使用，指出：“这是适用于从这个类继承的所有类型的一个接口函数，但目前尚没有对它进行任何形式的实现。”抽象方法也许只能在一个抽象类里创建。继承了一个类后，那个方法就必须实现，否则继承的类也会变成“抽象”类。通过创建一个抽象方法，我们可以将一个方法置入接口中，不必再为那个方法提供可能毫无意义的主体代码。</p><p>interface（接口）关键字将抽象类的概念更延伸了一步，它完全禁止了所有的函数定义。“接口”是一种相当有效和常用的工具。另外如果自己愿意，亦可将多个接口都合并到一起（不能从多个普通class或abstract class中继承）。</p><h2 id="1-7-对象的创建和存在时间"><a href="#1-7-对象的创建和存在时间" class="headerlink" title="1.7 对象的创建和存在时间"></a>1.7 对象的创建和存在时间</h2><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>在程序设计中，句柄是Windows操作系统用来标识被应用程序所创建或使用的对象的整数。其本质相当于带有引用计数的智能指针。当一个应用程序要引用其他系统所管理的内存块或对象时，可以使用句柄</p><p>第二个方法是在一个内存池中动态创建对象，该内存池亦叫“堆”或者“内存堆”。若采用这种方式，除非进入运行期，否则根本不知道到底需要多少个对象，也不知道它们的存在时间有多长，以及准确的类型是什么。这些参数都在程序正式运行时才决定的。若需一个新对象，只需在需要它的时候在内存堆里简单地创建它即可。由于存储空间的管理是运行期间动态进行的，所以在内存堆里分配存储空间的时间比在堆栈里创建的时间长得多（在堆栈里创建存储空间一般只需要一个简单的指令，将堆栈指针向下或向下移动即可）。由于动态创建方法使对象本来就倾向于复杂，所以查找存储空间以及释放它所需的额外开销不会为对象的创建造成明显的影响。除此以外，更大的灵活性对于常规编程问题的解决是至关重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-抽象的进步&quot;&gt;&lt;a href=&quot;#1-1-抽象的进步&quot; class=&quot;headerlink&quot; title=&quot;1.1 抽象的进步&quot;&gt;&lt;/a&gt;1.1 抽象的进步&lt;/h2&gt;&lt;p&gt;在面向对象的程序设计中，尽管我们真正要做的是新建各种各样的数据“类型”（Type），但几乎所有面向对象的程序设计语言都采用了“class”关键字。当您看到“type”这个字的时候，请同时想到“class”；反之亦然。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springBoot-features3</title>
    <link href="http://yoursite.com/2019/09/04/springBoot-features3/"/>
    <id>http://yoursite.com/2019/09/04/springBoot-features3/</id>
    <published>2019-09-04T15:53:44.000Z</published>
    <updated>2019-09-05T09:23:22.746Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/09/04/springBoot-features3/1567612536802.png" title="官方文档"><p>除REST Web服务外，您还可以使用Spring WebFlux来提供动态HTML内容。Spring WebFlux支持各种模板技术，包括<code>Thymeleaf</code>，<code>FreeMarker</code>和<code>Mustache</code>。</p><p>当您使用其中一个模板引擎和默认配置时，您的模板将自动从 <code>src/main/resources/templates</code> 中获取。</p><a id="more"></a><h2 id="1-1-创建-model"><a href="#1-1-创建-model" class="headerlink" title="1.1 创建 model"></a>1.1 创建 model</h2><img src="/2019/09/04/springBoot-features3/1567612981120.png" title="bean"><h2 id="1-2-创建-repository-接口和实现类"><a href="#1-2-创建-repository-接口和实现类" class="headerlink" title="1.2 创建 repository 接口和实现类"></a>1.2 创建 repository 接口和实现类</h2><img src="/2019/09/04/springBoot-features3/1567613444181.png" title="repository"><p>在 repository 中返回一个 Flux 对象</p><img src="/2019/09/04/springBoot-features3/1567613501388.png" title="repositoryImpl"><h2 id="1-3-创建-Controller-类"><a href="#1-3-创建-Controller-类" class="headerlink" title="1.3 创建 Controller 类"></a>1.3 创建 Controller 类</h2><img src="/2019/09/04/springBoot-features3/1567613872007.png" title="controller"><h2 id="1-4-创建-index-html-页面"><a href="#1-4-创建-index-html-页面" class="headerlink" title="1.4 创建 index.html 页面"></a>1.4 创建 index.html 页面</h2><img src="/2019/09/04/springBoot-features3/1567613993754.png" title="index"><p>页面引入的 css </p><img src="/2019/09/04/springBoot-features3/1567614086090.png" title="css"><h2 id="1-5-页面展示"><a href="#1-5-页面展示" class="headerlink" title="1.5 页面展示"></a>1.5 页面展示</h2><p>访问 localhost:8080</p><p>数据以流式传输，并且以每隔两秒的反应方式显示</p><img src="/2019/09/04/springBoot-features3/1567614165548.png" title="page1"><img src="/2019/09/04/springBoot-features3/1567614237815.png" title="page2"><img src="/2019/09/04/springBoot-features3/1567614267519.png" title="page3"><img src="/2019/09/04/springBoot-features3/testToGIF.gif" title="demo">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/09/04/springBoot-features3/1567612536802.png&quot; title=&quot;官方文档&quot;&gt;
&lt;p&gt;除REST Web服务外，您还可以使用Spring WebFlux来提供动态HTML内容。Spring WebFlux支持各种模板技术，包括&lt;code&gt;Thymeleaf&lt;/code&gt;，&lt;code&gt;FreeMarker&lt;/code&gt;和&lt;code&gt;Mustache&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当您使用其中一个模板引擎和默认配置时，您的模板将自动从 &lt;code&gt;src/main/resources/templates&lt;/code&gt; 中获取。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
      <category term="springMVC" scheme="http://yoursite.com/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>lambda</title>
    <link href="http://yoursite.com/2019/08/08/lambda/"/>
    <id>http://yoursite.com/2019/08/08/lambda/</id>
    <published>2019-08-08T14:07:58.000Z</published>
    <updated>2019-09-05T06:16:39.657Z</updated>
    
    <content type="html"><![CDATA[<p>hashMap 中存储的是 entry，既索引和值的方式，用索引的方式进行查找内部的值。</p><p>如果插入一个新的值，没有索引的方式下，如果内部有 100W 值，需要进行 100W 次比较，但是 hashMap 使用 hashCode 将需要插入的值计算成索引的方式，去找索引位置有无该索引可以进行判断该对象是否存在，如果没有就可以直接将该值插入到此处。</p><p>如果索引处有值存在，那么用 equals 进行判断，两个值是否相同，如果相同就覆盖原来的值</p><p>如果不相同就会碰撞，形成一个链表，将新的值放链表头（1.7）或链表尾（1.8），如果再有相同索引的值进来，就要跟链表中所有值进行 equals，会降低效率</p><p>为了尽可能降低链表长度，如果容量达到原来 hashMap 的 75% 时，hashMap 会自动进行扩容（resize），将链表中所有元素重新运算，放到扩容完的 hashMap 的中</p><p>java1.8 中如果链表长度大于 8 ，那么就会将其转化为红黑树（提升除了添加以外所有操作效率）</p><p>concurrenthashMap 也是 java8 开始转为红黑树</p><p>java8 中将方法区从永久区转移到元空间 MetaSpace，使用物理内存，因为内存变大了，所以垃圾回收机制运行的概率下降了</p><a id="more"></a><hr><p>lambda 表达式</p><h5 id="无参无返回值"><a href="#无参无返回值" class="headerlink" title="无参无返回值"></a>无参无返回值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testLambda1</span></span>&#123;</span><br><span class="line">    <span class="comment">//通常实现 run 方法</span></span><br><span class="line">Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r.run();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line">    Runnable r1 = ()-&gt;System.out.println(<span class="string">"hello World"</span>);</span><br><span class="line">    r1.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式接口：如果一个接口中只有一个方法，那么这个接口就是函数式接口</p><p>@FunctionanlInterface 声明为函数式接口，如果有多个方法则无法通过</p><p>定义一个函数式接口，调用接口方法进行乘法操作（也可以定义其他加减法等函数）,输出结果为10000，2533</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">operation</span><span class="params">(Integer num,MyFun mf)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mf.getValue(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer i = operation(<span class="number">100</span>,(x)-&gt;x*x);</span><br><span class="line">System.out.println(i);</span><br><span class="line">    System.out.println(operation(<span class="number">200</span>,y-&gt;y+<span class="number">2333</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFun</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">(Integer num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hashMap 中存储的是 entry，既索引和值的方式，用索引的方式进行查找内部的值。&lt;/p&gt;
&lt;p&gt;如果插入一个新的值，没有索引的方式下，如果内部有 100W 值，需要进行 100W 次比较，但是 hashMap 使用 hashCode 将需要插入的值计算成索引的方式，去找索引位置有无该索引可以进行判断该对象是否存在，如果没有就可以直接将该值插入到此处。&lt;/p&gt;
&lt;p&gt;如果索引处有值存在，那么用 equals 进行判断，两个值是否相同，如果相同就覆盖原来的值&lt;/p&gt;
&lt;p&gt;如果不相同就会碰撞，形成一个链表，将新的值放链表头（1.7）或链表尾（1.8），如果再有相同索引的值进来，就要跟链表中所有值进行 equals，会降低效率&lt;/p&gt;
&lt;p&gt;为了尽可能降低链表长度，如果容量达到原来 hashMap 的 75% 时，hashMap 会自动进行扩容（resize），将链表中所有元素重新运算，放到扩容完的 hashMap 的中&lt;/p&gt;
&lt;p&gt;java1.8 中如果链表长度大于 8 ，那么就会将其转化为红黑树（提升除了添加以外所有操作效率）&lt;/p&gt;
&lt;p&gt;concurrenthashMap 也是 java8 开始转为红黑树&lt;/p&gt;
&lt;p&gt;java8 中将方法区从永久区转移到元空间 MetaSpace，使用物理内存，因为内存变大了，所以垃圾回收机制运行的概率下降了&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="lambda" scheme="http://yoursite.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>springBoot-features2</title>
    <link href="http://yoursite.com/2019/08/01/springBoot-features2/"/>
    <id>http://yoursite.com/2019/08/01/springBoot-features2/</id>
    <published>2019-08-01T00:52:29.000Z</published>
    <updated>2019-09-05T06:17:07.795Z</updated>
    
    <content type="html"><![CDATA[<p>自动配置了ContentNegotiatingViewResolver和BeanNameViewResolver两个视图解析器。</p><p>支持静态资源，包括webjars</p><p>Converter, GenericConverter和 Formatter bean类的自动化装配。</p><p>支持HttpMessageConverters</p><p>MessageCodesResolver自动注册。</p><p>支持index.html静态页面。</p><p>支持自定义Favicon（网站图标）。</p><p>ConfigurableWebBindingInitializer自动使用</p><p>如果你想保留Spring Boot MVC原有的功能而且还想添加额外MVC配置(interceptors，formatter，视图控制器view controller或者其他功能)，你可以添加你自己@Configuration配置但没有@EnableWebMvc的WebMvcConfigurer类，如果你希望自定义RequestMappingHandlerMapping、RequestMappingHandlerAdapter或者ExceptionHandlerExceptionResolver对象。<br> 你可以声明一个 WebMvcRegistrationsAdapter 对象去提供这些组件。</p><p>如果你想完全控制Spring MVC。你能添加自定义@Configuration和@EnableWebMvc注解的类。</p><a id="more"></a><h2 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h2><p>ContentNegotiatingViewResolver</p><img src="/2019/08/01/springBoot-features2/ConfigurableWebBinding.png" title="静态资源路径"><img src="/2019/08/01/springBoot-features2/resolveViewName.png" title="resolveViewName"><p>getCandidateView 是用来获取所有解析式图的</p><p><code>Collection&lt;ViewResolver&gt; matchingBeans =      BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(), ViewResolver.class).values();</code></p><p>自定义视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义视图解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(MyViewResolver.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/viewResolver.png" title="viewResolver"><h2 id="支持静态资源，包括webjars"><a href="#支持静态资源，包括webjars" class="headerlink" title="支持静态资源，包括webjars"></a>支持静态资源，包括webjars</h2><p>springMVC 项目一般将静态资源放在 webapp 文件夹下，但是使用 springBoot 创建的项目没有 webapp 目录，springboot 有着自己的映射规则</p><p>springBoot 中ResourceProperties.class此配置文件配置了默认的静态资源获取路径根据优先级排序 “classpath:/META-INF/resources/“, “classpath:/resources/“, “classpath:/static/“, “classpath:/public/“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/staticSourcePath.png" title="静态资源路径"><h3 id="支持静态资源的一个用途-webjars"><a href="#支持静态资源的一个用途-webjars" class="headerlink" title="支持静态资源的一个用途 webjars"></a>支持静态资源的一个用途 webjars</h3><p>WebJars是将web前端资源（js，css等）打成jar包文件，然后借助Maven工具，以jar包形式对web前端资源进行统一依赖管理，保证这些Web资源版本唯一性。WebJars的jar包部署在Maven中央仓库上。</p><p>webjar 路径 classpath:/META-INF/resources/webjars/</p><p>webjar 官网：<a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">        CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.7-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/JQ_BS.png" title="pom文件下的配置"><img src="/2019/08/01/springBoot-features2/maven_jar_JQ_BS.png" title="导入maven的webjar"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/jquery/3.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/bootstrap/3.3.7-1/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebJars Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/webjars/bootstrap/3.3.7-1/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span> <span class="attr">aria-label</span>=<span class="string">"close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        Hello, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>WebJars!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/HTML_1.png" title="页面展示"><h2 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a>欢迎页面</h2><p>WebMvcAutoConfiguration 有一个getWelcomePage()方法，用于获取起始页面，在springboot静态资源路径下：”classpath:/META-INF/resources/“, “classpath:/resources/“, “classpath:/static/“, “classpath:/public/“ 放置一个 index.html ，springboot 就会自动去获取到它</p><img src="/2019/08/01/springBoot-features2/getWelcomePage.png" title="获得首页地址"><h2 id="页面图标"><a href="#页面图标" class="headerlink" title="页面图标"></a>页面图标</h2><img src="/2019/08/01/springBoot-features2/getIcon.png" title="页面图标获取"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>, <span class="keyword">this</span>.faviconRequestHandler()));</span><br></pre></td></tr></table></figure><h2 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h2><p>formatter 格式化对象，例如日期格式化对象</p><p>converter 转换器类，将多个属性转换为一个对象</p><p>这些都是属于springMVC的自动配置，源码在WebMvcConfiguration.class中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"date-format"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter.class)) &#123;</span><br><span class="line">registry.addConverter(converter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter.class)) &#123;</span><br><span class="line">registry.addConverter(converter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter.class)) &#123;</span><br><span class="line">registry.addFormatter(formatter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getBeansOfType</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.beanFactory.getBeansOfType(type).values();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日期格式化器，只有在配置文件中配置了spring.mvc.date-format的值才会注册该组件。</p><h2 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h2><p>HttpMessage 是一个接口，用于将 http 请求转换成一个对象，或者将一个对象转换成 http 请求</p><p>比如return对象，json形式响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//检测参数是否可被读取</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"><span class="comment">//检测参数是否可被写入</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"><span class="comment">//获取转换器支持的媒体类型</span></span><br><span class="line">    <span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//从输入信息中读取指定类型对象</span></span><br><span class="line">    <span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; var1, HttpInputMessage var2)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class="line"><span class="comment">//将指定对象写入到输出</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T var1, @Nullable MediaType var2, HttpOutputMessage var3)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/HttpMessage.png" title="消息转换器"><h4 id="ConfigurableWebBindingInitializer"><a href="#ConfigurableWebBindingInitializer" class="headerlink" title="ConfigurableWebBindingInitializer"></a>ConfigurableWebBindingInitializer</h4><p>此类是用来初始化web数据绑定器的</p><p>web数据绑定器是用来将前台传入的数据绑定到相关的bean中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ConfigurableWebBindingInitializer <span class="title">getConfigurableWebBindingInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (ConfigurableWebBindingInitializer)<span class="keyword">this</span>.beanFactory.getBean(ConfigurableWebBindingInitializer.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchBeanDefinitionException var2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getConfigurableWebBindingInitializer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="扩展SpringMVC"><a href="#扩展SpringMVC" class="headerlink" title="扩展SpringMVC"></a>扩展SpringMVC</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-controller</span> <span class="attr">path</span>=<span class="string">"/hsw"</span> <span class="attr">view-name</span>=<span class="string">"success.html"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在 springboot 新建一个类继承WebMvcConfigurer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/hsw"</span>).setViewName(<span class="string">"success.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebMvcAutoConfiguration是SpringMVC的默认自动配置类。</p><p>自动配置类中有个静态内部类EnableWebMvcConfiguration，其父类DelegatingWebMvcConfiguratio有个方法<code>public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) {</code>能获取我们自定义实现的所有配置类。然后在静态内部类中将配置给添加到容器中</p><blockquote><p>参考:<a href="https://www.jianshu.com/p/2946c1c194c4" target="_blank" rel="noopener">https://www.jianshu.com/p/2946c1c194c4</a></p><p><a href="https://www.jianshu.com/p/3ed2e5594dcf" target="_blank" rel="noopener">https://www.jianshu.com/p/3ed2e5594dcf</a></p><p><a href="https://blog.csdn.net/qq_40757662/article/details/95481999" target="_blank" rel="noopener">https://blog.csdn.net/qq_40757662/article/details/95481999</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动配置了ContentNegotiatingViewResolver和BeanNameViewResolver两个视图解析器。&lt;/p&gt;
&lt;p&gt;支持静态资源，包括webjars&lt;/p&gt;
&lt;p&gt;Converter, GenericConverter和 Formatter bean类的自动化装配。&lt;/p&gt;
&lt;p&gt;支持HttpMessageConverters&lt;/p&gt;
&lt;p&gt;MessageCodesResolver自动注册。&lt;/p&gt;
&lt;p&gt;支持index.html静态页面。&lt;/p&gt;
&lt;p&gt;支持自定义Favicon（网站图标）。&lt;/p&gt;
&lt;p&gt;ConfigurableWebBindingInitializer自动使用&lt;/p&gt;
&lt;p&gt;如果你想保留Spring Boot MVC原有的功能而且还想添加额外MVC配置(interceptors，formatter，视图控制器view controller或者其他功能)，你可以添加你自己@Configuration配置但没有@EnableWebMvc的WebMvcConfigurer类，如果你希望自定义RequestMappingHandlerMapping、RequestMappingHandlerAdapter或者ExceptionHandlerExceptionResolver对象。&lt;br&gt; 你可以声明一个 WebMvcRegistrationsAdapter 对象去提供这些组件。&lt;/p&gt;
&lt;p&gt;如果你想完全控制Spring MVC。你能添加自定义@Configuration和@EnableWebMvc注解的类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
      <category term="springMVC" scheme="http://yoursite.com/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>pythonAutoDeploy</title>
    <link href="http://yoursite.com/2019/07/18/pythonAutoDeploy/"/>
    <id>http://yoursite.com/2019/07/18/pythonAutoDeploy/</id>
    <published>2019-07-18T03:04:46.000Z</published>
    <updated>2019-09-05T06:17:51.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OPEN"><a href="#OPEN" class="headerlink" title="OPEN"></a>OPEN</h2><ul><li>open</li></ul><p>open(filePath,’r’) 用于打开文件对象，第一个参数用于传入文件路径和文件名，第二个参数用于表示 open 函数的函数标识符，r 表示只读方式打开文件，文件的指针会放在文件的开头，这是默认模式</p><p>a+ 表示打开一个文件用于追加，如果该文件已经存在，文件指针会放在文件的结尾，新的内容会写入到现有内容以后，如果该文件不存在，创建新文件进行写入</p><a id="more"></a><ul><li>with open()</li></ul><p>因为 open 打开文件会产生 io 问题，文件不存在会抛出 IOError 错误，所以一般会使用 try finally 确保文件正确关闭。但是这样写比较麻烦，所以 python 引入了 with open 自动调用 close() 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>使用 with open</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">print(file.read)</span><br></pre></td></tr></table></figure><p>如果路径需要转义可以在路径前加 r，表示转义如</p><p><code>with open(r&#39;E\work\path\test.txt&#39;,&#39;a+&#39;) as file:</code></p><blockquote><p><a href="https://www.cnblogs.com/ymjyqsx/p/6554817.html" target="_blank" rel="noopener">python 文件读写</a></p><p><a href="https://blog.csdn.net/marsjhao/article/details/60333312" target="_blank" rel="noopener">python with open 标识符</a></p></blockquote><hr><h2 id="strftime"><a href="#strftime" class="headerlink" title="strftime"></a>strftime</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">thetime = time.strftime(format[, t])</span><br></pre></td></tr></table></figure><p>%Y ：表示四位数的年份</p><p>%m ：月份 0-12</p><p>%d：月中的一天 0-31</p><p>time.strftime(%Y%m%d)</p><p>结果是 201907118</p><hr><h2 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h2><p>isExists  = os.path.exists(path)</p><p>用于判断路径是否存在，存在则返回 true 不存在则返回 false</p><p><a href="https://www.runoob.com/python/python-os-path.html" target="_blank" rel="noopener">python os.path() 模块</a></p><hr><h2 id="path-strip"><a href="#path-strip" class="headerlink" title="path.strip()"></a>path.strip()</h2><p>语法： rm为要删除的字符序列，当rm为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’,  ‘ ‘)</p><p>str.strip(rm)：删除字符串开头、结尾处，位于 rm删除序列的字符；</p><p>str.lstrip(rm)：删除字符串开头处，位于 rm删除序列的字符；</p><p>str.rstrip(rm)：删除字符串结尾处，位于 rm删除序列的字符。</p><blockquote><p><a href="https://blog.csdn.net/marsjhao/article/details/59481950" target="_blank" rel="noopener">python split() 函数</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OPEN&quot;&gt;&lt;a href=&quot;#OPEN&quot; class=&quot;headerlink&quot; title=&quot;OPEN&quot;&gt;&lt;/a&gt;OPEN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;open(filePath,’r’) 用于打开文件对象，第一个参数用于传入文件路径和文件名，第二个参数用于表示 open 函数的函数标识符，r 表示只读方式打开文件，文件的指针会放在文件的开头，这是默认模式&lt;/p&gt;
&lt;p&gt;a+ 表示打开一个文件用于追加，如果该文件已经存在，文件指针会放在文件的结尾，新的内容会写入到现有内容以后，如果该文件不存在，创建新文件进行写入&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>springBootJK</title>
    <link href="http://yoursite.com/2019/07/07/springBootJK/"/>
    <id>http://yoursite.com/2019/07/07/springBootJK/</id>
    <published>2019-07-07T10:00:43.000Z</published>
    <updated>2019-09-09T10:07:42.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="使用-spring-inilitializr-创建-springBoot-项目框架"><a href="#使用-spring-inilitializr-创建-springBoot-项目框架" class="headerlink" title="使用 spring inilitializr 创建 springBoot 项目框架"></a>使用 spring inilitializr 创建 springBoot 项目框架</h2><ol><li><p>选择 maven project – java – springboot 2.16 – group com.xxx.spring – artifact demo.springBoot – Dependencies (选择需要的功能如 spring web starter 用于启动 web 项目自带 tomcat 等插件，spring boot actuator 等) </p></li><li><p>选择完成后点击 generate the project ，下载压缩包到本地，解压后用 idea 打开 import maven 项目，等自动导入 maven 依赖完成后才会出现 src 目录</p></li></ol>   <a id="more"></a><ol start="3"><li><p>给代码添加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(Application.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"hello spring"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController 可以直接将其视为 controller，@RequestMapping(“hello”) 就是一个拦截器名，运行该项目，利用 idea 自带 terminal 进行 <code>curl http://localhost:8080/hello</code> 即可访问到该项目，输出 hello spring</p></li><li><p>使用 mvn clean package -Dmaven.test.skip 打包项目，cd target 跳转到编译完的目录下，dir （window）或 ls （mac）查看目录，发现编译包有两个一个比较大，含有所有依赖，是可执行 jar 包；一个较小，只有代码</p><p><code>2019/07/07  17:43        18,309,095 demo.springBoot-0.0.1-SNAPSHOT.jar2019/07/07  17:37             3,094 demo.springBoot-0.0.1-SNAPSHOT.jar.original</code></p><p>停止运行的程序，使用 <code>java -jar demo.springBoot-0.0.1-SNAPSHOT.jar</code> 也可以产生运行的效果，左上 绿色 + 号新开一个 teminal ，使用 <code>curl http://localhost:8080/hello</code> 依然能输出 hello spring 的效果</p></li></ol><hr><h2 id="spring-常用注解"><a href="#spring-常用注解" class="headerlink" title="spring 常用注解"></a>spring 常用注解</h2><h3 id="java-Config-相关注解"><a href="#java-Config-相关注解" class="headerlink" title="java Config 相关注解"></a>java Config 相关注解</h3><p>@Configuration用于定义配置类，可替换xml配置文件</p><p>在@configuration中引入其它注解配置</p><p>@ImportSource</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ImportResource(&quot;classpath:applicationContext-configuration.xml&quot;)</span><br></pre></td></tr></table></figure><p>@ComponentScan 用于告诉 spring 容器可以扫描哪些 package 下的 bean 等配置</p><p>@Bean 标注的方法，它的返回能存在于 applicationContext 中</p><p>@RestController = @Controller+@ResponseBody</p><p>@Autowired 在上下文中按类型查找注入</p><p>@Qualifier 上下文中有多个同类型的 bean 时，为了防止歧义，配合使用 Qualifier 指定 bean 的名字，根据名字注入</p><p>@Resource 直接使用名字注入</p><p>@Value 在 bean 中注入常量，spe 的表达式，配置方面的东西</p><h3 id="lombok-注释"><a href="#lombok-注释" class="headerlink" title="lombok 注释"></a>lombok 注释</h3><p>@Builder </p><p>@Data</p><ul><li>@Get</li><li>@Set</li><li>@ToString</li></ul><p>@NoArgsConstructor –空构造方法</p><p>@AllArgsConstructor  –所有参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Type</span>(type= <span class="string">"org.jadira.usertype.moneyandcurrency.joda.PersistentMoneyAmount"</span>,</span><br><span class="line">          parameters = &#123;<span class="meta">@org</span>.hibernate.annotations.Parameter(name=<span class="string">"currencyCode"</span>,value=<span class="string">"CNY"</span>)&#125;)</span><br></pre></td></tr></table></figure><p>PersistentMoneyAmount 的输出类型为 decimal</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_menu (</span><br><span class="line">       <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">        create_time <span class="keyword">timestamp</span>,</span><br><span class="line">        price <span class="built_in">decimal</span>(<span class="number">19</span>,<span class="number">2</span>),</span><br><span class="line">        update_time <span class="keyword">timestamp</span>,</span><br><span class="line">        primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>PersistentMoneyMinorAmount 的输出类型为 bigint</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_menu (</span><br><span class="line">       <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">        create_time <span class="keyword">timestamp</span>,</span><br><span class="line">        price <span class="built_in">bigint</span>,</span><br><span class="line">        update_time <span class="keyword">timestamp</span>,</span><br><span class="line">        primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><hr><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q：运行spring boot 显示 No identifier specified for entity </p><p>A：没有在 bean 上注释 @Entity 或者没有 @MappedSuperclass</p><p>找不到 bean 的实例，如果使用 @Entity hibernate 会错误的认为所有的Entity都是在一张数据表中的。</p><p>如下将继承 base bean 的数据字段全部放在 base_entity 中，不过 join 的表还是会被创建</p><p>Hibernate: </p><pre><code>drop table base_entity if exists</code></pre><p>Hibernate: </p><pre><code>drop table t_order_coffee if exists</code></pre><p>Hibernate: </p><pre><code>create table base_entity (   dtype varchar(31) not null,    id bigint generated by default as identity,    create_time timestamp,    update_time timestamp,    customer varchar(255),    state integer not null,    price bigint,    primary key (id))</code></pre><p>Hibernate: </p><pre><code>create table t_order_coffee (   coffee_order_id bigint not null,    items_id bigint not null)</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FKj7y52vjqwbl1wptf9kopnkm54    foreign key (items_id)    references base_entity</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FKr4nljvhowpwbciwa8xjs0h59y    foreign key (coffee_order_id)    references base_entity</code></pre><p>使用 @MappedSupperclass 可以使继承该 bean 的子类创建多个表，能将各种继承 base bean 的表全部创建出来</p><p>Hibernate: </p><pre><code>drop table t_menu if exists</code></pre><p>Hibernate: </p><pre><code>drop table t_order if exists</code></pre><p>Hibernate: </p><pre><code>drop table t_order_coffee if exists</code></pre><p>Hibernate: </p><pre><code>create table t_menu (   id bigint generated by default as identity,    create_time timestamp,    update_time timestamp,    price bigint,    primary key (id))</code></pre><p>Hibernate: </p><pre><code>create table t_order (   id bigint generated by default as identity,    create_time timestamp,    update_time timestamp,    customer varchar(255),    state integer not null,    primary key (id))</code></pre><p>Hibernate: </p><pre><code>create table t_order_coffee (   coffee_order_id bigint not null,    items_id bigint not null)</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FKj2swxd3y69u2tfvalju7sr07q    foreign key (items_id)    references t_menu</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FK33ucji9dx64fyog6g17blpx9v    foreign key (coffee_order_id)    references t_order</code></pre><blockquote><p>参考：<a href="https://blog.csdn.net/kunshan_shenbin/article/details/5516443" target="_blank" rel="noopener">https://blog.csdn.net/kunshan_shenbin/article/details/5516443</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;h2 id=&quot;使用-spring-inilitializr-创建-springBoot-项目框架&quot;&gt;&lt;a href=&quot;#使用-spring-inilitializr-创建-springBoot-项目框架&quot; class=&quot;headerlink&quot; title=&quot;使用 spring inilitializr 创建 springBoot 项目框架&quot;&gt;&lt;/a&gt;使用 spring inilitializr 创建 springBoot 项目框架&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择 maven project – java – springboot 2.16 – group com.xxx.spring – artifact demo.springBoot – Dependencies (选择需要的功能如 spring web starter 用于启动 web 项目自带 tomcat 等插件，spring boot actuator 等) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择完成后点击 generate the project ，下载压缩包到本地，解压后用 idea 打开 import maven 项目，等自动导入 maven 依赖完成后才会出现 src 目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>springBoot_features_24.5</title>
    <link href="http://yoursite.com/2019/07/07/springBoot-features/"/>
    <id>http://yoursite.com/2019/07/07/springBoot-features/</id>
    <published>2019-07-07T05:58:44.000Z</published>
    <updated>2019-09-05T06:19:19.686Z</updated>
    
    <content type="html"><![CDATA[<h4 id="24-5-Placeholders-in-Properties"><a href="#24-5-Placeholders-in-Properties" class="headerlink" title="24.5 Placeholders in Properties"></a>24.5 Placeholders in Properties</h4><p>属性中的占位符</p><blockquote><p>The values in <code>application.properties</code> are filtered through the existing <code>Environment</code> when they are used, so you can refer back to previously defined values (for example, from System properties).</p></blockquote><p>属性文件中可以调用之前声明的属性</p><a id="more"></a><ul><li>测试用例 main 函数：</li></ul><img src="/2019/07/07/springBoot-features/main.png" title="main方法"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyPlaceholderConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Bean 标注在方法上(返回某个实例的方法)，</span></span><br><span class="line">    <span class="comment">//等价于 spring 的 xml 配置文件中的 &lt;bean&gt;，作用为：注册 bean 对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DemoBean <span class="title">demoBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象后，返回 SpringApplication 对象</span></span><br><span class="line">        SpringApplication springBootDemo =</span><br><span class="line">                <span class="keyword">new</span> SpringApplication(PropertyPlaceholderConfigurer.class);</span><br><span class="line">        ConfigurableApplicationContext context = springBootDemo.run(args);</span><br><span class="line">        <span class="comment">//获取 Bean</span></span><br><span class="line">        DemoBean demoBean = context.getBean(DemoBean.class);</span><br><span class="line">        <span class="comment">//使用 Bean 的方法输出值</span></span><br><span class="line">        demoBean.showDemoTitle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试用例 Bean 实体类:</li></ul><img src="/2019/07/07/springBoot-features/Bean.png" title="Bean实体类"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从配置文件注入 demo.title 的值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;demo.title&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String demoTitle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出 demoTitle 的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDemoTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"Demo Result ----- %s ----- %n"</span>,demoTitle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试用例配置文件</li></ul><img src="/2019/07/07/springBoot-features/properties.png" title="properties文件"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">miku=2333</span><br><span class="line"># $&#123;&#125; 中的值可以在配置文件中定义，注入时直接能进行替换</span><br><span class="line">demo.title=SpringBoot $&#123;miku&#125;  @project.parent.artifactId@ @project.version@</span><br></pre></td></tr></table></figure><ul><li>测试1</li></ul><p><code>mvn spring-boot:run</code></p><ul><li>输出结果</li></ul><img src="/2019/07/07/springBoot-features/result1.png" title="result1"><p>Demo Result —– SpringBoot 2333  spring-boot-starter-parent 0.0.1-SNAPSHOT —–</p><p>结果中 ${miku} 被配置文件中的 <code>miku = 2333</code> 的值所替换了</p><p>而且 <a href="mailto:`@project.parent.artifactId" target="_blank" rel="noopener">`@project.parent.artifactId</a>@<code>与</code>@project.version@` 分别获得了maven 的 pom.xml 中的对应标签的值</p><img src="/2019/07/07/springBoot-features/pom.png" title="pom.xml"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nbcb.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo.springBoot.DateSource<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>demo.springBoot.DateSource<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试2</li></ul><p><code>mvn spring-boot:run -Dmiku=no1</code></p><p>使用 D+字段的形式可以替换 ${} 所代表的值，使用命令的方式优先于使用配置文件的方式</p><img src="/2019/07/07/springBoot-features/properties.png" title="properties文件"><p>依旧是上方的配置，但是输出结果为</p><img src="/2019/07/07/springBoot-features/result2.png" title="result2"><p><code>Demo Result ----- SpringBoot no1  spring-boot-starter-parent 0.0.1-SNAPSHOT -----</code></p><hr><h4 id="77-4-Use-‘Short’-Command-Line-Arguments"><a href="#77-4-Use-‘Short’-Command-Line-Arguments" class="headerlink" title="77.4 Use ‘Short’ Command Line Arguments"></a>77.4 Use ‘Short’ Command Line Arguments</h4><blockquote><p>Some people like to use (for example) <code>--port=9000</code> instead of <code>--server.port=9000</code> to set configuration properties on the command line. You can enable this behavior by using placeholders in <code>application.properties</code>, as shown in the following example:</p></blockquote><blockquote><p>If you inherit from the <code>spring-boot-starter-parent</code> POM, the default filter token of the <code>maven-resources-plugins</code> has been changed from <code>${*}</code> to <code>@</code> (that is, <a href="mailto:`@maven.token" target="_blank" rel="noopener">`@maven.token</a>@<code>instead of</code>${maven.token}<code>) to prevent conflicts with Spring-style placeholders. If you have enabled Maven filtering for the</code>application.properties` directly, you may want to also change the default filter token to use <a href="https://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html#delimiters" target="_blank" rel="noopener">other delimiters</a>.</p></blockquote><p>maven 继承了 spring-boot-starter-parent，并且 spring 的占位符也是 ${key}, 导致 mavenfilter 的占位符被 spring 的 maven pom 替换掉了，变成了 @maven.token@ </p><blockquote><p>In this specific case, the port binding works in a PaaS environment such as Heroku or Cloud Foundry. In those two platforms, the <code>PORT</code> environment variable is set automatically and Spring can bind to capitalized synonyms for <code>Environment</code> properties.</p></blockquote><p>在这种特定情况下，端口绑定可在平台即服务环境（云计算服务，提供云计算平台与解决方案堆栈即服务）（如Heroku或Cloud Foundry）中运行。在这两个平台中，PORT环境变量自动设置，Spring可以绑定到环境属性的同义词。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;24-5-Placeholders-in-Properties&quot;&gt;&lt;a href=&quot;#24-5-Placeholders-in-Properties&quot; class=&quot;headerlink&quot; title=&quot;24.5 Placeholders in Properties&quot;&gt;&lt;/a&gt;24.5 Placeholders in Properties&lt;/h4&gt;&lt;p&gt;属性中的占位符&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The values in &lt;code&gt;application.properties&lt;/code&gt; are filtered through the existing &lt;code&gt;Environment&lt;/code&gt; when they are used, so you can refer back to previously defined values (for example, from System properties).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;属性文件中可以调用之前声明的属性&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>ssDeploy</title>
    <link href="http://yoursite.com/2019/06/14/ssDeploy/"/>
    <id>http://yoursite.com/2019/06/14/ssDeploy/</id>
    <published>2019-06-14T06:37:11.000Z</published>
    <updated>2019-06-14T09:37:46.652Z</updated>
    
    <content type="html"><![CDATA[<p>ss 搭建过程中的坑</p><p>debain 用 apt ，yunos 用 yum</p><p>debain 系统的安装</p><p>unzip 安装问题</p><p>sudo ：apt-get：command not found – 不加 sudo ： 前缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install unzip</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://www.luminanetworks.com/docs-lsc-610/Topics/SDN_Controller_Software_Installation_Guide/Appendix/Installing_Zip_and_Unzip_for_Ubuntu_1.html" target="_blank" rel="noopener">https://www.luminanetworks.com/docs-lsc-610/Topics/SDN_Controller_Software_Installation_Guide/Appendix/Installing_Zip_and_Unzip_for_Ubuntu_1.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ss 搭建过程中的坑&lt;/p&gt;
&lt;p&gt;debain 用 apt ，yunos 用 yum&lt;/p&gt;
&lt;p&gt;debain 系统的安装&lt;/p&gt;
&lt;p&gt;unzip 安装问题&lt;/p&gt;
&lt;p&gt;sudo ：apt-get：command not found – 不加 sudo ： 前缀&lt;/
      
    
    </summary>
    
    
      <category term="ss" scheme="http://yoursite.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>guankongMission</title>
    <link href="http://yoursite.com/2019/05/21/guankongMission/"/>
    <id>http://yoursite.com/2019/05/21/guankongMission/</id>
    <published>2019-05-21T06:58:46.000Z</published>
    <updated>2019-07-07T04:11:26.824Z</updated>
    
    <content type="html"><![CDATA[<td nowrap="" ...=""><p>nowrap 规定表中内容不换行</p><p>添加表格或其他文本出不来，先检查 <code>&lt;tr&gt; &lt;td&gt;</code>等标签是否封闭</p><p>json 字符串放在 “” 中需要对内部双引号使用 \ 转义,不能使用单引号，前端会无法识别</p><hr><h5 id="反射修改私有变量"><a href="#反射修改私有变量" class="headerlink" title="反射修改私有变量"></a>反射修改私有变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改对象私有变量的值</span></span><br><span class="line"><span class="comment"> * 为简洁代码，在方法上抛出总的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyPrivateFiled</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取 Class 类实例</span></span><br><span class="line">    TestClass testClass = <span class="keyword">new</span> TestClass();</span><br><span class="line">    Class mClass = testClass.getClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取私有变量</span></span><br><span class="line">    Field privateField = mClass.getDeclaredField(<span class="string">"MSG"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 操作私有变量</span></span><br><span class="line">    <span class="keyword">if</span> (privateField != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取私有变量的访问权</span></span><br><span class="line">        privateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改私有变量，并输出以测试</span></span><br><span class="line">        System.out.println(<span class="string">"Before Modify：MSG = "</span> + testClass.getMsg());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 set(object , value) 修改变量的值</span></span><br><span class="line">        <span class="comment">//privateField 是获取到的私有变量</span></span><br><span class="line">        <span class="comment">//testClass 要操作的对象</span></span><br><span class="line">        <span class="comment">//"Modified" 为要修改成的值</span></span><br><span class="line">        privateField.set(testClass, <span class="string">"Modified"</span>);</span><br><span class="line">        System.out.println(<span class="string">"After Modify：MSG = "</span> + testClass.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>出处：<a href="https://juejin.im/post/598ea9116fb9a03c335a99a4" target="_blank" rel="noopener">https://juejin.im/post/598ea9116fb9a03c335a99a4</a></p></blockquote><hr><h5 id="Q-bigDecimal-cannot-be-cast-to-java-lang-String"><a href="#Q-bigDecimal-cannot-be-cast-to-java-lang-String" class="headerlink" title="Q:bigDecimal cannot be cast to java.lang.String"></a>Q:bigDecimal cannot be cast to java.lang.String</h5><p>A:使用 setBigDecimal() 替代 setString() </p></td>]]></content>
    
    <summary type="html">
    
      
      
        &lt;td nowrap=&quot;&quot; ...=&quot;&quot;&gt;

&lt;p&gt;nowrap 规定表中内容不换行&lt;/p&gt;
&lt;p&gt;添加表格或其他文本出不来，先检查 &lt;code&gt;&amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&lt;/code&gt;等标签是否封闭&lt;/p&gt;
&lt;p&gt;json 字符串放在 “” 中需要对内部双引号使
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>pyDay1</title>
    <link href="http://yoursite.com/2019/04/18/pyDay1/"/>
    <id>http://yoursite.com/2019/04/18/pyDay1/</id>
    <published>2019-04-18T08:15:25.000Z</published>
    <updated>2019-07-07T04:14:53.617Z</updated>
    
    <content type="html"><![CDATA[<p>UTF-8 与 Unicode</p><p>UTF-8 Unicode Transformation Format</p><ul><li><p>在计算机内存统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码</p><p>记事本编辑时，从文件中读取的 UTF-8 字符被转换成 Unicode 字符到内存，编辑完成后，将 Unicode 转换成 UTF-8 保存到文件</p></li></ul><img src="/2019/04/18/pyDay1/Code.png" title="codeChange"><p>浏览网页时，服务器会把动态生成的 Unicode 内容转换成 UTF-8 再传输到浏览器</p><img src="/2019/04/18/pyDay1/Code2.png" title="codeChange2"><blockquote><p><a href="https://www.cnblogs.com/loulijun/archive/2012/03/28/2421568.html" target="_blank" rel="noopener">JSP中pageEncoding和charset区别，中文乱码解决方案</a></p></blockquote><hr><p>将 abs 指向一个整数，就无法再调用原来的 abs 函数了，重启 python 交互环境，由于<code>abs</code>函数实际上是定义在<code>import builtins</code>模块中的，所以要让修改<code>abs</code>变量的指向在其它模块也生效，要用<code>import builtins; builtins.abs = 10</code>。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UTF-8 与 Unicode&lt;/p&gt;
&lt;p&gt;UTF-8 Unicode Transformation Format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在计算机内存统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码&lt;/p&gt;
&lt;p&gt;记
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>DMP_deploy</title>
    <link href="http://yoursite.com/2019/04/15/DMP-deploy/"/>
    <id>http://yoursite.com/2019/04/15/DMP-deploy/</id>
    <published>2019-04-15T00:58:59.000Z</published>
    <updated>2019-11-27T09:33:05.157Z</updated>
    
    <content type="html"><![CDATA[<p>/home/edh</p><p>修改 tomcat 端口</p><p><code>&lt;Server port=&quot;9992(跟原端口有区分即可)&quot; shutdown=&quot;SHUTDOWN&quot;\&gt;</code></p><p><code>&lt;Connector port=&quot;9026(跟原端口有区别即可)&quot; protocal=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/\&gt;</code></p><h5 id="Server-xml-元素分类"><a href="#Server-xml-元素分类" class="headerlink" title="Server.xml 元素分类"></a>Server.xml 元素分类</h5><p>server.xml文件中的元素可以分为以下4类：</p><p>（1）顶层元素：&lt;Server>和&lt;Service></p><p>&lt;Server>元素是整个配置文件的根元素，&lt;Service>元素则代表一个Engine元素以及一组与之相连的Connector元素。</p><p>（2）连接器：&lt;Connector></p><p>&lt;Connector>代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。</p><p>（3）容器：&lt;Engine>&lt;Host>&lt;Context></p><p>容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。</p><p>（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。</p><a id="more"></a><ul><li><p>Server 元素的作用</p><p>Server 在元素的最顶层，代表 tomcat 容器，因此必须是 Server.xml 中唯一的一个外层元素，一个 Server 中可以包含多个 service 元素</p><ul><li>Server 中 shutdown 端口的作用</li></ul><p>shutdown 属性表示关闭 Server 的指令；port 属性表示 Server 接受 shutdown 指令的端口号，设为 -1 可以禁止掉该端口</p><ul><li><p>Server 中 redirect 端口的作用</p><p>当用户用http请求某个资源，而该资源本身又被设置了必须要https方式访问，此时Tomcat会自动重定向到这个redirectPort设置的https端口。</p></li></ul></li><li><p>Server 下 Service 的作用</p><p>Service 在 Connection 与 Engine 外包裹一层，将他们组装在一起，对外提供服务。一个 Service 可以包含多个 Connection 跟一个 Engine，Connection 用来接受客户端的请求，Engine 用来处理请求。Server 中可以只包含一个 Service ，名为 “Catalina”（名称没有限制），也可以包含多个 Service 来监听不同端口的请求</p></li><li><p>Service 下 Connector 的功能</p><p>Connection 的主要功能是接收连接请求，创建 Request 与 Response 对象用于和请求端交换数据，分配线程让 Engine 来处理这个请求，并把产生的 Request 与 Response 传递给 Engine</p><p>Tomcat 监听 HTTP 请求一般用 8080 端口，而不是 80 端口（一般不将 Tomcat 直接对外开放请求，在 Tomcat 和客户端之间加一层代理服务器，如 nginx，用于请求转发、负载均衡、处理静态文件等）</p><p>配置第二个 Connector 客户端可以通过 8009 端口使用 AJP 协议访问 tomcat ，AJP 协议负责与其他 Http 服务器（如 Apache 与 IIS 等 HTTP 服务器）等集成，Tomcat 用作 Servlet/JSP 容器，处理动态资源，Apahe 等处理静态资源</p></li><li><p>Service 下的 Engine 组件</p><p>Engine 组件在 Service 中有且只有一个；Engine 是 Service 组件中的请求处理组件。Engine 组件从一个或多个 Connector 接收请求并处理，将完成的请求返回给 Connector ，最终传递给客户端</p><p>Engine、Host、Context 都是容器，它们是父子关系，Engine 包含 Host，Host 包含 Context</p><p>Engine 配置 <code>&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</code></p><p>name 属性用于日志和错误信息，在整个 Server 中唯一。defaultHost 用于指定默认 host 名，当发往本机的 host 名不存在时，使用 defaultHost 指定的 host 进行处理，所以 defaultHost 指定的值必须与 Engine 中其中一个 Host 组件的 name 属性值匹配。</p></li><li><p>Engine 的子容器 Host</p><p>Engine 中可以内嵌一个或多个 Host 组件，每个 Host 组件代表 Engine 中一个虚拟主机，Host 组件至少有一个，且其 name 与 defaultHost 属性相匹配。</p><p>host 虚拟主机，作用是运行多个 web 应用（一个 Context 代表一个 Web 应用），负责安装、展开、启动、结束每个 Web 应用</p><p>Host 组件代表一个虚拟主机，对应服务器的 IP 地址（192.168.0.128）或将 IP</p></li><li><p>Context 元素</p><p>docBase 指定该 web 应用的 war 包路径，或应用目录。在自动部署时(配置文件位于xmlBase中)，docBase不在appBase目录中需要指定，如果 war 包在 docBase 中则不需要指定，如果指定会出错。</p><p>path 指定了上下文路径，请求到来时，Tomcat 会根据 Web 应用的 path 属性与 URI 的匹配程度选择 Web 应用的处理相应请求。如果请求时 /app1/index.html 则将其交由 “/app1” path 的 Web 应用处理，如果是 /app2/index.html 的请求，则交由 “/app2” 的 path 的 Web 应用处理，如果 path 属性为 “ “ ，那么用默认的 Web 应用处理</p></li></ul><h5 id="Tomcat-请求由谁处理"><a href="#Tomcat-请求由谁处理" class="headerlink" title="Tomcat 请求由谁处理"></a>Tomcat 请求由谁处理</h5><ul><li><p>根据协议和端口号选定Service和Engine</p><p>Service中的Connector组件可以接收特定端口的请求，因此，当Tomcat启动时，Service组件就会监听特定的端口。Catalina这个Service监听了8080端口（基于HTTP协议）和8009端口（基于AJP协议）。当请求进来时，Tomcat便可以根据协议和端口号选定处理请求的Service；Service一旦选定，Engine也就确定。</p></li></ul><p>就是说 Service 中配置特定的 connector ，其端口就是用户可以访问到的端口</p><p>通过在Server中配置多个Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。</p><ul><li><p>根据域名或IP地址选定Host</p><p>Service确定后，Tomcat在Service中寻找名称与域名/IP地址匹配的Host处理该请求。如果没有找到，则使用Engine中指定的defaultHost来处理该请求。在第一部分的例子中，由于只有一个Host（name属性为localhost），因此该Service/Engine的所有请求都交给该Host处理。</p></li><li><p>根据URI选定Context/Web应用</p><p>Tomcat根据应用的 path属性与URI的匹配程度来选择Web应用处理相应请求。</p></li><li><p>例</p><p>以请求<a href="http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。" target="_blank" rel="noopener">http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。</a></p></li></ul><blockquote><p>出处：<a href="http://www.importnew.com/26156.html" target="_blank" rel="noopener">详解 Tomcat 配置文件 server.xml</a></p></blockquote><hr><h5 id="linux-修改文件权限-chmod"><a href="#linux-修改文件权限-chmod" class="headerlink" title="linux 修改文件权限 chmod"></a>linux 修改文件权限 chmod</h5><p>chmod的语法格式如下：</p><p>chmod [who] [opt] [mode] 文件/目录名</p><p>其中who表示对象，是以下字母中的一个或组合： </p><p>u：表示文件所有者<br>g：表示同组用户<br>o：表示其它用户<br>a：表示所有用户 </p><p>opt则是代表操作，可以为：<br>+：添加某个权限<br>-：取消某个权限<br>=：赋予给定的权限，并取消原有的权限</p><p>而mode则代表权限：<br>r：可读 </p><p>w：可写</p><p>x：可执行</p><p>首先看第一个参数，目前我的需求是可以执行就行了，所以我让文件的拥有着，也就是root用户有可执行的权限就可以了，所以构造命令如下：</p><p>chmod u</p><p>再看第二个参数，opt，很明显是加权限了，如下：</p><p>chmod u + </p><p>再看第三个参数，这里是需要可执行的命令，也就是x，构造之后的命令如下：</p><p>chmod u + x</p><p>最后加上文件名称：</p><p>chmod u + x start-redis-cluster.sh</p><blockquote><p><a href="https://blog.csdn.net/ksdb0468473/article/details/52150262" target="_blank" rel="noopener">https://blog.csdn.net/ksdb0468473/article/details/52150262</a></p></blockquote><hr><h5 id="查询-java-jdk-安装路径：which-java-–-gt-usr-bin-java"><a href="#查询-java-jdk-安装路径：which-java-–-gt-usr-bin-java" class="headerlink" title="查询 java jdk 安装路径：which java –&gt;/usr/bin/java"></a>查询 java jdk 安装路径：which java –&gt;/usr/bin/java</h5><p>跳转到 usr/bin/</p><p>查找 java，发现这是一个快捷方式，后有箭头指向 /etc/alternatives/java</p><p>跳转到 /etc/alternatives/</p><p>在其目录下寻找对应 jre，jre 后有箭头指向目录 /user/lob/jvm/jre-1.7.0-openjdkx86 64</p><p>该目录就是需要的 jdk 路径</p><hr><h5 id="idea-启动-tomcat-显示-1099-地址已被占用"><a href="#idea-启动-tomcat-显示-1099-地址已被占用" class="headerlink" title="idea 启动 tomcat 显示 1099 地址已被占用"></a>idea 启动 tomcat 显示 1099 地址已被占用</h5><p><code>Address localhost:1099 is aleady in use</code></p><p>使用 cmd 命令行查找 1099 端口的进程<code>netstat -ano|findstr&quot;1099&quot;</code></p><p>发现进程 <code>0.0.0.0:1099   6284</code> PID 为 6284</p><p>使用 taskkill -f -pid 6284 将其进程结束就行</p><p>为什么 tomcat 地址是 0.0.0.0:8080 因为这是<b> 动态地址 </b> ，本来本地 ip 应该是 127.0.0.1 但是这个 ip 是保留 ip ，无论外部 ip 是什么，系统都会保留这个 ip 识别。0.0.0.0 作为动态 ip 使用，上网后它会被外部 ip 替代</p><blockquote><p>参考：<a href="https://yeluotiying.iteye.com/blog/2245820" target="_blank" rel="noopener">ip 0.0.0.0</a> </p></blockquote><hr><p>linux 下执行 window 中拷贝的 .sh shell 文件赋予权限后会报 python^M：bad interpreter:没有那个文件或目录的异常</p><p>其实IDE开发环境或者代码编辑器中都可以设置编程风格，在Linux下有最一般的修改方法，下面在Linux下修改：</p><p>方法一，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/^M//g' test.py</span><br></pre></td></tr></table></figure><p>注意^M这个输入方法不是输入^再输入M，而是按住Ctrl+V快捷键，然后松开V，Ctrl不松，按M，按完之后^M就一并打好了，只有这个方法输入才是可以的，其他字符输入都一样</p><p>或者</p><p>用 vim 命令打开文件，底部模式下运行命令 ：set ff 或者 ：set fileformat 查看当前文件的换行标识，linux 返回的是 fileformat=unix，windows 换行返回的是 fileformat=dos</p><p>通过命令修改成 unix 风格的换行，使用 <code>:set ff=unix</code> 或者 <code>:set fileformat=unix</code> 回车后 wq 保存，如果要转成 window 风格将值改成 doc 即可。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/freeweb/p/5194614.html" target="_blank" rel="noopener">由于Windows和Linux行尾标识引起脚本无法运行的解决</a></p></blockquote><hr><h5 id="DMP-页面无法登陆"><a href="#DMP-页面无法登陆" class="headerlink" title="DMP 页面无法登陆"></a>DMP 页面无法登陆</h5><p>后台 tomcat 报错，tomcat:java.lang.OutOfMemoryError: PermGen space</p><p>临时重启 tomcat 可以解决</p><p>深入问题解决方法：</p><blockquote><p><a href="http://outofmemory.cn/c/java-outOfMemoryError" target="_blank" rel="noopener">Java 内存溢出（java.lang.OutOfMemoryError）的常见情况和处理方式总结</a></p></blockquote><hr><h5 id="tomcat-启动无报错无法找到页面"><a href="#tomcat-启动无报错无法找到页面" class="headerlink" title="tomcat 启动无报错无法找到页面"></a>tomcat 启动无报错无法找到页面</h5><p>可能端口被修改过</p><p>查看 tomcat 进程</p><p>ps -aux | grep tomcat</p><p>使用命令查看 tomcat 端口号</p><p>sudo netstat -naop | grep 14177</p><p><a href="https://blog.csdn.net/theonegis/article/details/49121497" target="_blank" rel="noopener">Linux下Tomcat端口号以及进程相关命令</a></p><hr><h5 id="linux-tomcat-重启脚本"><a href="#linux-tomcat-重启脚本" class="headerlink" title="linux tomcat 重启脚本"></a>linux tomcat 重启脚本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep tomcat|grep 9080|grep -v grep|awk</span><br></pre></td></tr></table></figure><hr><h5 id="linux-查找某路径下含有某字符串的文件"><a href="#linux-查找某路径下含有某字符串的文件" class="headerlink" title="linux 查找某路径下含有某字符串的文件"></a>linux 查找某路径下含有某字符串的文件</h5><p>grep -rl ‘fileContent’ /root/crowsong/</p><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-tomcat-启动报错："><a href="#Q-tomcat-启动报错：" class="headerlink" title="Q:tomcat 启动报错："></a>Q:tomcat 启动报错：</h5><p>`Cannot find ./catalina.sh， The file is absent or does not have execute permission </p><p>A:sh 文件没有运行没有权限</p><p><code>chmod +x /data/tomcat7/bin/*.sh</code><br>或者<br><code>chmod 755 /data/tomcat7/bin/*.sh</code></p><blockquote><p>出处：<a href="https://blog.csdn.net/u012599988/article/details/44080673" target="_blank" rel="noopener">https://blog.csdn.net/u012599988/article/details/44080673</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;/home/edh&lt;/p&gt;
&lt;p&gt;修改 tomcat 端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Server port=&amp;quot;9992(跟原端口有区分即可)&amp;quot; shutdown=&amp;quot;SHUTDOWN&amp;quot;\&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Connector port=&amp;quot;9026(跟原端口有区别即可)&amp;quot; protocal=&amp;quot;HTTP/1.1&amp;quot; connectionTimeout=&amp;quot;20000&amp;quot; redirectPort=&amp;quot;8443&amp;quot; URIEncoding=&amp;quot;UTF-8&amp;quot;/\&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;Server-xml-元素分类&quot;&gt;&lt;a href=&quot;#Server-xml-元素分类&quot; class=&quot;headerlink&quot; title=&quot;Server.xml 元素分类&quot;&gt;&lt;/a&gt;Server.xml 元素分类&lt;/h5&gt;&lt;p&gt;server.xml文件中的元素可以分为以下4类：&lt;/p&gt;
&lt;p&gt;（1）顶层元素：&amp;lt;Server&gt;和&amp;lt;Service&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;Server&gt;元素是整个配置文件的根元素，&amp;lt;Service&gt;元素则代表一个Engine元素以及一组与之相连的Connector元素。&lt;/p&gt;
&lt;p&gt;（2）连接器：&amp;lt;Connector&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;Connector&gt;代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。&lt;/p&gt;
&lt;p&gt;（3）容器：&amp;lt;Engine&gt;&amp;lt;Host&gt;&amp;lt;Context&gt;&lt;/p&gt;
&lt;p&gt;容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。&lt;/p&gt;
&lt;p&gt;（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>oracle</title>
    <link href="http://yoursite.com/2019/04/14/oracle/"/>
    <id>http://yoursite.com/2019/04/14/oracle/</id>
    <published>2019-04-14T03:55:41.000Z</published>
    <updated>2020-01-08T01:56:31.361Z</updated>
    
    <content type="html"><![CDATA[<p>登录：（su - oracle）</p><p>密码认证</p><p>sqlplus <a href="mailto:scott/tiger@192.168.194.128" target="_blank" rel="noopener">scott/tiger@192.168.194.128</a>/orcl</p><p>sqlplus 显示命令不存在(可能使用了 su oracle 登录 oracle ，exit 后选择 su - oracle 登录)</p><h5 id="解锁用户-amp-修改密码"><a href="#解锁用户-amp-修改密码" class="headerlink" title="解锁用户&amp;修改密码"></a>解锁用户&amp;修改密码</h5><p>解锁方法是用system用户（或者具有DBA角色的用户）登陆，进行解锁: </p><p><code>SQL&gt; alter user myuser account unlock;</code></p><blockquote><p>出处:<a href="https://www.cnblogs.com/DaweiJ/articles/8984200.html" target="_blank" rel="noopener">https://www.cnblogs.com/DaweiJ/articles/8984200.html</a></p></blockquote><p>修改密码为普通密码</p><p><code>alter user sys identified by manager;</code></p><p>修改密码为带特殊符号的密码</p><p><code>alter user lhr identified by &quot;l@hr&quot;;</code></p><blockquote><p>出处：<a href="https://www.cnblogs.com/lhrbest/p/6560906.html" target="_blank" rel="noopener">https://www.cnblogs.com/lhrbest/p/6560906.html</a></p></blockquote><p>主机认证（需要登录用户为管理员，计算机–管理本地用户和组–组–ora_dba 其中的成员都是数据库管理员）</p><p>如果不是数据库管理员登录会显示权限不足</p><p>管理员可以用 sqlplus / as sysdba 登录</p><p>/ 前后用户密码任意，可以不填，登录用户都为 sys</p><h5 id="sql-与-sqlplus"><a href="#sql-与-sqlplus" class="headerlink" title="sql 与 sqlplus"></a>sql 与 sqlplus</h5><ul><li><p>sql 命令不能缩写</p><p>select</p><p>insert</p><p>update</p><p>delete</p></li><li><p>sqlpuls 命令能缩写</p><p>desc（describe）</p><p>ed（edit）</p><p>c（change）</p><p>for（format）</p><p>col（column）</p></li></ul><a id="more"></a><p>oracle 包含空值的表达式为空</p><p>null 不等于 null，要用 is null 判断是否为 null</p><p>如果集合中含有空值 not in 不能加 null，in 中可以有 null</p><p><code>select * from emp where deptno in (10,20,null)</code>–可以</p><p><code>select * from emp where deptno not in (10,20,null)</code>– 无法查询到值</p><p>|| 用于连接字符串和查询内容</p><p><code>select ename||&#39;的薪水是&#39;||sal as 薪水 from emp</code></p><p>dual 是一张特殊的表(伪表)</p><p><code>select 3+2 as sum from dual</code></p><p><code>select concat(&#39;hello&#39;,&#39; Wrold&#39;) from dual</code> — 输出 hello World</p><hr><h5 id="过滤和排序"><a href="#过滤和排序" class="headerlink" title="过滤和排序"></a>过滤和排序</h5><p>oracle 大小写敏感，日期格式不敏感 </p><p><code>select * from v$nls_parameters</code></p><p>这个表的字段表示了 oracle 的日期格式</p><p><code>alter session set NLS_DATE_FORMAT=&#39;yyyy-mm-dd&#39;;</code></p><p>将日期格式变为 2019-06-3 的格式</p><p><code>select * from emp where hiredate = &#39;2019-06-3&#39;</code></p><p>查询日期为当前日期的字段</p><p>恢复 oracle 默认字段</p><p><code>alter session set NLS_DATE_FORMAT=&#39;DD-MON-RR&#39;</code></p><hr><h5 id="plsql-语句"><a href="#plsql-语句" class="headerlink" title="plsql 语句"></a>plsql 语句</h5><p><code>a number := 0;</code></p><p>等于 java 的 <code>int a = 0</code></p><p>查询值（包含边界，大于等于，小于等于）在两个值之间，大小值不能换位置</p><p><code>select * from emp where sal between 1000 and 2000</code></p><p>查询以 A 开头名称的人</p><p><code>select *from emp where ename like &#39;A%&#39;</code></p><p>查询四个名称的人</p><p><code>select *from emp where ename like &#39;____&#39;</code></p><p>查询名字中带有 _  的人,因为 \ % 在 oracle 中都为特殊含义的字符，所以需要用 escape 定义一个转义字符</p><p><code>select * from emp where ename like &#39;%\_%&#39; escape &#39;\&#39;</code></p><hr><h5 id="order-排序"><a href="#order-排序" class="headerlink" title="order 排序"></a>order 排序</h5><p>order 作用于后面所有的列</p><p>order 排序，可以重新名字段，并根据字段排序，desc 逆序</p><p>order by 后可以加 列名、表达式、别名、序号</p><p><code>select empno,ename,sal,sal*12 年薪from emp order by 年薪 desc;</code></p><p>4代表查询的第四个字段，所以就是按年薪排序，序号不能查询查询的列数</p><p><code>select empno,ename,sal,sal*12 年薪from emp order by 4 desc;</code></p><p>双列排序查询，先按照第一列5降序排列，如果5相同，则按照4降序排列，desc 只作用于最相近的列，如果想多个降序，则放置多个 desc</p><p><code>select empno,ename,sal,sal*12 年薪,deptnofrom emp order by 5 desc,4 desc;</code></p><p>因为 oralce 中默认空值最大，所以使用逆序排序时，字段为 null 的会在最前面，可以用 nulls last 将空值排序到最后</p><p><code>select * from emp order by comm descnulls last;</code></p><hr><h5 id="oracle-sql-语句优化"><a href="#oracle-sql-语句优化" class="headerlink" title="oracle sql 语句优化"></a>oracle sql 语句优化</h5><ol><li>尽量使用 列名 来代替 * 查询需要的字段</li><li>where 语句 解析顺序从右往左判断，and 将容易返回假的条件放右边，or 将容易返回真的放右边</li><li>如果 having 和 where（where 中不能使用多行函数） 都可以使用，尽量使用 where，where 是先过滤后分组，having 是先分组后过滤，where 效率较高。</li><li>尽量使用多表查询</li><li>尽量不使用集合运算</li></ol><ul><li><code>set timing on</code> <code>set timing off</code> 显示关闭运行 sql 的时间</li></ul><hr><h5 id="oracle-函数"><a href="#oracle-函数" class="headerlink" title="oracle 函数"></a>oracle 函数</h5><p><code>select upper(&#39;hello world&#39;) from  dual</code>转大写</p><p>lower 转小写</p><p>initcap 首字母大写</p><p>substr(a,b) – 从第一个字符串 a 中，从 b 位置开始取到最后</p><p><code>select substr(&#39;hello world&#39;,5) 子串 from dual;</code>  – o world</p><p>length,lengthb – 取字符串或字节长度</p><p><code>select length(&#39;tokyo&#39;) 字符,lengthb(&#39;tokyo&#39;) from dual;</code> – 4,4</p><p><code>select length(&#39;东京&#39;) 字符,lengthb(&#39;东京&#39;) 字节 from dual;</code> – 2,4</p><p>instr – 返回字符串中某一个字符的位置，如果没有则为 0,</p><p>select instr(‘hello world’,’ll’) 位置 from dual –3</p><p>select instr(‘hello world’,’hello’) 位置 from dual –1</p><p>lpad，rpad – 左填充，右填充</p><p><code>select lpad(&#39;ssss&#39;,20,&#39;*&#39;) 左,rpad(&#39;wwww&#39;,10,&#39;^&#39;) 右 from dual;</code> </p><p><code>select lpad(&#39;ssss&#39;,20,&#39;^w^&#39;) 左,rpad(&#39;wwww&#39;,10,&#39;^&#39;) 右 from dual;</code> – ^w^^w^^w^^w^^w^^ssss  – wwww^^^^^^</p><p>trim – 去掉前后字符串</p><p><code>select trim (&#39;h&#39; from &#39;hello worldh&#39;) from dual;</code> – ello world</p><p>replace – 替换指定字符串</p><p><code>select replace(&#39;hello world&#39;,&#39;world&#39;,&#39;sekai&#39;) from dual</code></p><p>round – 四舍五入</p><p><code>select round(45.926,2) 一,round(45.926,1) 二,round(45.926,0) 三,round(45.926,-1) 四,round(45.926,-2) 五 from dual</code> – 45.93–45.9–46–50–0</p><p><code>select sysdate from dual</code>–查询当前系统时间 – 03-6月 -19</p><p>如果需要格式化时间，可以使用 to_char</p><p><code>select  to_char(sysdate,&#39;yyyy-mm-dd hh24:mi:ss&#39;) from dual</code></p><p>查询日期可以直接加减日</p><p><code>select (sysdate-1) 昨天,sysdate 今天,(sysdate+1)明天 from dual</code></p><p>日期间可以直接相减（根据当前年月时分秒减去另一个时间），不能直接相加</p><p><code>select ename,sysdate,hiredate,round((sysdate-hiredate),2) 天,round((sysdate-hiredate)/7,2) 星期,round((sysdate-hiredate)/30,2) 月,round((sysdate-hiredate)/365,2) 年 from emp;</code></p><p>计算两个日期间的月份差</p><p><code>months_between(sysdate,hiredate)</code></p><p>将一个日期加上53个月</p><p><code>select add_months(sysdate,53) from dual</code>;</p><p>计算下个星期几</p><p><code>select next_day(sysdate,&#39;星期五&#39;) from dual</code></p><p>显示数据类型转换，将 num 类转换成金额 ￥999,999.99 的类型</p><p><code>select to_char(sal,&#39;L999,999.99&#39;) from emp</code></p><p> 隐式数据类型转换，查询 222 跟 ‘222’ 都可查到值，因为 oracle 进行了隐式数据转换</p><p>如果直接相加，comm 为空时，整个计算值为空（null）</p><p><code>select sal*12 + comm from emp</code></p><p>所以使用滤空函数，当 comm 为 null 时，返回 0，sal+comm 的值为 sal</p><p><code>select sal*12+nvl2(comm,comm,0) from emp</code></p><p>如果 a=b ,返回 null，否则返回 a </p><p>nullif(a,b)</p><p>用于从左往右返回查询字段中第一个不为空的值 (comm 不为空，返回 comm；comm 为空，sal 不为空则返回 sal，如果都为空，返回空 null）</p><p><code>select comm,sal,coalesce(comm,sal) &quot;第一个不为 null 的值&quot;from emp</code></p><p>case 表达式，类似于 java 中 if else</p><p><code>select ename,job,sal 涨前,  case job when &#39;PRESIDENT&#39; then sal+1000           when &#39;MANAGER&#39; then sal+800           else sal+400  end 涨后 from emp</code></p><p>decode 函数作用与 case 一致</p><p><code>select ename,job,sal 涨前,      decode(job,&#39;PRESIDENT&#39;,sal+1000,                &#39;MANAGER&#39;,sal+800,                        sal+400) 涨后from emp</code></p><p>根据个人工资跟 2000 取余，来判断税率,TRUNC 进行</p><p><code>select ename,sal,  DECODE (TRUNC(sal/2000,0),                0,0.00,                1,0.09,                2,0.20,                3,0.30,                4,0.40,                5,0.42,                6,0.44,                  0.45) TAX_RATEFROM empWHERE deptno = 10;</code></p><hr><h5 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h5><p>取 count(*) 时会取到所有的 comm 值，count(comm) 跟 avg(comm) 会取到不为空的值</p><p><code>select sum(comm)/count(*) 一,sum(comm)/count(comm) 二,avg(comm) 三from emp</code></p><p>取不重复的个数时，distinct 需要写在 () 中</p><p><code>select count(distinct deptno) from emp</code></p><p>包含在 select 列表中，未包含在组函数中的列必须包含在 group by 子句中</p><p><code>select deptno,count(ename)from emp</code> – 报错ORA-00937: 不是单组分组函数  “not a single-group group function”</p><p>需要</p><p><code>select deptno,count(ename)from emp group by deptno;</code></p><p>先根据第一个列分组 deptno，如果第一个列相同，再根据第二个列分组 job</p><p><code>select deptno,job,sum(sal)from emp group by deptno,joborder by 1;</code></p><p>where 和 having 的区别，where 内不能使用多行函数</p><h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><p>连接条件的作用是避免使用两个表的笛卡尔积的全集，至少有 N-1 个连接条件，N 表示表的个数</p><p>等值连接</p><p>不等值连接</p><p>外连接：把某些不成立的记录，仍然包含在最后的结果中</p><ul><li><p>左外连接，当条件不成立时，等号左边的表仍然被包含在最后的结果中 where e.deptno=d.deptno(+)</p></li><li><p>右外连接，当条件不成立时，等号右边的表仍然被包含在最后的结果中</p></li></ul><p>自连接：通过一张表的多个别名，将一张表视为多张表</p><p>将一张员工表分为员工和老大表，进行自连接</p><p><code>select e.ename 员工姓名,b.ename 老大姓名from emp e,emp b where e.mgr = b.empno</code></p><p>自连接不适合操作大表，得到的结果比较简明直观</p><p>自连接笛卡尔集至少是一张表的数据平方</p><p>层次查询–是单表查询，不会产生笛卡尔积，但是结果不直观</p><p>level 是伪列，用于层级查询看位于第几层的值，</p><p><code>select level,empno,ename,mgr from emp connect by prior empno=mgrstart with mgr is nullorder by 1</code></p><hr><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><ul><li>查询工资比30号部门所有员工高的员工信息</li></ul><p>all:和集合中的所有值比较</p><p><code>select *from empwhere sal &gt; (select max(sal) from emp where deptno=30)</code></p><p>或</p><p><code>select *from empwhere sal &gt; all (select sal from emp where deptno=30)</code></p><ul><li>查询工资比30号部门任意一个员工高的员工信息</li></ul><p>any: 和集合中的任意一个值比较</p><p><code>select *  from emp  where sal &gt; any (select sal from emp where deptno=30);</code></p><p>或</p><p><code>select *  from emp  where sal &gt; (select min(sal) from emp where deptno=30);</code></p><ul><li>单行空值问题</li></ul><p>子查询为空时，主查询永远不等于空（空值不等于空）</p><ul><li>多行子查询中的null</li></ul><p>where deptno in (10,50,null);</p><p>等价于where deptno=10 or deptno=50 or deptno=null</p><p>deptno not in (10,50,null);</p><p>等价于where not (deptno=10 or deptno=50 or deptno=null)</p><hr><h5 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h5><p>集合运算的运算符</p><p>union - 获得两个表及表之间交集的部分一次</p><p>根据缺失的数据类型进行补充</p><p><code>select deptno,job,sum(sal) from emp group by deptno,jobunionselect deptno,to_char(null),sum(sal) from emp group by deptnounionselect to_number(null),to_char(null),sum(sal) from emp</code></p><p>intersect - 获得两个表之间的交集部分</p><p><code>select ename,sal from empwhere sal between 700 and 1300intersectselect ename,sal from empwhere sal between 1201 and 1400</code></p><p>minus - 获得第一个表的全部，减去和第二个表的交集部分</p><p><code>select ename,sal from empwhere sal between 700 and 1300minusselect ename,sal from empwhere sal between 1201 and 1400</code></p><hr><h5 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h5><p>DML(Data manipulation Language 数据操作语言)：select insert update delete</p><p>DDL(Data Definition Language 数据定义语言)：create table ,alter table (修改表),truncate table ,drop table </p><p>​                                                                create /drop view(视图) ,sequence(序列),index(索引),synonym(同义词)</p><p>DCL(Data Controller Language 数据控制语言):grant(授权)，revoke(撤销权限)</p><hr><h5 id="地址符"><a href="#地址符" class="headerlink" title="地址符"></a>地址符</h5><p><code>insert into emp(empno,ename,sal,deptno) values(&amp;empno,&amp;ename,&amp;sal,&amp;deptno)</code></p><p>&amp; 后可以跟任何名称，但是一般与列名一致，使用了该语句后会让你进行对应值的输入，并且输入完成可以用 / </p><p>来重复调用该语句 </p><hr><h5 id="去除碎片"><a href="#去除碎片" class="headerlink" title="去除碎片"></a>去除碎片</h5><ol><li><p>alter table &lt;表名&gt; move;</p></li><li><p>数据导出后再导入 –&gt; 导出的文件为二进制的 dmp 文件</p><p>导出 exp（expdp） 导入 imp（impdp）</p></li></ol><p>delete和truncate的区别<br>1、delete逐条删除；truncate先摧毁表 再重建2<br>2、（*）delete是DML  truncate是DDL<br> (可以回滚)         （不可以回滚）<br>3、delete不会释放空间 truncate会<br>4、delete会产生碎片 truncate不会<br>5、delete可以闪回(flashback)  truncate不可以</p><p>truncate 在 oracle 中比 delete 慢</p><p>在 mysql 中比 delete 快</p><p>oracle 能 undo 数据（还原数据）</p><p>oracle 中 delete 删除的数据能 rollback 也可以闪回</p><hr><h5 id="oracle-删除表空间及其数据文件"><a href="#oracle-删除表空间及其数据文件" class="headerlink" title="oracle 删除表空间及其数据文件"></a>oracle 删除表空间及其数据文件</h5><p>删除前后可以查看磁盘所占用情况</p><p><code>df -hl</code>  显示指定磁盘文件的可用空间。如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示</p><p>-h 方便阅读方式显示</p><p>-H 等于“-h”，但是计算式，1K=1000，而不是1K=1024</p><p>-l 只显示本地文件系统</p><blockquote><p><a href="https://www.cnblogs.com/jxhd1/p/6700300.html" target="_blank" rel="noopener">linux命令df中df -h和df -i的区别</a></p></blockquote><p> //删除用户以及用户所有的对象 </p><p>drop user username cascade;   </p><p> //删除表空间<br>前提：删除表空间之前要确认该表空间没有被其他用户使用之后再做删除 </p><p>drop tablespace tablename including contents and datafiles cascade onstraints;   </p><blockquote><p>including contents 删除表空间中的内容，如果删除表空间之前表空间中有内容，而未加此参数，表空间删不掉，所以习惯性的加此参数<br>including datafiles 删除表空间中的数据文件<br>cascade constraints 同时删除tablespace中表的外键参照</p></blockquote><blockquote><p>你数据库版本是多少10G之前的我是无能为力，只能用非常笨重的方法，就是先EXP该表空间，然后删除重建，在IMP进去<br>10GR2的话<br>确认表空间有几个数据文件<br>select file_name,file_id from dba_data_files where tablespace_name=’表空间名’<br>确认表空间未被存储占用：<br>select segment_name,file_id,blocks from dba_extents where file_id=表空间号;<br>–表空间号（select file#,name from v$datafile; ）这么查<br>如果是没有查询结果说明你可以做下面的操作了<br>alter tablespace 表空间名 drop datafile ‘<a href="https://www.baidu.com/s?wd=绝对路径&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">绝对路径</a>‘</p></blockquote><p>清理表空间：</p><p>清空回收站：purge recyclebin – drop 表后可能还会在回收站，内存未释放，使用清理回收站命令</p><p>删除表并释放表空间：drop table \<tablename> purge;</tablename></p><p>删除表数据并释放表空间：truncate table \&lt;table_name&gt;;</p><hr><h5 id="oracle-事务"><a href="#oracle-事务" class="headerlink" title="oracle 事务"></a>oracle 事务</h5><p>oracle 事务</p><p>起始标志：DML 语句 ，insert 与 update  是 DML 语句需要提交事务</p><p>结束标志：提交：显示提交（commit）/隐式提交：正常退出 DDL DCL 语句 （create table）将会提交这句前未提交的事务</p><p>回滚：显式回滚：rollback      隐式回滚：非正常退出 掉电 冗机</p><p>所以 DDL 语句是不可回滚的</p><p>oracle 支持 sql 99 的 不可重复读 和 串行化 ，另外还有一个只读 （read only）</p><hr><h5 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h5><ul><li>rownum 只能按照默认的顺序生成</li></ul><p>根据工资选出工资最高的三人</p><p><code>select rownum,empno,ename,salfrom (select * from emp order by sal desc)where rownum &lt;= 3;</code></p><p>行号只能按照默认的顺序生成，如果使用排序，行号会跟着排序被打乱</p><p>如果要根据行号进行筛选，可以先进行一次子查询，再在外部进行筛选</p><p>如果在此语句进行 rownum 的 &gt;= 或 &gt; 判断，那么查询结果为空</p><ul><li>rownum 只能使用 &lt; &lt;= 不能使用 &gt; &gt;=</li></ul><p>使用 rownum 分页查询 5-8 行的数据</p><ul><li>ERROR at line 5:<br>ORA-00911: invalid character</li></ul><p>如果在 sqlplus 的 edit 中进行修改语句，结尾加了 ; 会显示非法字符</p><p>先取出根据工资排序的全部员工，然后再其中查询员工的 rownum 号，可以使用 &lt;= </p><p>然后 &gt;= 需要在外层再进行使用，所以在外侧再嵌套一层查询语句</p><p><code>select * from   (select rownum r,e1.* from     (select * from emp order by sal) e1   where rownum&lt;=8) where r &gt;= 5/</code></p><hr><h5 id="标准表、索引表、临时表"><a href="#标准表、索引表、临时表" class="headerlink" title="标准表、索引表、临时表"></a>标准表、索引表、临时表</h5><p>临时表：当事务提交（commit）或会话（exit 退出 sql）结束时，表中的数据自动删除</p><p>临时表是根据事务或会话创建的表</p><p>查询所有工资大于平均工资的员工信息</p><p><code>select e.empno,e.ename,e.sal,d.avgsal  from emp e,(select deptno,avg(sal) avgsal from emp group by deptno) dwhere e.deptno = d.deptno and e.sal &gt; d.avgsal</code></p><p><code>select empno,ename,sal, (select avg(sal) from emp where deptno = e.deptno) avgsalfrom emp ewhere sal &gt;  (select avg(sal) from emp where deptno = e.deptno)</code></p><hr><h5 id="oracle-查询某个时间点的数据"><a href="#oracle-查询某个时间点的数据" class="headerlink" title="oracle 查询某个时间点的数据"></a>oracle 查询某个时间点的数据</h5><p><code>select * from 表名 as of timestamp to_timestamp(&#39;2012-7-5 17:00:10&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;)</code></p><p>后可以加筛选条件 where  ….</p><blockquote><p>参考：<a href="https://chwshuang.iteye.com/blog/1578428" target="_blank" rel="noopener">https://chwshuang.iteye.com/blog/1578428</a></p></blockquote><hr><p>oracle 查询数据库操作记录</p><p><code>select t.SQL_TEXT, t.FIRST_LOAD_TIME</code></p><p><code>from v$sqlarea t</code></p><p><code>where t.FIRST_LOAD_TIME like &#39;2010-06-30%&#39;</code></p><p><code>order by t.FIRST_LOAD_TIME desc</code></p><blockquote><p>参考：<a href="https://blog.csdn.net/scgyus/article/details/79237024" target="_blank" rel="noopener">https://blog.csdn.net/scgyus/article/details/79237024</a></p></blockquote><hr><h5 id="行地址-rowid"><a href="#行地址-rowid" class="headerlink" title="行地址 rowid"></a>行地址 rowid</h5><p>跟 rownum 一样是伪列。如果需要查询伪列的值，需要在查询语句中写出来</p><hr><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><p>创建一张表，导入从另一张表中查询到的数据</p><p><code>create table empinfoasselect e.empno,e.ename,e.sal,e.sal*12 annsal,d.dnamefrom emp e,dept dwhere e.deptno = d.deptno</code></p><p><code>create table loginuser_bak as select * from loginuser_transer</code></p><hr><h5 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h5><p>添加 photo 字段</p><p><code>alter table test1 add photo blob;</code></p><p>修改字段长度</p><p><code>alter table test1 modify tname varchar2(40);</code></p><p>删除 photo 字段</p><p> <code>alter table test1 drop column photo;</code></p><p>重命名 tname 为 username</p><p><code>alter table test1 rename column tname to username;</code></p><hr><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><p>查询所有表</p><p><code>select  * from tab;</code></p><p>显示</p><p>TNAME                          TABTYPE  CLUSTERID</p><p>DEPT                           TABLE<br>EMP                            TABLE<br>BONUS                          TABLE<br>SALGRADE                       TABLE<br>TEST1                          TABLE<br>EMP20                          TABLE<br>EMPINFO                        TABLE<br>EMP10                          TABLE<br>TESTSAVEPOINT                  TABLE<br>BIN$CHBIbAn4SZmBTjzBcs2+xQ==$0 TABLE<br>TESTDELETE                     TABLE<br>BUFFERTEST1                    TABLE</p><p><code>drop table ***</code></p><p>删除表后会放到回收站</p><p>查询所有表显示</p><p>TNAME                          TABTYPE  CLUSTERID</p><p>DEPT                           TABLE<br>EMP                            TABLE<br>BONUS                          TABLE<br>SALGRADE                       TABLE<br>TEST1                          TABLE<br>EMP20                          TABLE<br>EMPINFO                        TABLE<br>BIN$JOWGLe4TRn2tdBEYzcAF6g==$0 TABLE<br>EMP10                          TABLE<br>TESTSAVEPOINT                  TABLE<br>BIN$CHBIbAn4SZmBTjzBcs2+xQ==$0 TABLE<br>BUFFERTEST1                    TABLE</p><p>多出一条乱码状数据</p><p>查看回收站</p><p><code>show recyclebin;</code></p><p>显示</p><p>ORIGINAL NAME    RECYCLEBIN NAME                OBJECT TYPE  DROP TIME</p><p>TESTDELETE       BIN$JOWGLe4TRn2tdBEYzcAF6g==$0 TABLE        2019-06-27:19:31:29<br>TESTDELETE       BIN$CHBIbAn4SZmBTjzBcs2+xQ==$0 TABLE        2019-06-12:16:02:16</p><p>会有一条跟刚才乱码状代码一样的数据，就是刚才删除的数据</p><p>清空回收站</p><p><code>purge recyclebin;</code></p><p>继续查询回收站显示为空</p><p>回收站中的数据可以通过</p><p><code>select * from &quot;乱码状回收站表名&quot;;</code> </p><p>查询出来</p><p>注意：管理员没有回收站</p><p>闪回可以恢复回收站的内容,恢复表 TESTSAVEPOINT </p><p><code>flashback table TESTSAVEPOINT to before drop;</code></p><hr><h5 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h5><p>使用约束可以更好地保证数据的完整性</p><hr><h5 id="java-查询-oracle-的表结构"><a href="#java-查询-oracle-的表结构" class="headerlink" title="java 查询 oracle 的表结构"></a>java 查询 oracle 的表结构</h5><p>因为出现 java 插入数据库异常：</p><p>分析原因：</p><p>字段名或者表名写错了</p><p>字段包含了oracle的关键字，把报错的字段用双引号括起来试试</p><p>使用如下方式查询 oracle 表结构，然后发现连错了数据库，测试数据库跟另一个数据库有同样的表，但是更改字段值更改了其中一个，导致报错 <code>ora-00904 标识符无效</code> 因为没有该字段却用了 insert 该字段导致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> astar.sutil.db;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 鲁炬</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbMetaDataUtilTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">    String user = <span class="string">"user"</span>;</span><br><span class="line">    String password = <span class="string">"pwd"</span>;</span><br><span class="line">    String jdbcDriver = <span class="string">"com.ibm.db2.jcc.DB2Driver"</span>;</span><br><span class="line">    String jdbcUrl = <span class="string">"jdbc:db2://localhost:50000/DBNAME"</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Class.forName(jdbcDriver);</span><br><span class="line">    conn = DriverManager.getConnection(jdbcUrl, user, password);</span><br><span class="line"> </span><br><span class="line">    PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      pst = conn.prepareStatement(<span class="string">"select * from t_table where 1=2"</span>);</span><br><span class="line">      ResultSetMetaData rsd = pst.executeQuery().getMetaData();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rsd.getColumnCount(); i++) &#123;</span><br><span class="line">        System.out.print(<span class="string">"java类型："</span>+rsd.getColumnClassName(i + <span class="number">1</span>));</span><br><span class="line">        System.out.print(<span class="string">"  数据库类型:"</span>+rsd.getColumnTypeName(i + <span class="number">1</span>));</span><br><span class="line">        System.out.print(<span class="string">"  字段名称:"</span>+rsd.getColumnName(i + <span class="number">1</span>));</span><br><span class="line">        System.out.print(<span class="string">"  字段长度:"</span>+rsd.getColumnDisplaySize(i + <span class="number">1</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        pst.close();</span><br><span class="line">        pst = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>出处：<a href="https://blog.csdn.net/rpg_marker/article/details/8204710" target="_blank" rel="noopener">https://blog.csdn.net/rpg_marker/article/details/8204710</a></p></blockquote><hr><h5 id="oracle-监听端口"><a href="#oracle-监听端口" class="headerlink" title="oracle 监听端口"></a>oracle 监听端口</h5><p><code>cd /etc</code></p><p><code>cat hosts</code></p><p>可以看到当前 oracle 数据库服务器配置的 hosts 信息</p><p><code>cd $ORACLE_HOME</code></p><p><code>more tnsnames.ora</code></p><p>可以查看对应的 tns 串</p><p><code>lsnrctl status</code></p><p>可以查看监听的服务器地址</p><p>需要选择的 tns 串是该服务器所监听的服务器地址才可以访问该数据库</p><hr><h5 id="oracle-表空间"><a href="#oracle-表空间" class="headerlink" title="oracle 表空间"></a>oracle 表空间</h5><p>创建一个用户</p><p><code>create user crow indentified by song;</code></p><p>创建表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> tablespace_name</span><br><span class="line"><span class="keyword">logging</span></span><br><span class="line"><span class="keyword">datafile</span> <span class="string">'/path/dbf_file_name.dbf'</span></span><br><span class="line"><span class="keyword">size</span> <span class="number">1024</span>m</span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span> </span><br><span class="line"><span class="keyword">next</span> <span class="number">128</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m</span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br></pre></td></tr></table></figure><p>查询名为 XXX 的表空间</p><p><code>select * from user_tablespace where tablespace_name = &#39;tablespace_name&#39;</code></p><p>oracle添加用户使用表空间报错<br>ORA-10615: Invalid tablespace type for temporary tablespace</p><p>因为为用户的 temporary tablesace 创建了一个 tablespace 导致该错误，删除该表空间，使用 <code>create temporary tablespace XXX</code> 创建临时表空间</p><p>创建临时表空间</p><p>不能有 logging ，需要将 datafile 改为 tempfile</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> tablespace_name_temp</span><br><span class="line">tempFILE <span class="string">'/path/dbf_file_name.dbf'</span></span><br><span class="line"><span class="keyword">size</span> <span class="number">1024</span>m</span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span> </span><br><span class="line"><span class="keyword">next</span> <span class="number">128</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m</span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br></pre></td></tr></table></figure><hr><h5 id="查询表空间物理文件名大小占用率"><a href="#查询表空间物理文件名大小占用率" class="headerlink" title="查询表空间物理文件名大小占用率"></a>查询表空间物理文件名大小占用率</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">b.file_name 物理文件名,</span><br><span class="line">b.tablespace_name 表空间,</span><br><span class="line">b.bytes/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span> 大小G,</span><br><span class="line">(b.bytes-<span class="keyword">sum</span>(nvla.bytes,<span class="number">0</span>)))/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span> 已使用G，</span><br><span class="line"><span class="keyword">substr</span>((b.bytes-<span class="keyword">sum</span>(nvl(a.bytes,<span class="number">0</span>)))/(b.bytes)*<span class="number">100</span>,<span class="number">1</span>,<span class="number">5</span>)利用率,</span><br><span class="line"><span class="keyword">from</span> dba_free_space a.dba_data_files b</span><br><span class="line"><span class="keyword">where</span> a.file_id = b.file_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> b.tablespace_name,b.file_name,b.bytes</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> b.tablespace_name;</span><br></pre></td></tr></table></figure><h6 id="查看一个表空间下所有的表"><a href="#查看一个表空间下所有的表" class="headerlink" title="查看一个表空间下所有的表"></a>查看一个表空间下所有的表</h6><p><code>select * from all_tables where tablespace_name=&#39;TABLE_SIT&#39;</code></p><h6 id="查看所有使用该表空间的用户"><a href="#查看所有使用该表空间的用户" class="headerlink" title="查看所有使用该表空间的用户"></a>查看所有使用该表空间的用户</h6><p><code>select owner from dba_tables where tablespace_name = &#39;TABLE_SIT&#39; group by owner;</code></p><h6 id="查看一个表空间下某个用户的所有表"><a href="#查看一个表空间下某个用户的所有表" class="headerlink" title="查看一个表空间下某个用户的所有表"></a>查看一个表空间下某个用户的所有表</h6><p><code>select * from all tables where tablespace_name=&#39;TABLE_SIT&#39; and owner = &#39;USER&#39;</code></p><h6 id="查询用户表空间"><a href="#查询用户表空间" class="headerlink" title="查询用户表空间"></a>查询用户表空间</h6><p><code>select username,temporary_tablespace from dba_users;</code></p><h6 id="查询表空间剩余字节大小"><a href="#查询表空间剩余字节大小" class="headerlink" title="查询表空间剩余字节大小"></a><strong>查询表空间剩余字节大小</strong></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLESPACE_NAME, <span class="keyword">SUM</span>(<span class="keyword">BYTES</span>)/<span class="number">1024</span>/<span class="number">1024</span> <span class="keyword">AS</span> <span class="string">"FREE SPACE(M)"</span></span><br><span class="line">  <span class="keyword">FROM</span> DBA_FREE_SPACE</span><br><span class="line"> <span class="keyword">WHERE</span> TABLESPACE_NAME = <span class="string">'&amp;tablespace_name'</span></span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> TABLESPACE_NAME;</span><br></pre></td></tr></table></figure><p>注：如果是临时表空间，请查询DBA_TEMP_FREE_SPACE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLESPACE_NAME, FREE_SPACE/<span class="number">1024</span>/<span class="number">1024</span> <span class="keyword">AS</span> <span class="string">"FREE SPACE(M)"</span></span><br><span class="line">  <span class="keyword">FROM</span> DBA_TEMP_FREE_SPACE</span><br><span class="line"> <span class="keyword">WHERE</span> TABLESPACE_NAME = <span class="string">'&amp;tablespace_name'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="http://blog.itpub.net/29438041/viewspace-2154446/" target="_blank" rel="noopener">Oracle临时表空间查看、添加临时表空间数据文件、修改默认临时表空间 方法！</a></p></blockquote><hr><h6 id="删除表空间报错"><a href="#删除表空间报错" class="headerlink" title="删除表空间报错"></a>删除表空间报错</h6><p><code>drop tablespace test_tb incluing contents and datafiles;</code></p><p>提示：</p><p>ORA-00604:递归SQL级别1出现错误</p><p>ORA-38301:无法对回收站中的对象执行DDL/DML</p><p>查询表空间对应的用户，在用户下执行</p><p><code>select segment_name,segment_type,owner from dba_segments where tablespace_name=&#39;TEST_TB&#39;;</code></p><p>1.用该表空间所对应用户登录</p><p>2.执行purge recyclebyin;</p><p>3.重新执行 drop tablespace test_tb incluing contents and datafiles;</p><blockquote><p>参考：<a href="https://www.linuxidc.com/Linux/2015-09/122926.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2015-09/122926.htm</a></p></blockquote><p>删除后表空间未释放</p><p>linux环境下删除用drop tablespace XXX including contents and datafiles删除表空间后，磁盘空间不释放。</p><p>用lsof -n | grep deleted来查看还在使用删除掉文件的pid，直接kill掉就可以了。</p><blockquote><p>出处：<a href="https://blog.csdn.net/jolly10/article/details/81106343" target="_blank" rel="noopener">https://blog.csdn.net/jolly10/article/details/81106343</a></p></blockquote><hr><h5 id="oracle-建表语句错误"><a href="#oracle-建表语句错误" class="headerlink" title="oracle 建表语句错误"></a>oracle 建表语句错误</h5><p>在一个用户下如果不小心使用了 create table “sss.table”()</p><p>的建表语句，oracle 不会把表建在 sss 这个用户下，而是当前用户下创建 “sss.table” 表，需要用 select * from “sss.table” 才能查询到该表，删除也是同样</p><hr><h5 id="oracle-查询归档日志是否打开"><a href="#oracle-查询归档日志是否打开" class="headerlink" title="oracle 查询归档日志是否打开"></a>oracle 查询归档日志是否打开</h5><p><code>select name,log_mode from v$database;</code></p><blockquote><p>参考：<a href="http://www.worldwarner.com/m/view.php?aid=20107" target="_blank" rel="noopener">http://www.worldwarner.com/m/view.php?aid=20107</a></p></blockquote><hr><h5 id="执行-sql-脚本文件"><a href="#执行-sql-脚本文件" class="headerlink" title="执行 sql 脚本文件"></a>执行 sql 脚本文件</h5><p>先登录sqlplus</p><p>然后在用</p><p>@全路径/文件名</p><p>SQL&gt;@/home/oracle/tmp.sql<br>命令来执行sql脚本文件。  </p><blockquote><p>参考：<a href="https://blog.csdn.net/nvd11/article/details/8749322" target="_blank" rel="noopener">https://blog.csdn.net/nvd11/article/details/8749322</a></p></blockquote><hr><h5 id="insert-插入日期问题"><a href="#insert-插入日期问题" class="headerlink" title="insert 插入日期问题"></a>insert 插入日期问题</h5><p>使用 to_date 转换格式</p><p>to_date(‘2007-12-28 10:07:24’ , ‘yyyy-mm-dd hh24:mi:ss’)</p><blockquote><p>参考：jb51.net/article/51788.htm</p></blockquote><hr><h5 id="ORA-28000-the-account-is-locked"><a href="#ORA-28000-the-account-is-locked" class="headerlink" title="ORA-28000: the account is locked"></a>ORA-28000: the account is locked</h5><p>用户登录错误次数过多导致被锁用户</p><p>使用另外的用户登录该数据库，也可使用 sys/sys asdba 登录</p><p><code>&quot;SELECT RESOURCE_NAME, LIMIT FROM DBA_PROFILES WHERE RESOURCE_NAME = &#39;FAILED_LOGIN_ATTEMPTS&#39;;</code></p><p>查找登录信息，会有一个登录错误次数限制</p><p>使用命令 <code>alter user xxx account unlock;</code></p><p>进行解锁，最后 commit 即可解锁 xxx 用户</p><blockquote><p>参考：<a href="https://blog.csdn.net/Hello_World_QWP/article/details/78392129" target="_blank" rel="noopener">https://blog.csdn.net/Hello_World_QWP/article/details/78392129</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;登录：（su - oracle）&lt;/p&gt;
&lt;p&gt;密码认证&lt;/p&gt;
&lt;p&gt;sqlplus &lt;a href=&quot;mailto:scott/tiger@192.168.194.128&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;scott/tiger@192.168.194.128&lt;/a&gt;/orcl&lt;/p&gt;
&lt;p&gt;sqlplus 显示命令不存在(可能使用了 su oracle 登录 oracle ，exit 后选择 su - oracle 登录)&lt;/p&gt;
&lt;h5 id=&quot;解锁用户-amp-修改密码&quot;&gt;&lt;a href=&quot;#解锁用户-amp-修改密码&quot; class=&quot;headerlink&quot; title=&quot;解锁用户&amp;amp;修改密码&quot;&gt;&lt;/a&gt;解锁用户&amp;amp;修改密码&lt;/h5&gt;&lt;p&gt;解锁方法是用system用户（或者具有DBA角色的用户）登陆，进行解锁: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SQL&amp;gt; alter user myuser account unlock;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;出处:&lt;a href=&quot;https://www.cnblogs.com/DaweiJ/articles/8984200.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/DaweiJ/articles/8984200.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改密码为普通密码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alter user sys identified by manager;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改密码为带特殊符号的密码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alter user lhr identified by &amp;quot;l@hr&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;出处：&lt;a href=&quot;https://www.cnblogs.com/lhrbest/p/6560906.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/lhrbest/p/6560906.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主机认证（需要登录用户为管理员，计算机–管理本地用户和组–组–ora_dba 其中的成员都是数据库管理员）&lt;/p&gt;
&lt;p&gt;如果不是数据库管理员登录会显示权限不足&lt;/p&gt;
&lt;p&gt;管理员可以用 sqlplus / as sysdba 登录&lt;/p&gt;
&lt;p&gt;/ 前后用户密码任意，可以不填，登录用户都为 sys&lt;/p&gt;
&lt;h5 id=&quot;sql-与-sqlplus&quot;&gt;&lt;a href=&quot;#sql-与-sqlplus&quot; class=&quot;headerlink&quot; title=&quot;sql 与 sqlplus&quot;&gt;&lt;/a&gt;sql 与 sqlplus&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sql 命令不能缩写&lt;/p&gt;
&lt;p&gt;select&lt;/p&gt;
&lt;p&gt;insert&lt;/p&gt;
&lt;p&gt;update&lt;/p&gt;
&lt;p&gt;delete&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sqlpuls 命令能缩写&lt;/p&gt;
&lt;p&gt;desc（describe）&lt;/p&gt;
&lt;p&gt;ed（edit）&lt;/p&gt;
&lt;p&gt;c（change）&lt;/p&gt;
&lt;p&gt;for（format）&lt;/p&gt;
&lt;p&gt;col（column）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>e3mall_later</title>
    <link href="http://yoursite.com/2019/03/22/e3mall-later/"/>
    <id>http://yoursite.com/2019/03/22/e3mall-later/</id>
    <published>2019-03-22T02:14:25.000Z</published>
    <updated>2019-04-10T15:22:28.126Z</updated>
    
    <content type="html"><![CDATA[<p>zookeeper 在与 SolrCloud 搭配使用时，当做一个集群管理工具</p><p>zookeeper 在与 dubbo 搭配使用时，作为一个注册中心</p><p>solr 集群版与普通版配置 spring/applicationContext-solr.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--初始化一个 SolrServer--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;bean id="httpSolrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer"&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;constructor-arg index="0" value="http://192.168.25.128:8080/solr"/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--集群版 solrServer--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cloudSolrServer"</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.client.solrj.impl.CloudSolrServer"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"zkHost"</span> <span class="attr">value</span>=<span class="string">"192.168.25.128:2181,192.168.25.128:2182,192.168.25.128:2183"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultCollection"</span> <span class="attr">value</span>=<span class="string">"collection2"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>solr 查询 impl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.e3mall.search.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.e3mall.common.pojo.SearchResult;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.search.dao.SearchDao;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.search.service.SearchService;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrQuery;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServiceImpl</span> <span class="keyword">implements</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchDao searchDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SearchResult <span class="title">search</span><span class="params">(String keyword, <span class="keyword">int</span> page, <span class="keyword">int</span> rows)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个 SolrQuery 对象</span></span><br><span class="line">        SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line">        <span class="comment">//创建查询条件,keyword 为空时，查询到空字符串，没有结果</span></span><br><span class="line">        solrQuery.setQuery(keyword);</span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        <span class="keyword">if</span>(page&lt;=<span class="number">0</span>)</span><br><span class="line">            page=<span class="number">1</span>;</span><br><span class="line">        solrQuery.setStart((page-<span class="number">1</span>)*rows);</span><br><span class="line">        solrQuery.setRows(rows);</span><br><span class="line">        <span class="comment">//设置默认搜索域</span></span><br><span class="line">        solrQuery.set(<span class="string">"df"</span>,<span class="string">"item_title"</span>);</span><br><span class="line">        <span class="comment">//开启高亮显示</span></span><br><span class="line">        solrQuery.setHighlight(<span class="keyword">true</span>);</span><br><span class="line">        solrQuery.addHighlightField(<span class="string">"item_title"</span>);</span><br><span class="line">        solrQuery.setHighlightSimplePre(<span class="string">"&lt;em style='color:red'&gt;"</span>);</span><br><span class="line">        solrQuery.setHighlightSimplePost(<span class="string">"&lt;/em&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 dao 执行查询</span></span><br><span class="line">        SearchResult searchResult = searchDao.search(solrQuery);</span><br><span class="line">        <span class="comment">//计算总页数</span></span><br><span class="line">        <span class="keyword">long</span> recourdCount = searchResult.getRecourdCount();</span><br><span class="line">        <span class="keyword">int</span> totalPage = (<span class="keyword">int</span>) (recourdCount/rows);</span><br><span class="line"><span class="comment">//        如果除不尽，则总页数加1</span></span><br><span class="line">        <span class="keyword">if</span>(recourdCount % rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            totalPage++;</span><br><span class="line">        &#125;</span><br><span class="line">        searchResult.setTotalPages(totalPage);</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> searchResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品搜索 dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.e3mall.search.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.e3mall.common.pojo.SearchItem;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.common.pojo.SearchResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.response.QueryResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.common.SolrDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.common.SolrDocumentList;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品搜索 dao</span></span><br><span class="line"><span class="comment"> * param 为查询条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SolrServer solrServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SearchResult <span class="title">search</span><span class="params">(SolrQuery query)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据 query 查询条件查询</span></span><br><span class="line">        QueryResponse queryResponse = solrServer.query(query);</span><br><span class="line">        <span class="comment">//取查询结果</span></span><br><span class="line">        SolrDocumentList solrDocumentList = queryResponse.getResults();</span><br><span class="line">        <span class="comment">//取查询结果总记录数</span></span><br><span class="line">        <span class="keyword">long</span> numFound = solrDocumentList.getNumFound();</span><br><span class="line">        SearchResult result = <span class="keyword">new</span> SearchResult();</span><br><span class="line">        result.setRecourdCount(numFound);</span><br><span class="line">        <span class="comment">//取商品列表，取需要高亮显示的标题</span></span><br><span class="line">        Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = queryResponse.getHighlighting();</span><br><span class="line">        String itemTitle = <span class="string">""</span>;</span><br><span class="line">        List&lt;SearchItem&gt; itemList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SolrDocument solrDocument : solrDocumentList) &#123;</span><br><span class="line">            List&lt;String&gt; list = highlighting.get(solrDocument.get(<span class="string">"id"</span>)).get(<span class="string">"item_title"</span>);</span><br><span class="line">            SearchItem item = <span class="keyword">new</span> SearchItem();</span><br><span class="line"></span><br><span class="line">            item.setId((String) solrDocument.get(<span class="string">"id"</span>));</span><br><span class="line">            <span class="comment">//取高亮显示</span></span><br><span class="line">            <span class="keyword">if</span>(list!=<span class="keyword">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                itemTitle = list.get(<span class="number">0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                itemTitle = (String) solrDocument.get(<span class="string">"item_title"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            item.setTitle(itemTitle);</span><br><span class="line">            item.setSell_point((String) solrDocument.get(<span class="string">"item_sell_point"</span>));</span><br><span class="line">            item.setPrice((Long) solrDocument.get(<span class="string">"item_price"</span>));</span><br><span class="line">            item.setImage((String) solrDocument.get(<span class="string">"item_image"</span>));</span><br><span class="line">            item.setCategory_name((String) solrDocument.get(<span class="string">"item_category_name"</span>));</span><br><span class="line"></span><br><span class="line">            itemList.add(item);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        result.setItemList(itemList);</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="activeMQ"><a href="#activeMQ" class="headerlink" title="activeMQ"></a>activeMQ</h5><p>MQ 是一个消息中间件，流行的有 ActiveMQ（apache 旗下）、RabbitMQ、kafka（大数据用）</p><p>用于实现系统间通信，解耦</p><p>有点对点模式与发布/订阅模式</p><p>整合 spring 发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.e3mall.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.MessageCreator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqSpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        初始化 spring 容器</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext-activemq.xml"</span>);</span><br><span class="line"><span class="comment">//        从 spring 容器中获得 jmsTemplete 对象</span></span><br><span class="line">        JmsTemplate jmsTemplate = applicationContext.getBean(JmsTemplate.class);</span><br><span class="line"><span class="comment">//        从容器中获得 Destination 对象</span></span><br><span class="line">        Destination destination = (Destination) applicationContext.getBean(<span class="string">"queueDestination"</span>);</span><br><span class="line"><span class="comment">//        发送消息</span></span><br><span class="line">        jmsTemplate.send(destination, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> session.createTextMessage(<span class="string">"spring jmsTemplete message"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext-activemq.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.25.128:61616"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置生产者 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，点对点的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>spring-queue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是主题目的地，一对多的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring 整合 activemq 接受消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgConsumer</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//spirng 容器初始化</span></span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext-activemq.xml"</span>);</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.25.128:61616"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，点对点的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>spring-queue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是主题目的地，一对多的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--将 cn.e3mall.search.message.MyMessageListener 注入到 spirng  配置监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myMessageListener"</span> <span class="attr">class</span>=<span class="string">"cn.e3mall.search.message.MyMessageListener"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 接收消息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueDestination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h5><p>在 resource/conf 下配置文件 log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># INFO 指输出 INFO 级别，A3 指下面带有 log4j.appender.A3 等 A3 标志的全部类型，STDOUT 同理</span><br><span class="line">log4j.rootLogger=INFO,A3,STDOUT</span><br><span class="line"># ConsoleAppender 指输出到控制台</span><br><span class="line">log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.STDOUT.layout.ConversionPattern=[%p] [%l] %10.10c - %m%n</span><br><span class="line"># RollingFileAppender 指循环输出到日志文件，文件路径与名 logs/server.log</span><br><span class="line"># MaxFileSize 指文件到达 1m 后新生成一个日志文件</span><br><span class="line">log4j.appender.A3=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.A3.file=logs/server.log</span><br><span class="line">log4j.appender.A3.MaxFileSize=1024KB</span><br><span class="line">log4j.appender.A3.MaxBackupIndex=10</span><br><span class="line">log4j.appender.A3.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A3.layout.ConversionPattern=\n\n[%-5p] %d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125; method\:%l%n%m%n</span><br></pre></td></tr></table></figure><p>在 springmvc.xml 配置读取配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 contoller 中用 @Value("$&#123;properties.key&#125;") 注释一个私有变量 读取,这种配置文件只会生效一个--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/*.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>配置全局异常处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.e3mall.search.exception.GlobalExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>异常处理器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.e3mall.search.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionResolver.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印到控制台</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//写到日志</span></span><br><span class="line">        logger.debug(<span class="string">"测试输出日志。。。。"</span>);</span><br><span class="line">        logger.info(<span class="string">"系统异常。。。。"</span>);</span><br><span class="line">        logger.error(<span class="string">"系统异常"</span>,e);</span><br><span class="line">        <span class="comment">//发邮件、短信 jmail 工具包发邮件，第三方 webService 发短信</span></span><br><span class="line">        <span class="comment">//显示错误页面</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"error/exception"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="添加-redis-缓存"><a href="#添加-redis-缓存" class="headerlink" title="添加 redis 缓存"></a>添加 redis 缓存</h5><p>ItemServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisClient jedisClient;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TbItemMapper itemMapper;</span><br><span class="line">   <span class="meta">@Value</span>(<span class="string">"$&#123;REDIS_KEY_PRE&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String REDIS_KEY_PRE;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;ITEM_CACHE_EXPIRE&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer ITEM_CACHE_EXPIRE;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbItem <span class="title">getItemById</span><span class="params">(<span class="keyword">long</span> itemId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询添加缓存不能影响普通查询</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询缓存</span></span><br><span class="line">            String s = jedisClient.get(REDIS_KEY_PRE + <span class="string">":"</span> + itemId + <span class="string">":BASE"</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(s))&#123;</span><br><span class="line">                TbItem tbItem = JsonUtils.jsonToPojo(s, TbItem.class);</span><br><span class="line">                <span class="keyword">return</span> tbItem;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果缓存为空，则查询数据库</span></span><br><span class="line"><span class="comment">//        方法一：根据主键查询</span></span><br><span class="line"><span class="comment">//        TbItem tbItem = itemMapper.selectByPrimaryKey(itemId);</span></span><br><span class="line"><span class="comment">//        方法二：设置查询条件查询</span></span><br><span class="line">        TbItemExample example = <span class="keyword">new</span> TbItemExample();</span><br><span class="line"><span class="comment">//        设置查询条件</span></span><br><span class="line">        example.createCriteria().andIdEqualTo(itemId);</span><br><span class="line"><span class="comment">//        执行查询</span></span><br><span class="line">        List&lt;TbItem&gt; itemList = (List&lt;TbItem&gt;) itemMapper.selectByExample(example);</span><br><span class="line">        <span class="keyword">if</span>(itemList!=<span class="keyword">null</span> &amp;&amp; itemList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//查询添加缓存不能影响普通查询</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//查询数据库后添加缓存</span></span><br><span class="line">                jedisClient.set(REDIS_KEY_PRE + <span class="string">":"</span> + itemId + <span class="string">":BASE"</span>, JsonUtils.objectToJson(itemList.get(<span class="number">0</span>)));</span><br><span class="line">                jedisClient.expire(REDIS_KEY_PRE + <span class="string">":"</span> + itemId + <span class="string">":BASE"</span>,ITEM_CACHE_EXPIRE);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回查询结果</span></span><br><span class="line">            <span class="keyword">return</span> itemList.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>applicationContext-redis.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 redis 单机版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClientPool"</span> <span class="attr">class</span>=<span class="string">"cn.e3mall.common.jedis.JedisClientPool"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jedisPool"</span> <span class="attr">ref</span>=<span class="string">"jedisPool"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPool"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPool"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.128"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resource.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#商品数据在缓存的 key 前缀</span><br><span class="line">REDIS_KEY_PRE=ITEM_INFO</span><br><span class="line">#商品数据在缓存的存储时间</span><br><span class="line">ITEM_CACHE_EXPIRE=3600</span><br></pre></td></tr></table></figure><hr><h5 id="freemarker-静态页面的使用"><a href="#freemarker-静态页面的使用" class="headerlink" title="freemarker 静态页面的使用"></a>freemarker 静态页面的使用</h5><p>freemarker 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.e3mall.freemarker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeMarkerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFreeMarker</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个模板文件</span></span><br><span class="line">        <span class="comment">//创建一个configuration 对象</span></span><br><span class="line">        Configuration cf = <span class="keyword">new</span> Configuration(Configuration.getVersion());</span><br><span class="line">        <span class="comment">//设置模板文件保存目录</span></span><br><span class="line">        cf.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(<span class="string">"D:/masterSpring/trunk/e3-item-web/src/main/webapp/WEB-INF/ftl/"</span>));</span><br><span class="line">        <span class="comment">//模板文件的编码格式</span></span><br><span class="line">        cf.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//加载一个模板文件，创建一个模板对象</span></span><br><span class="line"><span class="comment">//        Template template = cf.getTemplate("hello.ftl");</span></span><br><span class="line">        Template template = cf.getTemplate(<span class="string">"student.ftl"</span>);</span><br><span class="line">        <span class="comment">//创建一个数据集，可以使 map 也可以使 pojo</span></span><br><span class="line">        Map data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"hello"</span>,<span class="string">"hello freemarker!"</span>);</span><br><span class="line">        <span class="comment">//创建一个 Student 对象</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"小明"</span>,<span class="number">18</span>,<span class="string">"铜锣湾"</span>);</span><br><span class="line">        data.put(<span class="string">"student"</span>,student);</span><br><span class="line">        <span class="comment">//添加一个 List</span></span><br><span class="line">        List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">"孝宏"</span>,<span class="number">19</span>,<span class="string">"霓虹"</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">3</span>,<span class="string">"小黄"</span>,<span class="number">8</span>,<span class="string">"常磐森林"</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">4</span>,<span class="string">"小兰"</span>,<span class="number">10</span>,<span class="string">"霓虹"</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">5</span>,<span class="string">"小绿"</span>,<span class="number">10</span>,<span class="string">"霓虹"</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">6</span>,<span class="string">"傻东西"</span>,<span class="number">10</span>,<span class="string">"玛莎拉通"</span>));</span><br><span class="line">        data.put(<span class="string">"studentList"</span>,studentList);</span><br><span class="line">        <span class="comment">//添加日期类型</span></span><br><span class="line">        data.put(<span class="string">"date"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//添加一个 null</span></span><br><span class="line">        data.put(<span class="string">"val"</span>,<span class="string">"111"</span>);</span><br><span class="line">        <span class="comment">//创建一个 writer 对象，指定输出文件的路径及文件名</span></span><br><span class="line"><span class="comment">//        Writer out = new FileWriter(new File("D:/upload/freemaker/hello.txt"));</span></span><br><span class="line">        Writer out = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"D:/upload/freemaker/studentList.html"</span>));</span><br><span class="line">        <span class="comment">//生成静态页面</span></span><br><span class="line">        template.process(data,out);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板对象类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学生对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">学生信息：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">学号：$&#123;student.id&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">姓名：$&#123;student.name&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">年龄：$&#123;student.age&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">家庭住址：$&#123;student.address&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>家庭住址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#list</span> <span class="attr">studentList</span> <span class="attr">as</span> <span class="attr">stu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">stu_index</span> % <span class="attr">2</span> == <span class="string">0</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"green"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.address&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#--可以使用</span> ?<span class="attr">date</span>,?<span class="attr">time</span>,?<span class="attr">datetime</span>,?<span class="attr">string</span>("<span class="attr">parten</span>")<span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#--当前日期：$&#123;date?datetime&#125;--</span>&gt;</span></span><br><span class="line">当前日期：$&#123;date?string("yyyy-MM-dd hh:mm:ss")&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">null 值处理：$&#123;val!"val 为 null"&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">val 值判断：</span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">val</span>??&gt;</span></span><br><span class="line">    val 中有内容</span><br><span class="line"><span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">    val 值为 null</span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">引用模板测试：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "<span class="attr">hello.ftl</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="单点登录系统"><a href="#单点登录系统" class="headerlink" title="单点登录系统"></a>单点登录系统</h5><p>集群环境下会出现用户多次登录的情况</p><p>解决方案：</p><ol><li>配置 tomcat 集群，配置 tomcatSession 复制，此时因为广播 session ，节点数不能超过5个</li><li>使用 session 服务器，保存 session 信息，使每个节点处于无状态，需要模拟 session ，单点登录是使用 redis 模拟 session ，实现 session 统一管理（sso - single sign on 单点登录）</li></ol><blockquote><p><a href="https://www.jianshu.com/p/0ecbbc6841d4" target="_blank" rel="noopener">window.onload 与 $(function()) 区别</a></p></blockquote><hr><h5 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h5><p>当 Long 与 Long 相比较时，因为是两个包装数据类型（是对象），所以 == 比较的是两个对象的内存地址，需要将其中一个装换成 long 才能进行 == 比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(tbItem.getId() == itemId.longValue())</span><br></pre></td></tr></table></figure><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-错误-找不到或无法加载主类-org-apache-solr-cloud-ZkCLI"><a href="#Q-错误-找不到或无法加载主类-org-apache-solr-cloud-ZkCLI" class="headerlink" title="Q:错误: 找不到或无法加载主类 org.apache.solr.cloud.ZkCLI"></a>Q:错误: 找不到或无法加载主类 org.apache.solr.cloud.ZkCLI</h5><p>A: yum install -y unzip zip</p><blockquote><p>出处：<a href="https://blog.csdn.net/kzadmxz/article/details/75675239" target="_blank" rel="noopener">https://blog.csdn.net/kzadmxz/article/details/75675239</a></p></blockquote><hr><h5 id="Q-solr-集群开启后，只有一个-leader"><a href="#Q-solr-集群开启后，只有一个-leader" class="headerlink" title="Q:solr 集群开启后，只有一个 leader"></a>Q:solr 集群开启后，只有一个 leader</h5><p>A:tomcat/bin/catalina.sh 下另外三个 tomcat 配置错误</p><p>JAVA_OPTS=”-DzkHost=192.168.25.128:2181,192.168.25.128:2182,192.168.25.128:2183”</p><hr><h5 id="Q-The-type-java-util-Map-Entry-cannot-be-resolved-It-is-indirectly-referenced-from-required-class-files"><a href="#Q-The-type-java-util-Map-Entry-cannot-be-resolved-It-is-indirectly-referenced-from-required-class-files" class="headerlink" title="Q:The type java.util.Map$Entry cannot be resolved. It is indirectly referenced from required .class files"></a>Q:The type java.util.Map$Entry cannot be resolved. It is indirectly referenced from required .class files</h5><p>A:</p><p>IDE 的 jdk 版本过高，不要使用 1.8，改为 1.7 。</p><p>或者将 activemq 版本提高，使用 5.15X 版本</p><blockquote><p>参考：<a href="https://www.cnblogs.com/sxdcgaq8080/p/7921449.html" target="_blank" rel="noopener">https://www.cnblogs.com/sxdcgaq8080/p/7921449.html</a></p></blockquote><hr><h5 id="Q-IDEA-的-junit-无法在-System-in-read-的控制台输入内容"><a href="#Q-IDEA-的-junit-无法在-System-in-read-的控制台输入内容" class="headerlink" title="Q:IDEA 的 junit 无法在 System.in.read(); 的控制台输入内容"></a>Q:IDEA 的 junit 无法在 System.in.read(); 的控制台输入内容</h5><p>A: 使用 main 函数调用测试函数替代 junit</p><blockquote><p>参考：<a href="https://blog.csdn.net/weixin_40127127/article/details/78186002" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40127127/article/details/78186002</a></p></blockquote><hr><h5 id="Q-Destination-转换错误"><a href="#Q-Destination-转换错误" class="headerlink" title="Q: Destination 转换错误"></a>Q: Destination 转换错误</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Error:(27, 20) java: 对于send(javax.print.attribute.standard.Destination,&lt;匿名org.springframework.jms.core.MessageCreator&gt;), 找不到合适的方法</span><br><span class="line">    方法 org.springframework.jms.core.JmsTemplate.send(javax.jms.Destination,org.springframework.jms.core.MessageCreator)不适用</span><br><span class="line">      (参数不匹配; javax.print.attribute.standard.Destination无法转换为javax.jms.Destination)</span><br><span class="line">    方法 org.springframework.jms.core.JmsTemplate.send(java.lang.String,org.springframework.jms.core.MessageCreator)不适用</span><br><span class="line">      (参数不匹配; javax.print.attribute.standard.Destination无法转换为java.lang.String)</span><br></pre></td></tr></table></figure><p>错误选择转换 destination 的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import 类型错误，需要 javax.jms.Destination </span></span><br><span class="line"><span class="keyword">import</span> javax.print.attribute.standard.Destination;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从容器中获得 Destination 对象</span></span><br><span class="line">        Destination destination = (Destination) applicationContext.getBean(<span class="string">"queueDestination"</span>);</span><br></pre></td></tr></table></figure><hr><h5 id="Q-activemq-监听器异常，无法正常进入监听器"><a href="#Q-activemq-监听器异常，无法正常进入监听器" class="headerlink" title="Q:activemq 监听器异常，无法正常进入监听器"></a>Q:activemq 监听器异常，无法正常进入监听器</h5><p>Caused by: java.io.EOFException<br>    at java.io.DataInputStream.readInt(DataInputStream.java:392)<br>    at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:258)<br>    at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221)<br>    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213)<br>    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)<br>    … 1 more</p><p>连接不上 activemq，不算 bug ，重启项目解决</p><hr><h5 id="Q-spring-找不到-bean"><a href="#Q-spring-找不到-bean" class="headerlink" title="Q:spring 找不到 bean"></a>Q:spring 找不到 bean</h5><p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘itemServiceImpl’: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private cn.e3mall.common.jedis.JedisClient cn.e3mall.service.impl.ItemServiceImpl.jedisClient; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.e3mall.common.jedis.JedisClient] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: <a href="mailto:{@org.springframework.beans.factory.annotation.Autowired" target="_blank" rel="noopener">{@org.springframework.beans.factory.annotation.Autowired</a>(required=true)}<br>    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)</p><p>A: SOA 架构不同的功能间配置文件需要重新配置，将 spring/applicationContext-redis.xml，拷贝一份到目标目录下</p><hr><h5 id="Q-nginx-打开-window-版错误"><a href="#Q-nginx-打开-window-版错误" class="headerlink" title="Q:nginx 打开 window 版错误"></a>Q:nginx 打开 window 版错误</h5><p>A:由日志文件读到错误消息</p><p>nginx启动报错(1113: No mapping for the Unicode character exists in the target multi-byte code page)</p><p>经过查询发现是路径中含有中文</p><hr><h5 id="Q-nginx-网页中文乱码"><a href="#Q-nginx-网页中文乱码" class="headerlink" title="Q:nginx 网页中文乱码"></a>Q:nginx 网页中文乱码</h5><p>A: 在 conf/nginx.conf 中 server 中添加 charset=“utf-8”;</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_35448976/article/details/79256873" target="_blank" rel="noopener">https://blog.csdn.net/qq_35448976/article/details/79256873</a></p></blockquote><hr><h5 id="Q-idea-maven-文件改路径名后无法从-maven-projects-管理移除原有空-module"><a href="#Q-idea-maven-文件改路径名后无法从-maven-projects-管理移除原有空-module" class="headerlink" title="Q:idea maven 文件改路径名后无法从 maven projects 管理移除原有空 module"></a>Q:idea maven 文件改路径名后无法从 maven projects 管理移除原有空 module</h5><p>A:在 project structure 中 移除 module（不知是否必须），重新打开 module/重启 idea</p><hr><h5 id="Q-idea-配置-maven-分布式架构时，依赖了-dao-却无法传递依赖"><a href="#Q-idea-配置-maven-分布式架构时，依赖了-dao-却无法传递依赖" class="headerlink" title="Q:idea 配置 maven 分布式架构时，依赖了 dao 却无法传递依赖"></a>Q:idea 配置 maven 分布式架构时，依赖了 dao 却无法传递依赖</h5><p>A:从Idea中把项目删掉，手动删掉项目的.idea和.iml文件，当然也可以用命令删掉，重新导入项目，重新生成.idea和.iml文件。</p><p>但是我的问题是错误创建了一个 pom 文件（idea 在同目录下创建多个 maven module会报错，module 不会创建，但是 pom 文件会创建），删除错误的 pom，并且删除 module 重新导入 module</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_38069453/article/details/78332992" target="_blank" rel="noopener">https://blog.csdn.net/qq_38069453/article/details/78332992</a></p></blockquote><hr><h5 id="Q-页面-找不到-js-css"><a href="#Q-页面-找不到-js-css" class="headerlink" title="Q:页面 找不到 js css"></a>Q:页面 找不到 js css</h5><p>在 springmvc.xml 配置资源映射不起作用，target 的生成文件夹中没有 css、js、images 等文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--资源映射--&gt;</span><br><span class="line">&lt;mvc:resources mapping=&quot;/css/&quot; location=&quot;/css/**&quot;/&gt;</span><br><span class="line">&lt;mvc:resources mapping=&quot;/js/&quot; location=&quot;/js/**&quot;/&gt;</span><br><span class="line">&lt;mvc:resources mapping=&quot;/images/&quot; location=&quot;/images/**&quot;/&gt;</span><br></pre></td></tr></table></figure><p>A:在 web.xml 配置过滤 url</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>          </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>               </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>               </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>来源：<a href="https://dushen.iteye.com/blog/2406913" target="_blank" rel="noopener">https://dushen.iteye.com/blog/2406913</a></p></blockquote><hr><h5 id="Q-找不到依赖传递的方法"><a href="#Q-找不到依赖传递的方法" class="headerlink" title="Q:找不到依赖传递的方法"></a>Q:找不到依赖传递的方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.2:compile (default-compile) on project e3-sso-web: Compilation failure: Compilation failure:</span><br><span class="line">[ERROR] /D:/masterSpring/trunk/e3-sso-web/src/main/java/cn/e3mall/sso/controller/LoginController.java:[3,30] 找不到符号</span><br></pre></td></tr></table></figure><p>A:不小心在 common 下创建了 maven 的 module，删除了 pom 文件下的 modules 标签，而没有删除 &lt;packaging>pom&lt;/packaging>，所以运行 install 后其实是没有真正地将 jar 包放到 maven 仓库。删除 pom 即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;e3-common&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;../e3-item-web&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="Q-在修改页面的-location-href-的地址后，仍旧显示为旧地址"><a href="#Q-在修改页面的-location-href-的地址后，仍旧显示为旧地址" class="headerlink" title="Q:在修改页面的 location.href 的地址后，仍旧显示为旧地址"></a>Q:在修改页面的 location.href 的地址后，仍旧显示为旧地址</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;pBtn&quot; id=&quot;cart-add-btn-sf&quot;&gt;&lt;a onclick=&quot;cartAdd($&#123;item.id&#125;, 0, 1, 0, 1, this);&quot;&gt;&lt;b&gt;&lt;/b&gt;加入购物车&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function cartAdd(product_id,cart_type,opencity_id, flag,bs, obj, cfrom)&#123;</span><br><span class="line">    //取购物车商品数量</span><br><span class="line">   var num = $(&quot;#number_&quot; + product_id).val();</span><br><span class="line">   //拼装url参数，做跳转</span><br><span class="line">   location.href=&quot;http://localhost:8091/cart/add/&quot;+product_id+&quot;.html?num=&quot; + num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A:因为页面设置了静态页面 freemarker 的 redis 缓存，将原来的页面保存在了浏览器中，所以只要将浏览器的缓存删除即可。谷歌浏览器 ctrl + shift + insert 快速删除缓存</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zookeeper 在与 SolrCloud 搭配使用时，当做一个集群管理工具&lt;/p&gt;
&lt;p&gt;zookeeper 在与 dubbo 搭配使用时，作为一个注册中心&lt;/p&gt;
&lt;p&gt;solr 集群版与普通版配置 spring/applicationContext-solr.xml&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--初始化一个 SolrServer--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&amp;lt;bean id=&quot;httpSolrServer&quot; class=&quot;org.apache.solr.client.solrj.impl.HttpSolrServer&quot;&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&amp;lt;constructor-arg index=&quot;0&quot; value=&quot;http://192.168.25.128:8080/solr&quot;/&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&amp;lt;/bean&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--集群版 solrServer--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cloudSolrServer&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org.apache.solr.client.solrj.impl.CloudSolrServer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;zkHost&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;192.168.25.128:2181,192.168.25.128:2182,192.168.25.128:2183&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;defaultCollection&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;collection2&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ssm" scheme="http://yoursite.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>e3mall</title>
    <link href="http://yoursite.com/2019/03/08/e3mall/"/>
    <id>http://yoursite.com/2019/03/08/e3mall/</id>
    <published>2019-03-08T09:43:31.000Z</published>
    <updated>2019-03-20T15:51:51.818Z</updated>
    
    <content type="html"><![CDATA[<h4 id="e3mall"><a href="#e3mall" class="headerlink" title="e3mall"></a>e3mall</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>分布式</p><p>需要按照功能点把系统拆分，拆分成独立的功能。单独为某一个节点添加服务器。需要系统之间配合才能完成整个业务逻辑。叫做分布式。</p><p>分布式架构：多个子系统相互协作才能完成业务流程。系统之间需要进行通信。</p><p>集群：同一个工程部署到多台服务器上。tomcat 集群节点数量服务能力会先上升后下降，因为节点间需要传递 session 数据要用到广播，随着节点增加，会在服务器间消耗过多带宽，从而下降服务能力，一般5个节点为佳。</p><p>分布式架构：</p><p>把系统按照模块拆分成多个子系统。</p><p>优点：</p><p>1、把模块拆分，使用接口通信，降低模块之间的耦合度。</p><p>2、把项目拆分成若干个子项目，不同的团队负责不同的子项目。</p><p>3、增加功能时只需要再增加一个子项目，调用其他系统的接口就可以。</p><p>4、可以灵活的进行分布式部署。</p><a id="more"></a><p>缺点：</p><p>1、系统之间交互需要使用远程通信，接口开发增加工作量。</p><p>2、各个模块有一些通用的业务逻辑无法共用。</p><p>SOA：Service Oriented Architecture面向服务的架构。也就是把工程拆分成服务层、表现层两个工程。服务层中包含业务逻辑，只需要对外提供服务即可。表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现。</p><p>为什么互联网项目要实现单表查询？</p><ol><li>因为单表查询效率高</li><li>单表查询做 redis 缓存方便</li><li>数据库分库需要单表查询</li></ol><p>web 层的 maven module 用 war 包的打包方式，为了把一个工程聚合在这个 war 包</p><p>parent 与 manager 用 pom（父工程必须为 pom）</p><p>其余 dao service interface pojo 默认 jar 包</p><p>该工程只有打包成 war 包的 web 层和聚合的 manager 能运行</p><p>运行时，推荐运行聚合工程 manager，因为 web 运行需要导入 manager 下其余 service、dao 等 jar 包模块，这些模块需要导入到本地仓库，而每一次修改这些模块都要重新导入到本地仓库</p><hr><h5 id="ssm-框架整合"><a href="#ssm-框架整合" class="headerlink" title="ssm 框架整合"></a>ssm 框架整合</h5><ul><li><p>创建数据库，导入数据库脚本</p></li><li><p>使用 mybatis 逆向工程生成 pojo 以及 mapper 接口及映射文件，并将其放到对应文件夹</p></li><li><p>整合 ssm</p><ol><li><p>Dao 层 ：</p><p>Mybatis 配置文件：SqlMapConfig.xml 配置包别名，也可以不配置，但是文件必须存在，文件头必须保留</p><p>applicationContext-dao.xml：mybatis 整合 spring，，由 spring 创建数据库连接池，通过 spring 管理 <a href="https://blog.csdn.net/u013412772/article/details/73648537" target="_blank" rel="noopener">sqlSessonFactory</a>、mapper 代理对象（扫描包）。需要加入 mybatis 与 spring 的整合包</p></li><li><p>Service 层：</p><p>applicationContext-service.xml ：所有 service 实现类都放到 spring 容器中管理，由 spring 管理事务</p></li><li><p>表现层：</p><p>Springmvc 框架，由 springmvc 管理 controller</p><p>springmvc 三大组件</p></li></ol></li></ul><p>配置 log4j</p><p>parent 配置版本约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web 中配置依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web/resources/conf 中配置 log4j 配置文件 log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### set log levels ###</span><br><span class="line">log4j.rootLogger = DEBUG,Console,File</span><br><span class="line"></span><br><span class="line">###  输出到控制台  ###</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.Target=System.out</span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern= %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 输出到日志文件 ###</span><br><span class="line">log4j.appender.File=org.apache.log4j.RollingFileAppender </span><br><span class="line">log4j.appender.File.File=$&#123;project&#125;/WEB-INF/logs/app.log</span><br><span class="line">log4j.appender.File.DatePattern=_yyyyMMdd&apos;.log&apos;</span><br><span class="line">log4j.appender.File.MaxFileSize=10MB</span><br><span class="line">log4j.appender.File.Threshold=ALL</span><br><span class="line">log4j.appender.File.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.File.layout.ConversionPattern=[%p][%d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125;][%c]%m%n</span><br></pre></td></tr></table></figure><p>web.xml 配置日志路径及监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j 日志配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:conf/log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://www.cnblogs.com/codingcloud/p/5197737.html" target="_blank" rel="noopener">解决log4j 警告信息的问题</a></p><p><a href="https://blog.csdn.net/xiaoxiong_web/article/details/77932655" target="_blank" rel="noopener">Maven项目引入log4j的详细配置</a></p></blockquote><hr><h5 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h5><p>将框架分成 SOA 架构后，表现层和服务层将分离，同处一个等级。表现层要取得数据，需要调用服务，服务层则完全删除表现层的视图等，只剩业务逻辑。</p><p>如果将项目的表现层和服务层进行拆分，多个表现层能调用多个服务层的功能</p><p>表现层和服务层是不同的工程，实现一个查询功能涉及到两个系统间的通信，那么就需要 WebService 等服务调用的方式，但是 WebService 是基于 soap 协议，效率不高</p><p>可以使用 restful 形式的服务：http+json ,应用较多，但是如果应用跟服务过多，服务之间调用关系复杂，需要治疗服务</p><p>dubbo 可以实现 rpc 协议进行远程调用，直接使用 socket 通信（二进制传递对象）传输效率高</p><p>注册 Dubbo 使用 zookeeper</p><p>将 service 服务注册到 zookeerper ，然后用 web 层调用</p><p>dubbo 是一个管理服务后台，连接注册中心 zookeeper 后就能看到 service 和 web 的状态</p><p>MariaDB 是 Mysql 的一个分支，功能与 Mysql 一致</p><p>PageHelper 是 Mybatis 第三方分页插件，使用了 Mybatis 拦截器，在执行 sql 语句前拿到 sql 语句对其进行修改，加上 limit startPage，size</p><p>将 pagehelper 工程 install 成 jar 包，放到本地仓库，或者私服，然后用 service 引用（如果哪个工程要使用都可以用此方法）</p><p>发布服务 applicationContext-service.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用dubbo发布服务 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"e3-manager"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">address</span>=<span class="string">"192.168.171.128:2181"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.e3mall.service.ItemService"</span> <span class="attr">ref</span>=<span class="string">"itemServiceImpl"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>引用服务 springmvc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用dubbo服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"e3-manager-web"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.171.128:2181"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--timeout 设置请求服务超时时间单位毫秒 此处为10分钟--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"cn.e3mall.service.ItemService"</span> <span class="attr">id</span>=<span class="string">"itemService"</span> <span class="attr">timeout</span>=<span class="string">"600000"</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h5><p>打开版本控制 SVN ：VSC–Enable Virsion control Itergation</p><p>将项目关联到 SVN ： import into Version control</p><p>提交：项目上右键，SubVersion–sharedirection–commit</p><p>从 SVN 项目下载：checkout from Virsion control ，选择下载到哪个目录</p><p>从 SVN 下载的项目没有 maven module </p><p>项目上右键 ，maven – Reimport</p><p>在一个 window 工程中打开多个 maven，在右边 maven 窗口点击绿色 + 号，选择另外几个 maven module 的 pom.xml 导入</p><p>配置忽略文件</p><blockquote><p><a href="https://blog.csdn.net/wangjun5159/article/details/74932433" target="_blank" rel="noopener">https://blog.csdn.net/wangjun5159/article/details/74932433</a></p></blockquote><hr><h5 id="js-页面"><a href="#js-页面" class="headerlink" title="js 页面"></a>js 页面</h5><p>index 单页面工程（将所有页面引入到 index.jsp 这个页面），在其中引入其他节点（只有 div 包裹的片段），将其加入 html，在单页面工程的父工程中引入了一个 js ，那么引入的其他节点片段也可以使用这个 js。</p><p>$(function(){</p><p>页面加载完成执行的方法</p><p>});</p><p>点击按钮弹出窗口的一个子节点后，关闭弹出窗口，并将选择节点内容添加到点击的按钮后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onClick : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>($(<span class="keyword">this</span>).tree(<span class="string">"isLeaf"</span>,node.target))&#123;</span><br><span class="line">      <span class="comment">// 填写到cid中</span></span><br><span class="line">      _ele.parent().find(<span class="string">"[name=cid]"</span>).val(node.id);</span><br><span class="line">      <span class="comment">// 将内容填写到下一个 span 中</span></span><br><span class="line">      _ele.next().text(node.text).attr(<span class="string">"cid"</span>,node.id);</span><br><span class="line">      $(_win).window(<span class="string">'close'</span>);</span><br><span class="line">      <span class="keyword">if</span>(data &amp;&amp; data.fun)&#123;</span><br><span class="line">         data.fun.call(<span class="keyword">this</span>,node);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h5><p>Nginx是一款免费高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，官方测试 nginx 能够支支撑5万并发链接，并且 cpu、内存等资源消耗却非常低，运行非常稳定。</p><ul><li><p>Nginx 应用</p><ol><li><p>http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。（图片、css、js、静态页面）</p></li><li><p>虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。（让多个网站共用8080 端口）</p></li><li><p>反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用 nginx 做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。（因为能支撑 5W 并发，所以先由它接受用户的访问请求，再平均分配给低并发的多个 tomcat）</p></li></ol></li></ul><p>查看含有 nginx 的进程</p><p>ps aux|grep nginx</p><p>查看 80 端口（用于查看某个端口是否被占用）</p><p>netstat -anp|grep 80</p><ul><li>启动</li></ul><p><code>cd /usr/local/nginx/sbin/</code></p><p><code>./nginx</code></p><ul><li>停止</li></ul><p>方式一，快速停止</p><p><code>cd /usr/local/nginx/sbin</code></p><p><code>./nginx -s stop</code></p><p>方式2，完整停止(建议使用)：</p><p><code>cd /usr/local/nginx/sbin</code></p><p><code>./nginx -s quit</code></p><ul><li>重启</li></ul><p>方式1，先停止再启动（建议使用）：</p><p>对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。</p><p>如下：</p><p><code>./nginx -s quit</code></p><p><code>./nginx</code></p><p>方式2，重新加载配置文件（在不关机情况下重新加载配置文件）：</p><p>当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效，如下：</p><p>./nginx -s reload</p><hr><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><p>正向代理：客户端上网</p><p>反向代理：服务端</p><p>反向代理服务器决定哪台服务器提供服务。</p><p>返回代理服务器不提供服务器。也是请求的转发。</p><p>proxy-pass 代理转发</p><p>nginx.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">upstream sina&#123;</span><br><span class="line">    server 192.168.171.128:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.sina.com.cn;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://sina;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream souhu&#123;</span><br><span class="line">    server 192.168.171.128:8081;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.souhu.com;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://souhu;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问  <a href="http://www.sina.com.cn" target="_blank" rel="noopener">www.sina.com.cn</a> 时，会将请求转发给 upstream sina 的 server 地址 （server 192.168.171.128:8080）</p><p>当访问 <a href="http://www.souhu.com" target="_blank" rel="noopener">www.souhu.com</a> 时，会将请求转发给 upstream souhu 的 server 地址（ 192.168.171.128:8081）</p><p>请求访问的是 nginx，但它会把不同网址请求转发给各个 tomcat ，然后由 tomcat 给与响应</p><p>负载均衡指在反向代理基础上配置多个服务器，将同一网址请求随机发送给多个 tomcat，可以实现 tomcat 集群，但是 nginx 作为入口只能配置一个，不能多个同时使用，nginx 一个 ip 绑定一个域名，但是可以有 nginx 备份机，作为主机坏掉的备份。</p><p>实现高可用</p><p>两台nginx，一主一备：192.168.101.3和192.168.101.4</p><p>两台tomcat服务器：192.168.101.5、192.168.101.6</p><p>使用 keepalived 绑定主、备用 nginx 服务器，备用服务器的 keepalived 不停检测主服务器（nginx）心跳，如果主服务器挂了，将其虚拟 ip 绑定到备用机上。修复好主服务器后，继续将 ip 绑定到主服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream sina&#123;</span><br><span class="line">    server 192.168.171.128:8080;</span><br><span class="line">    server 192.168.171.128:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h5><p>Tracker 群：向导（集群管理工具），类似于 dubbo 注册中心，记录 Storage 集群的状态，在客户端请求存储图片时，找 Tracker 来分配 ip 和端口号</p><p>Storage 集群：分多个组，组内部数据一致，用于备份，组内部有同步线程，组内能自动同步；组之间内容不一致，用于扩容</p><p>虚拟机网络配置：</p><p>桥接：虚拟机连接到电脑的网络（虚拟机跟电脑的网络一样，走的路由器或网线）</p><p>host only 仅主机：只有虚拟机和主机间可以通信，虚拟机之间不能通信</p><p>NAT 模式：电脑和虚拟机可以通信，虚拟机之间也可以通信</p><hr><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p>在 E3.js 设置片段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> E3 = &#123;</span><br><span class="line">   <span class="comment">// 编辑器参数</span></span><br><span class="line">   kingEditorParams : &#123;</span><br><span class="line">      <span class="comment">//指定上传文件参数名称</span></span><br><span class="line">      filePostName  : <span class="string">"uploadFile"</span>,</span><br><span class="line">      <span class="comment">//指定上传文件请求的url。</span></span><br><span class="line">      uploadJson : <span class="string">'/pic/upload'</span>,</span><br><span class="line">      <span class="comment">//上传类型，分别为image、flash、media、file</span></span><br><span class="line">      dir : <span class="string">"image"</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>url ：用来访问 servlet 返回页面数据</p><p>controller 返回信息：</p><p>Contetent Type：</p><p>application/json（json）</p><p>text/plain（普通文本信息）</p><p>@Response 是指不走逻辑视图，直接响应浏览器，类似调用 response.write() 将数据写回浏览器，但是如果返回的是对象，则转换成 json。</p><p>如果返回的是字符串，那么返回的值就是 text/plain,对于多图片上传的插件的浏览器兼容性会变好。</p><hr><p>SEO 搜索引擎优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;e3-portal-web&lt;/servlet-name&gt;</span><br><span class="line">  //伪静态化，将 url 后缀变成 html，但仍然是静态页面</span><br><span class="line">  &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>controller 指 Controller 类</p><p>Handler（处理器） 指 controller 中的方法，@RequestMapping（”/“） 处理器映射关系，指会被拦截到 handler 的路径</p><h5 id="首页跳转："><a href="#首页跳转：" class="headerlink" title="首页跳转："></a>首页跳转：</h5><p>访问 url 路径：localhost：8080，先去找 web.xml 中的欢迎页配置，index.jsp 。发现 web 根目录没有该页面，去找 servlet，被前端控制器拦截（web.xml 配置 *.html 拦截），处理器配置 @RequestMapping(”/index“) 拦截</p><p>$(“#xxx”).tree({}); 初始化 tree，tree 中 {} 是一个 json 对象，包含了初始化的参数，{} 里的东西可以看做一个对象或变量</p><p>Service 服务需要以 war 包形式打包的原因是把几个模块打到一个 war 包，方便部署。其实 tomcat 只是初始化了一个 spring 容器，不做其他事情</p><p>可以自己写一个 main 方法，来进行 spring 容器的初始化，这样就不用 tomcat 也能发布 service 服务，但是需要自己手动打各种功能 jar 包，拷贝到同一目录下，用 main 方法进行批处理，加载所有 jar 包，然后启动类，所以使用 tomcat 比较方便</p><p>handler：function(){}</p><p>处理事件</p><hr><h5 id="Redis-存取"><a href="#Redis-存取" class="headerlink" title="Redis 存取"></a>Redis 存取</h5><p>redis 启动： <code>./redis-server</code></p><p>使用了 map 的方式，存放一个 key-value 形式的数据</p><p>key 计算一个 hash 值，放到一个特定位置，取值时再计算一次 hash 去特定位置取这个 value，不需要遍历，所以存取速度很快</p><p>redis 所有数据保存到内存，所以速度很快</p><p>存数据：</p><p>key：str1，value：aaa</p><p><code>set str1 aaa</code></p><p>将字符串 aaa 以 str1 的 key 存放到 redis 中</p><p>取数据：</p><p><code>get str1</code></p><p>取出 key 为 str1 的值</p><p>加一：</p><p><code>incr key1</code></p><p>如果 key1 不存在就创建，并赋值为1，如果是数字则执行 +1</p><p><code>decr key1</code></p><p>-1 操作</p><p><code>del key1</code></p><p>删除操作</p><p>redis 中都是以字符串保存的，+ - 操作中会将字符串变成整数，如果是真字符串则会无法转换</p><p>hash 操作</p><p>在 map 中保存 map</p><p>hash1{</p><p>{filed1,1}</p><p>{field2,2}</p><p>}</p><p><code>hset hash1 field1 1</code></p><p><code>hset hash1 field2 2</code></p><p><code>hset hash1 field3 3</code></p><p><code>hget hash1  field1</code>  （获得 hash1 中 field1 的 hash 值）</p><p><code>hkeys hash1</code>    （获得所有 hash1 的 key 值）</p><p><code>hvals hash1</code>    （获得所有 hash1 的 value 值）</p><p><code>hgetall hash1</code>    （获得所有 hash1 的 key value 值）</p><p><code>hdel hash1 field2</code>     （删除 hash1 的 field2 值）</p><p>list 操作</p><p>将 1 2 3 4 5 向左添加到队列，lrange 是从左开始遍历 list</p><p><code>lpush list1 1 2 3 4 5</code></p><p><code>lrange list1</code>   结果是：“5” “4” “3” “2” “1”</p><p><code>rpush</code> 向右添加到 list </p><p><code>rpush list1 a b c d e</code></p><p>两次 push 后使用 lrange 结果是 “5” “4” “3” “2” “1” “a” “b” “c” “d” “e”</p><p>lpop,rpop 从左、右弹出元素，取出的元素就不会存在于 list 中，</p><p><code>lpop list1</code></p><p>结果是 “5”，并且将 “5” 从 list1 中去除</p><p>set 集合</p><p><code>sadd set1 a a b b c c c h</code></p><p>只会留下不重复的值</p><p><code>smembers set1</code> 用来查询 set 中的值，结果为 a b c h</p><p><code>srem set1 h</code> 删除 set1 中的 h，结果为 a b c</p><p>sdiff seta setb ，去除 seta 与 setb 重复的元素，保留 seta 的</p><p><code>sadd seta a b c d e</code></p><p><code>sadd setb c d e f g</code></p><p><code>sdiff seta setb</code> 结果为 a b</p><p><code>sdiff setb seta</code> 结果为 g f （set 是无序的）</p><p><code>sinter seta setb</code> 结果为 d c e 取两者的交集</p><p><code>sunion seta setb</code> 结果为 a b c d e f g 取两者综合，并去掉重复的</p><p><code>expire key 100</code>设置 key 的保存时间，为 100 秒</p><p><code>ttl key</code> 查询 key 的保存时间，如果有计数说明到时候就销毁，如果为 -1 则表示永久保存，如果 -2 为不存在，当倒计时到后，变为 -2。持久时间可以重复覆盖设置，<code>persist key</code>可以取消倒计时，让其变成永久保存状态</p><hr><h5 id="Redis-数据持久化方式"><a href="#Redis-数据持久化方式" class="headerlink" title="Redis 数据持久化方式"></a>Redis 数据持久化方式</h5><p>RDB 形式，默认开启，默认 15 分钟内有一个 key 发生变化就持久化一次（从内存写到磁盘）</p><p>如果 5 分钟有 10  个 key 发生变化就持久化一次</p><p>如果 1 分钟有 10000 个 key 发生变化就持久化一次</p><p>save 900 1<br>save 300 10<br>save 60 10000</p><p>redis 可能会丢失数据，但效率高，一般用作缓存（可以容忍丢失数据），需要绝对不丢数据用关系型数据库 mysql 等</p><p>AOF 形式，默认不开启，如果 RDB 丢失数据可能较高，则开启这个</p><p>开启方式：appendonly：no 改为 yes</p><p>将查询的命令保存到一个文件中，如果要恢复数据库，则重新执行查询命令</p><p>每秒钟都会同步，写入磁盘，性能会降低，开启后恢复数据就用 aof</p><hr><h5 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h5><p>Redis 集群最起码有 3 个节点，保证能够使用投票功能，每个节点需要一个备份机，所以需要 6 台服务器，</p><p>每个集群有16384（0-16383） 个槽</p><p>Redis 集群中内置了 16384 个哈希槽，当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点</p><hr><h5 id="redis-缓存"><a href="#redis-缓存" class="headerlink" title="redis 缓存"></a>redis 缓存</h5><p><a href="https://blog.csdn.net/basycia/article/details/50478245" target="_blank" rel="noopener">策略模式</a></p><p>一个接口，多个实现类，可以进行实现类切换</p><p>在页面显示前查询缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.e3mall.content.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.e3mall.common.jedis.JedisClient;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.common.utils.E3Result;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.common.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.content.service.ContentService;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.mapper.TbContentMapper;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.pojo.TbContent;</span><br><span class="line"><span class="keyword">import</span> cn.e3mall.pojo.TbContentExample;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内容管理 Service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentServiceImpl</span> <span class="keyword">implements</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TbContentMapper contentMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisClient jedisClient;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;CONTENT_LIST&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String CONTENT_LIST;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E3Result <span class="title">addContent</span><span class="params">(TbContent content)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//补充 content 的日期</span></span><br><span class="line">        content.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">        content.setUpdated(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        contentMapper.insert(content);</span><br><span class="line">        <span class="comment">//缓存同步，删除缓存中对应的数据</span></span><br><span class="line">        jedisClient.hdel(CONTENT_LIST,content.getCategoryId().toString());</span><br><span class="line">        <span class="keyword">return</span> E3Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据内容分类 id 查询内容列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TbContent&gt; <span class="title">getContentListByCid</span><span class="params">(<span class="keyword">long</span> cid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询缓存,</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//如果有缓存直接响应结果</span></span><br><span class="line">            String json = jedisClient.hget(CONTENT_LIST, cid + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(json))&#123;</span><br><span class="line">                List&lt;TbContent&gt; contentList = JsonUtils.jsonToList(json, TbContent.class);</span><br><span class="line">                <span class="keyword">return</span> contentList;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有缓存查询数据库</span></span><br><span class="line">        TbContentExample example = <span class="keyword">new</span> TbContentExample();</span><br><span class="line"><span class="comment">//        设置查询条件</span></span><br><span class="line">        example.createCriteria().andCategoryIdEqualTo(cid);</span><br><span class="line"><span class="comment">//        执行查询</span></span><br><span class="line">        List&lt;TbContent&gt; contentList = contentMapper.selectByExampleWithBLOBs(example);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把查询的结果添加到缓存，分出一个 CONTENT_LIST 的 hash 来存放 key、value 的值</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            jedisClient.hset(CONTENT_LIST,cid + <span class="string">""</span>, JsonUtils.objectToJson(contentList));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> contentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="solr-配置"><a href="#solr-配置" class="headerlink" title="solr 配置"></a>solr 配置</h5><p><a href="https://blog.csdn.net/gufengshanyin/article/details/21637461" target="_blank" rel="noopener">配置 solr</a></p><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-无法创建-maven-module"><a href="#Q-无法创建-maven-module" class="headerlink" title="Q: 无法创建 maven module"></a>Q: 无法创建 maven module</h5><p>Failed to create a Maven project: ‘D:/masterSpring/e3-parent/e3-manager/pom.xml’ already exists in VFS</p><p>A: 需要手动指定创建子目录，不然同一个目录下有两个 imi 文件就会报错</p><blockquote><p>参考：<a href="https://blog.csdn.net/YangFanJ/article/details/73497803" target="_blank" rel="noopener">https://blog.csdn.net/YangFanJ/article/details/73497803</a></p></blockquote><hr><h5 id="Q：maven-运行-install-报错"><a href="#Q：maven-运行-install-报错" class="headerlink" title="Q：maven 运行 install 报错"></a>Q：maven 运行 install 报错</h5><p>A: 当maven执行install:install出现如上错误时，则尝试改用install执行</p><blockquote><p>出处：<a href="https://blog.csdn.net/qq_28345313/article/details/76855186" target="_blank" rel="noopener">https://blog.csdn.net/qq_28345313/article/details/76855186</a></p></blockquote><hr><h5 id="Q-ibasits-binding-bindingException"><a href="#Q-ibasits-binding-bindingException" class="headerlink" title="Q: ibasits.binding.bindingException"></a>Q: ibasits.binding.bindingException</h5><p>找不到 mapper 方法和 pojo 类等错误</p><p>A: 一般都是这两类不在同一路径下，或者路径错误。我的问题是这两文件从逆向工程拷贝时，没有加 cn.e3mall 的路径前缀</p><hr><h5 id="Q-log4j-WARN-No-appenders-could-be-found-for-logger"><a href="#Q-log4j-WARN-No-appenders-could-be-found-for-logger" class="headerlink" title="Q:log4j:WARN No appenders could be found for logger"></a>Q:log4j:WARN No appenders could be found for logger</h5><p>A:<a href="https://www.cnblogs.com/codingcloud/p/5197737.html" target="_blank" rel="noopener">解决log4j 警告信息的问题</a></p><p>配置 web 中的 log4j 上下文路径以及监听器</p><hr><h5 id="Q-idea-创建-install-maven-工程后访问-localhost-8080-网页无限转圈"><a href="#Q-idea-创建-install-maven-工程后访问-localhost-8080-网页无限转圈" class="headerlink" title="Q: idea 创建 install maven 工程后访问 localhost:8080 网页无限转圈"></a>Q: idea 创建 install maven 工程后访问 localhost:8080 网页无限转圈</h5><p>A:配置 log4j 后发现异常</p><p>Caused by: org.apache.ibatis.builder.BuilderException: Wrong namespace. Expected ‘cn.e3mall.mapper.TbOrderMapper’ but found ‘cn.e3mall.cn.e3mall.mapper.TbOrderMapper’.</p><p>Caused by: org.apache.ibatis.builder.BuilderException: Wrong namespace. Expected ‘cn.e3mall.mapper.TbOrderMapper’ but found ‘cn.e3mall.cn.e3mall.mapper.TbOrderMapper’.</p><p>引入的 pojo mapper 逆向工程路径出了问题，使用 refactor 路径后出现的异常</p><hr><h5 id="Q-网页-404-The-requested-resource-is-not-available"><a href="#Q-网页-404-The-requested-resource-is-not-available" class="headerlink" title="Q:网页 404 The requested resource is not available."></a>Q:网页 404 The requested resource is not available.</h5><p>后台：00,323 WARN PageNotFound:1136 - No mapping found for HTTP request with URI [/item/562379] in DispatcherServlet with name ‘e3-manager’</p><p>00,323 DEBUG RequestMappingHandlerMapping:328 - Did not find handler method for [/item/562379]</p><p>网页：The requested resource is not available.</p><p>A:从 url 中取值方式 ${itemId} 多加了一个 $,去掉即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//url 模板映射，将 url 中的值取出来作为参数</span><br><span class="line">@RequestMapping(&quot;/item/&#123;itemId&#125;&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public TbItem getItemById(@PathVariable Long itemId)&#123;</span><br><span class="line">    TbItem itemById = itemService.getItemById(itemId);</span><br><span class="line">    return itemById;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>springmvc 处理器映射器 等的工作原理</p><p><a href="https://stackoverflow.com/questions/41577234/why-does-spring-mvc-respond-with-a-404-and-report-no-mapping-found-for-http-req" target="_blank" rel="noopener">https://stackoverflow.com/questions/41577234/why-does-spring-mvc-respond-with-a-404-and-report-no-mapping-found-for-http-req</a></p></blockquote><hr><h5 id="Q-tomcat-linux-启动报错"><a href="#Q-tomcat-linux-启动报错" class="headerlink" title="Q:tomcat linux 启动报错"></a>Q:tomcat linux 启动报错</h5><p>at net.sf.ehcache.store.disk.DiskStore.keySet(DiskStore.java:521) at net.sf.ehcache.store.disk.DiskStorageFactory$DiskExpiryTask.run(DiskStorageFactory.java:828) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</p><p>A:tomcat 报错端口被占用，jps 查看已启动的服务</p><p>[root@localhost bin]# jps<br>2818 Bootstrap<br>4516 Bootstrap</p><p>全部 kill 掉</p><p>[root@localhost bin]# kill -9 2818<br>[root@localhost bin]# kill -9 4516</p><h5 id="Q-调用服务端分页方法警告"><a href="#Q-调用服务端分页方法警告" class="headerlink" title="Q: 调用服务端分页方法警告"></a>Q: 调用服务端分页方法警告</h5><p>三月 10, 2019 4:47:17 下午 com.alibaba.com.caucho.hessian.io.SerializerFactory getDeserializer<br>警告: Hessian/Burlap: ‘com.github.pagehelper.Page’ is an unknown class in WebappClassLoader<br>  context:<br>  delegate: false<br>  repositories:<br>———-&gt; Parent Classloader:<br>ClassRealm[plugin&gt;org.apache.tomcat.maven:tomcat7-maven-plugin:2.2, parent: sun.misc.Launcher$AppClassLoader@b4aac2]<br>:<br>java.lang.ClassNotFoundException: com.github.pagehelper.Page</p><p>A:服务端的 pagehelper 类下有一个 Page 类，Page 类继承了 ArrayList ，序列化后传到 web 层，web 层调用后将其转换成 ArrayList 但是它本质是个 Page，web 层没有该类，所以报出警告，如果要消除警告，在 web 层引入依赖 PageHelper</p><hr><h5 id="Q-控制层取-id-错误"><a href="#Q-控制层取-id-错误" class="headerlink" title="Q: 控制层取 id 错误"></a>Q: 控制层取 id 错误</h5><p>Controller [cn.e3mall.controller.ItemCatController]<br>Method [public java.util.List&lt;cn.e3mall.common.EasyUITreeNode&gt; cn.e3mall.controller.ItemCatController.getItemCatList(java.lang.Long)]</p><p>org.springframework.web.bind.MissingServletRequestParameterException: Required Long parameter ‘id’ is not present</p><p>A:因为在一开始点击按钮时，页面不会传递 id 值，需要默认给一个参数 id =0 表示父节点。之后点击 tree 节点才会传递 id 过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    防止形式参数与页面传入的参数名不同，设置别名 id，并且防止为空设置默认值 0</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;EasyUITreeNode&gt; <span class="title">getItemCatList</span><span class="params">(@RequestParam(name=<span class="string">"id"</span>,defaultValue=<span class="string">"0"</span>)</span> Long parentId)</span>&#123;</span><br></pre></td></tr></table></figure><hr><h5 id="Q-nginx-重启-发生-var-run-nginx-nginx-pid-no-such-file-or-directory"><a href="#Q-nginx-重启-发生-var-run-nginx-nginx-pid-no-such-file-or-directory" class="headerlink" title="Q: nginx 重启 发生 var/run/nginx/nginx.pid  no such file or directory"></a>Q: nginx 重启 发生 var/run/nginx/nginx.pid  no such file or directory</h5><p>nginx: [emerg] open() “/var/run/nginx/nginx.pid” failed (2: No such file or directory)</p><p>A：nginx 启动需要创建该目录文件夹，不创建就会报错，<code>mkdir /var/run/nginx</code> 创建文件夹</p><hr><h5 id="Q-修改-host-无法生效"><a href="#Q-修改-host-无法生效" class="headerlink" title="Q:修改 host 无法生效"></a>Q:修改 host 无法生效</h5><p>A: 修改 host 需要重启浏览器才会释放之前的缓存</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_33862644/article/details/76625557" target="_blank" rel="noopener">https://blog.csdn.net/qq_33862644/article/details/76625557</a></p></blockquote><hr><h5 id="Q-nginx-重启错误"><a href="#Q-nginx-重启错误" class="headerlink" title="Q:nginx 重启错误"></a>Q:nginx 重启错误</h5><p>报错</p><p>nginx: [emerg] unknown directive “server:192.168.171.128:8080” in /usr/local/nginx/conf/nginx.conf:107</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream sina&#123;</span><br><span class="line">    server:192.168.171.128:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 server 中间的冒号变为空格</p><hr><h5 id="Q-虚拟机启动图形界面错误"><a href="#Q-虚拟机启动图形界面错误" class="headerlink" title="Q:虚拟机启动图形界面错误"></a>Q:虚拟机启动图形界面错误</h5><p> CentOS 6.5系统中安装了桌面环境（Gnome或KDE）后，发现桌面环境无法正常启动，出现如下错误提示：  “You are currently trying to run as the root super user. The super user is a specialized account that is not designed to run a normal user session. Various progra?ms will not function properly, and actions performed under this account can cause unrecoverable damage to the operating system.”</p><p>A:使用如下指令将相关服务设置为自动启动后，再重启系统即可： </p><p>chkconfig –level 35 haldaemon on</p><p>chkconfig –level 35 messagebus on</p><blockquote><p>出处：<a href="https://linux.it.net.cn/m/view.php?aid=19360" target="_blank" rel="noopener">https://linux.it.net.cn/m/view.php?aid=19360</a></p></blockquote><hr><h5 id="Q-使用-E3Result-返回状态时无法刷新页面"><a href="#Q-使用-E3Result-返回状态时无法刷新页面" class="headerlink" title="Q:使用 E3Result 返回状态时无法刷新页面"></a>Q:使用 E3Result 返回状态时无法刷新页面</h5><p>A:经查看页面返回状态 404，但是控制台返回的是 200</p><p>发现是没有加 @ResponseBody ，这样就会返回一个视图 http:xxxx/E3Result.jsp ，而不是一个表示状态的字符串 {“status”:200,”msg”:”OK”,”data”:null}</p><hr><h5 id="Q-NoSuchBean-异常"><a href="#Q-NoSuchBean-异常" class="headerlink" title="Q:NoSuchBean 异常"></a>Q:NoSuchBean 异常</h5><p>org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.e3mall.service.ItemDescService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: <a href="mailto:{@org.springframework.beans.factory.annotation.Autowired" target="_blank" rel="noopener">{@org.springframework.beans.factory.annotation.Autowired</a>(required=true)}</p><p>A:在 applicationContext-service.xkml 发布服务后，没有在 springmvc.xml 引用服务</p><hr><h5 id="Q-Linux-Tomcat-启动报错-ConnectException"><a href="#Q-Linux-Tomcat-启动报错-ConnectException" class="headerlink" title="Q:Linux Tomcat 启动报错 ConnectException"></a>Q:Linux Tomcat 启动报错 ConnectException</h5><p>Caused by: java.net.ConnectException: Connection refused<br>        at java.net.PlainSocketImpl.socketConnect(Native Method)<br>        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)<br>        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)<br>        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)<br>        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)<br>        at java.net.Socket.connect(Socket.java:579)<br>        at java.net.Socket.connect(Socket.java:528)<br>        at java.net.Socket.&lt;init>(Socket.java:425)<br>        at java.net.Socket.&lt;init>(Socket.java:241)<br>        at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:258)<br>        at com.mysql.jdbc.MysqlIO.&lt;init>(MysqlIO.java:305)<br>        … 19 more</p><p>A:之前部署的一个无法连接到 mysql 导致的，删除该 tomcat/webapps 下的项目</p><hr><h5 id="Q：solr-启动报错"><a href="#Q：solr-启动报错" class="headerlink" title="Q：solr 启动报错"></a>Q：solr 启动报错</h5><p>HTTP Status 500 - {msg=SolrCore ‘collection1’ is not available due to init failure: Could not load conf for core collection1: Error loading solr config from /user/local/tomcat/webapps/solrhome/collection1/conf/solrconfig.xml,trace=org.apache.solr.common.SolrException: SolrCore ‘collection1’ is not available due to init failure: Could not load conf for core collection1: Error loading solr config from /user/local/tomcat/webapps/solrhome/collection1/conf/solrconfig.xml at </p><p>A:solr 的配置文件配置错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If you are getting above error it is mainly because of improper configuration in specified in tomcat6/webapps/solr/WEB-INF/web.xml</span><br><span class="line">&lt;env-entry&gt;</span><br><span class="line">&lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class="line">&lt;env-entry-value&gt;/home/solr&lt;/env-entry-value&gt;  —–&gt; provide correct path to your solr installation</span><br><span class="line">&lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class="line">&lt;/env-entry&gt;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://pritisolanki.wordpress.com/tag/solrcore-collection1-is-not-available-due-to-init-failure/" target="_blank" rel="noopener">https://pritisolanki.wordpress.com/tag/solrcore-collection1-is-not-available-due-to-init-failure/</a></p></blockquote><hr><h5 id="Q-BindingException"><a href="#Q-BindingException" class="headerlink" title="Q: BindingException"></a>Q: BindingException</h5><p>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): cn.e3mall.search.mapper.ItemMapper.getItemList</p><p>A：在放置 dao、mapper 的 pom 文件下添加 xml 扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果不添加此节点mybatis的mapper.xml文件都会被漏掉。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>cn.e3mall.search.mapper<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在将默认的 resource 扫描地址也添加进去--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q-tomcat-启动-dubbo-无法访问"><a href="#Q-tomcat-启动-dubbo-无法访问" class="headerlink" title="Q:tomcat 启动 dubbo 无法访问"></a>Q:tomcat 启动 dubbo 无法访问</h5><p>tomcat 主页可以访问，访问 dubbo 失败</p><p>三月 18, 2019 11:47:31 下午 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br>严重: The web application [/dubbo-admin-2.5.4] appears to have started a thread named [DubboRegistryFailedRetryTimer-thread-1] but has failed to stop it. This is very likely to create a memory leak.<br>三月 18, 2019 11:47:31 下午 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br>严重: The web application [/dubbo-admin-2.5.4] appears to have started a thread named [ZkClient-EventThread-17-127.0.0.1:2181] but has failed to stop it. This is very likely to create a memory leak.<br>三月 18, 2019 11:47:31 下午 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br>严重: The web application [/dubbo-admin-2.5.4] appears to have started a thread named [localhost-startStop-1-SendThread(localhost:2181)] but has failed to stop it. This is very likely to create a memory leak.<br>三月 18, 2019 11:47:31 下午 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br>严重: The web application [/dubbo-admin-2.5.4] appears to have started a thread named [localhost-startStop-1-EventThread] but has failed to stop it. This is very likely to create a memory leak.</p><p>A:war 包名需要跟访问地址一致</p><hr><h5 id="Q-默认用户密码登录不了-dubbo"><a href="#Q-默认用户密码登录不了-dubbo" class="headerlink" title="Q:默认用户密码登录不了 dubbo"></a>Q:默认用户密码登录不了 dubbo</h5><p>A:在 dubbo.properties 配置文件中修改用户密码，该文件在 dubbo 目录下</p><p>配置文件为dubbo.properties，配置如下</p><p>dubbo.registry.address=zookeeper://127.0.0.1:2182<br>dubbo.admin.root.password=admin</p><blockquote><p>参考：<a href="https://blog.csdn.net/lansedeshuyue/article/details/49911849" target="_blank" rel="noopener">https://blog.csdn.net/lansedeshuyue/article/details/49911849</a> </p></blockquote><hr><h5 id="Q-mapper-xml-扫描不到"><a href="#Q-mapper-xml-扫描不到" class="headerlink" title="Q: mapper.xml 扫描不到"></a>Q: mapper.xml 扫描不到</h5><p>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): cn.e3mall.search.mapper.ItemMapper.getItemList<br>    at org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:189)<br>    at org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:43)<br>    at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:58)<br>    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:51)<br>    at com.sun.proxy.$Proxy32.getItemList(Unknown Source)<br>    at cn.e3mall.service.impl.SearchItemServiceImpl.importAllItems(SearchItemServiceImpl.java:28)</init></init></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java/cn/e3mall/search/mapper<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在将默认的 resource 扫描地址也添加进去--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 <code>&lt;directory&gt;src/main/java/cn/e3mall/search/mapper&lt;/directory&gt;</code>改为 </p><p><code>&lt;directory&gt;src/main/java&lt;/directory&gt;</code></p><hr><h5 id="Q：添加查询列表错误"><a href="#Q：添加查询列表错误" class="headerlink" title="Q：添加查询列表错误"></a>Q：添加查询列表错误</h5><p>org.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Document is missing mandatory uniqueKey field: id</p><p>A：添加字段时字段名错误</p><hr><h5 id="Q-redis-取不到线程池"><a href="#Q-redis-取不到线程池" class="headerlink" title="Q: redis 取不到线程池"></a>Q: redis 取不到线程池</h5><p>redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool<br>    at redis.clients.util.Pool.getResource(Pool.java:50)<br>    at redis.clients.jedis.JedisPool.getResource(JedisPool.java:86)<br>    at cn.e3mall.common.jedis.JedisClientPool.hget(JedisClientPool.java:76)<br>    at cn.e3mall.content.service.impl.ContentServiceImpl.getContentListByCid(ContentServiceImpl.java:53)</p><p>A:没有开启 redis</p><hr><h5 id="Q-HTTP-Status-500-Request-processing-failed"><a href="#Q-HTTP-Status-500-Request-processing-failed" class="headerlink" title="Q:HTTP Status 500 - Request processing failed"></a>Q:HTTP Status 500 - Request processing failed</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method search in the service cn.e3mall.search.service.SearchService. Tried 3 times of the providers [192.168.25.1:20882] (1/1) from the registry 192.168.25.128:2181 on the consumer 192.168.25.1 using the dubbo version 2.5.3. Last error is: Failed to invoke remote method: search, provider: dubbo://192.168.25.1:20882/cn.e3mall.search.service.SearchService?anyhost=true&amp;application=e3-portal-web&amp;check=false&amp;dubbo=2.5.3&amp;interface=cn.e3mall.search.service.SearchService&amp;methods=search&amp;pid=213164&amp;revision=0.0.1-SNAPSHOT&amp;side=consumer&amp;timeout=600000&amp;timestamp=1553045729262, cause: Failed to send response: Response [id=6, version=2.0.0, status=20, event=false, error=null, result=RpcResult [result=cn.e3mall.common.pojo.SearchResult@1a289dc, exception=null]], cause: java.lang.RuntimeException: Serialized class cn.e3mall.common.pojo.SearchItem must implement java.io.Serializable</span><br><span class="line"> Java field: private java.util.List cn.e3mall.common.pojo.SearchResult.itemList</span><br><span class="line">java.lang.RuntimeException: Serialized class cn.e3mall.common.pojo.SearchItem must implement java.io.Serializable</span><br><span class="line"> Java field: private java.util.List cn.e3mall.common.pojo.SearchResult.itemList</span><br></pre></td></tr></table></figure><p>A：Serialized class cn.e3mall.common.pojo.SearchItem must implement java.io.Serializable</p><p>该 pojo 需要实现序列化</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;e3mall&quot;&gt;&lt;a href=&quot;#e3mall&quot; class=&quot;headerlink&quot; title=&quot;e3mall&quot;&gt;&lt;/a&gt;e3mall&lt;/h4&gt;&lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;分布式&lt;/p&gt;
&lt;p&gt;需要按照功能点把系统拆分，拆分成独立的功能。单独为某一个节点添加服务器。需要系统之间配合才能完成整个业务逻辑。叫做分布式。&lt;/p&gt;
&lt;p&gt;分布式架构：多个子系统相互协作才能完成业务流程。系统之间需要进行通信。&lt;/p&gt;
&lt;p&gt;集群：同一个工程部署到多台服务器上。tomcat 集群节点数量服务能力会先上升后下降，因为节点间需要传递 session 数据要用到广播，随着节点增加，会在服务器间消耗过多带宽，从而下降服务能力，一般5个节点为佳。&lt;/p&gt;
&lt;p&gt;分布式架构：&lt;/p&gt;
&lt;p&gt;把系统按照模块拆分成多个子系统。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;1、把模块拆分，使用接口通信，降低模块之间的耦合度。&lt;/p&gt;
&lt;p&gt;2、把项目拆分成若干个子项目，不同的团队负责不同的子项目。&lt;/p&gt;
&lt;p&gt;3、增加功能时只需要再增加一个子项目，调用其他系统的接口就可以。&lt;/p&gt;
&lt;p&gt;4、可以灵活的进行分布式部署。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ssm" scheme="http://yoursite.com/tags/ssm/"/>
    
      <category term="javaweb" scheme="http://yoursite.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>ssm</title>
    <link href="http://yoursite.com/2019/03/01/ssm/"/>
    <id>http://yoursite.com/2019/03/01/ssm/</id>
    <published>2019-03-01T08:19:19.000Z</published>
    <updated>2019-03-11T01:10:12.406Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h4><p>Mybatis 原身 Ibatis ，是 apache 的一个开源项目，2010 年迁移到谷歌，更名为 Mybatis，2013 年放到 github，ORM 架构。</p><ul><li><p>原生 dao 缺陷</p><p>Dao方法体存在重复代码：通过SqlSessionFactory创建SqlSession，调用SqlSession的数据库操作方法</p><p>调用sqlSession的数据库操作方法需要指定statement的id，这里存在硬编码，不得于开发维护。</p></li></ul><a id="more"></a><h5 id="Mybatis-基础"><a href="#Mybatis-基础" class="headerlink" title="Mybatis 基础"></a>Mybatis 基础</h5><p>#{} select * from  user where id = ?   占位符 ? == ‘字’</p><p>select * from user  where id = #{v}</p><p>${} select * from user  where username like ‘%字%’      字符串拼接</p><p>select * from user where username like ‘%${value}%’</p><p>‘%${value}%’  == “%”#{value}”%”   可以防止 sql 语句注入</p><h5 id="Mapper-动态开发"><a href="#Mapper-动态开发" class="headerlink" title="Mapper 动态开发"></a>Mapper 动态开发</h5><p>Mapper接口开发方法只需要程序员编写Mapper接口（相当于Dao接口），由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。（实现类由系统自动生成）</p><p>Mapper接口开发需要遵循以下规范：</p><p>1、  Mapper.xml文件中的namespace与mapper接口的类路径相同。</p><p>2、  Mapper接口方法名和Mapper.xml中定义的每个statement的id相同 </p><p>3、  Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同</p><p>4、  Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</p><p>创建 Mapper 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替代 UserDao 的动态代理开发接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapperDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遵循四个原则</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口方法名与 Mapper.xml 中的 id 名一致</span></span><br><span class="line"><span class="comment">     * 返回值类型与 Mapper.xml 文件中的返回值类型 resuletType 一致</span></span><br><span class="line"><span class="comment">     * 入参类型与 Mapper.xml 的入参类型 parameterType 一致</span></span><br><span class="line"><span class="comment">     * 将 Mapper.xml 命名空间 mapper.namespace 与该接口绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建 sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//        sqlSession 帮助生成实现类（给他一个接口，他会生成一个实现类）</span></span><br><span class="line">        UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line">        User user = userMapperDao.queryUserById(<span class="number">27</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.itcast.mybatis.mapper.UserMapperDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--值查询为 #&#123;aaa&#125; aaa 可以为任何值，只要 id 与方法第一个参数对应，入参 parameterType 与第二个参数类型对应即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cn.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from User where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--模糊查询的值只能为 value，id 与方法第一个参数对应，入参 parameterType 与第二个参数对应，返回值为 List&lt;User&gt; 但是只要写 User 即可，即返回一个泛型类型即可--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--'%$&#123;value&#125;' 用于字符串拼接，也可以用 "%"#&#123;&#125;"%" 方式，sql 语句中就是 "%"张"%" 形式的字符串拼接，使用这种 # 方式形参可以任意写，且可以防止 sql 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUser"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"cn.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from User where username like '%$&#123;value&#125;%';</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增加用户，并返回自增长的 id 值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">            select LAST_INSERT_ID();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,birthday,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserById"</span> <span class="attr">parameterType</span>=<span class="string">"cn.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id= $&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置-SqlMapConfig-xml-文件一些属性"><a href="#配置-SqlMapConfig-xml-文件一些属性" class="headerlink" title="配置 SqlMapConfig.xml 文件一些属性"></a>配置 SqlMapConfig.xml 文件一些属性</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和spring整合后 environments配置将废除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用jdbc事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据返回值判断 sqlSession.selectOne() 还是 sqlSession.selectList()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名查询用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">queryUserByUsername</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><p>SqlMapConfig 的 properties</p><p>引入配置文件，键值对形式</p><p><code>&lt;properties resources=&quot;jdbc.properties&quot;/&gt;</code></p><p>SqlMapConfig  自定义包名(别名)</p><p>用于简化 xml 的代码量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个命名别名--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias alias="Orders" type="cn.itcast.mybatis.pojo.Orders" /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（大小写不敏感）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.itcast.mybatis.pojo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和spring整合后 environments配置将废除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用jdbc事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/itcast/mybatis/sqlmap/User.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/itcast/mybatis/sqlmap/OrderMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SqlMapConfig  的 Mapper.xml 的位置，写 sql 语句的文件的位置 设置</p><ul><li><p>resources 直接指定 Mapper.xml 的位置</p></li><li><p>class 引入写 IUserDao 接口，根据接口名称来找到 UserMapper.xml </p><p>此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。</p></li><li><p>注册指定包下所有 mapper 接口</p><p>此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。</p><p>如果用resources 与 class 每有一个 mapper 都需要配置一个 class 或 resources，所以一般用 package 方法</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"sqlmap/User.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.xxx.mapper.IUserDao.java"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.xxx.mybatis.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Mapper-及-POJO-包装类的使用"><a href="#Mapper-及-POJO-包装类的使用" class="headerlink" title="Mapper 及 POJO 包装类的使用"></a>Mapper 及 POJO 包装类的使用</h5><p><a href="https://blog.csdn.net/wangkaichenjuan/article/details/70053209" target="_blank" rel="noopener">Intellij IDEA生成serialVersionUID</a></p><p>Mybatis使用ognl表达式解析对象字段的值，#{}或者${}括号中的值为pojo属性名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替代 UserDao 的动态代理开发接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapperDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遵循四个原则</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口方法名与 Mapper.xml 中的 id 名一致</span></span><br><span class="line"><span class="comment">     * 返回值类型与 Mapper.xml 文件中的返回值类型 resuletType 一致</span></span><br><span class="line"><span class="comment">     * 入参类型与 Mapper.xml 的入参类型 parameterType 一致</span></span><br><span class="line"><span class="comment">     * 将 Mapper.xml 命名空间 mapper.namespace 与该接口绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByQueryVo</span><span class="params">(QueryVo vo)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">countUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 pojo 包装类包装 User 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">158137506017091245L</span>;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper.xml 配置 sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.itcast.mybatis.mapper.UserMapperDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据用户名模糊查询，入参为 pojo 包装类的 QueryVo，返回 pojo 的 User 类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByQueryVo"</span> <span class="attr">parameterType</span>=<span class="string">"cn.itcast.mybatis.pojo.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"cn.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from User where username like '%$&#123;user.username&#125;%';</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询所有数据条数，没有入参--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countUser"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">    select count(*) from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    利用 before 在 test 前注入需要的 工厂</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建 sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//        sqlSession 帮助生成实现类（给他一个接口，他会生成一个实现类）</span></span><br><span class="line">        UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line">        User user = userMapperDao.queryUserById(<span class="number">27</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据用户名模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestQueryVo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建 sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//        sqlSession 帮助生成实现类（给他一个接口，他会生成一个实现类）</span></span><br><span class="line">        UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line">        QueryVo vo = <span class="keyword">new</span> QueryVo(<span class="keyword">new</span> User(<span class="string">"王"</span>));</span><br><span class="line">        List&lt;User&gt; list = userMapperDao.findUserByQueryVo(vo);</span><br><span class="line">        <span class="keyword">for</span>(User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//     &lt;!--查询所有数据条数--&gt;</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestQueryUserCount</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建 sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//        sqlSession 帮助生成实现类（给他一个接口，他会生成一个实现类）</span></span><br><span class="line">        UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line">        Integer count = userMapperDao.countUser();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="resultMap-使用"><a href="#resultMap-使用" class="headerlink" title="resultMap 使用"></a>resultMap 使用</h5><p>pojo 属性名 与 表的字段名 不一致时，使用 resultMap 来映射（一致时用 resultType，自动映射）</p><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.itcast.mybatis.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;select id="selectOrdersList" resultType="cn.itcast.mybatis.pojo.Orders"&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将 pojo 中与数据库字段不同的字段进行 result 映射，resultMap 的 id 对应下面 select 中 resultMap 的值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type 为返回值 pojo--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orders"</span> <span class="attr">type</span>=<span class="string">"cn.itcast.mybatis.pojo.Orders"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOrdersList"</span> <span class="attr">resultMap</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">        select * from orders;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="动态-sql-的标签使用"><a href="#动态-sql-的标签使用" class="headerlink" title="动态 sql 的标签使用"></a>动态 sql 的标签使用</h5><p>sql、whrere、if</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sql 标签用来截取一个 sql 片段，可以在其他标签中用 include 重复引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectF"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据性别和姓名查询用户 where 标签用来去除第一个 前 and--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserBySexAndUsername"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectF"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex!=null and sex!=''"</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username!=''"</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据多个 ID 查找多个用户</p><p>foreach 标签</p><p>mapper.xml 查询语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据多个 id 查询用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByIds"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectF"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"idsList"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserMapperDao</p><p><code>public List&lt;User&gt; selectUserByIds(QueryVo vo);</code></p><p>QueryVo 中生成 idsList 字段及 get set 属性</p><p><code>public List&lt;Integer&gt; idsList;</code></p><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUserByIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">16</span>);</span><br><span class="line">    ids.add(<span class="number">27</span>);</span><br><span class="line">    ids.add(<span class="number">32</span>);</span><br><span class="line">    QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    vo.setIdsList(ids);</span><br><span class="line">    List&lt;User&gt; users = userMapperDao.selectUserByIds(vo);</span><br><span class="line">    <span class="keyword">for</span>(User u : users)&#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入的是 QueryVo 包装类，那么用其中的一个集合或数组的属性名作为 collection 的值</p><p>如果传入的是 List 集合 或  [] 数组，那么 collection 值为 list 或 array</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 根据多个 id 查询用户</span><br><span class="line">     */</span><br><span class="line">    public List&lt;User&gt; selectUserByIdsList(List&lt;Integer&gt;ids);</span><br><span class="line">    &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    public List&lt;User&gt; selectUserByIdsArray(Integer[]ids);</span><br><span class="line">    &lt;foreach collection=&quot;array&quot; item=&quot;id&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">    //内部封装了名为 idsList 的集合</span><br><span class="line">    public List&lt;User&gt; selectUserByIds(QueryVo vo);</span><br><span class="line">    &lt;foreach collection=&quot;idsList&quot; item=&quot;id&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span><br></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据多个 id 查询用户 QueryVo--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByIds"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectF"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"idsList"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据多个 id 查询用户 Integer[]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByIdsArray"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectF"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据多个 id 查询用户 Integer[]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByIdsList"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectF"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MapperDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据多个 id 查询用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUserByIdsList</span><span class="params">(List&lt;Integer&gt;ids)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUserByIdsArray</span><span class="params">(Integer[]ids)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUserByIds</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据多个 id 查询用户 queryVo 包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUserByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public List&lt;User&gt; selectUserByIds(QueryVo vo);</span></span><br><span class="line"><span class="comment">//        QueryVo 中包含 List&lt;Integer&gt;</span></span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">16</span>);</span><br><span class="line">        ids.add(<span class="number">27</span>);</span><br><span class="line">        ids.add(<span class="number">32</span>);</span><br><span class="line">        QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">        vo.setIdsList(ids);</span><br><span class="line">        List&lt;User&gt; users = userMapperDao.selectUserByIds(vo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(User u : users)&#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 根据多个 id 查询用户 Integer[] 数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUserByIdsArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public List&lt;User&gt; selectUserByIdsArray(Integer[]ids);</span></span><br><span class="line"><span class="comment">//        Integer[] 数组类型</span></span><br><span class="line"></span><br><span class="line">        Integer[] ids = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">27</span>&#125;;</span><br><span class="line"><span class="comment">//        ids[0]=1;</span></span><br><span class="line"><span class="comment">//        ids[1]=27;</span></span><br><span class="line"><span class="comment">//        ids[2]=32;</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userMapperDao.selectUserByIdsArray(ids);</span><br><span class="line">        <span class="keyword">for</span>(User u : users)&#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据多个 id 查询用户 List&lt;Integer&gt; 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUserByIdsList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public List&lt;User&gt; selectUserByIdsList(List&lt;Integer&gt;ids);</span></span><br><span class="line"><span class="comment">//        List &lt;Integer&gt; 集合类型</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">25</span>);</span><br><span class="line">        list.add(<span class="number">32</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapperDao.selectUserByIdsList(list);</span><br><span class="line">        <span class="keyword">for</span>(User u : users)&#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h5 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h5><p>订单与用户是多对一关系，</p><p>但是以订单为中心，在内部关联一个用户对象，查询用户是一对一关系</p><p>一对一映射，多表查询时不能省略 resultMap 中的 result 字段关系映射</p><p>一对一查询    订单为中心 相对用户 一对一 Orders 对象（中加入用户 User 对象）</p><p>一对多关联    用户为中心 相对订单一对多 User 对象（中加入 List\&lt;Orders> 对象）</p><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--* 一对一关联查询,以订单为中心关联用户--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--public List&lt;Orders&gt; selectOrders();--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">type</span>=<span class="string">"Orders"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在有多表查询时不能省略 result 属性关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一对一映射标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOrders"</span> <span class="attr">resultMap</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">     o.id,</span><br><span class="line">     o.user_id,</span><br><span class="line">     o.number,</span><br><span class="line">     o.createtime,</span><br><span class="line">     u.username</span><br><span class="line">     from</span><br><span class="line">     orders o</span><br><span class="line">     left join</span><br><span class="line">     user u</span><br><span class="line">     on o.user_id = u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Orders&gt; <span class="title">selectOrders</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对一根据订单查询用户相关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建 sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//        sqlSession 帮助生成实现类（给他一个接口，他会生成一个实现类）</span></span><br><span class="line">        OrderMapper orderMapper = sqlSession.getMapper(OrderMapper.class);</span><br><span class="line">        List&lt;Orders&gt; orders = orderMapper.selectOrders();</span><br><span class="line">        <span class="keyword">for</span> (Orders order : orders) &#123;</span><br><span class="line">            System.out.println(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>一对多</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--* 一对多关联--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--public List&lt;User&gt; selectUserList();--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对多 User 中的 List&lt;Orders&gt; 集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"ordersList"</span> <span class="attr">ofType</span>=<span class="string">"Orders"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"number"</span> <span class="attr">column</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserList"</span> <span class="attr">resultMap</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">     o.id oid,</span><br><span class="line">     o.user_id,</span><br><span class="line">     o.number,</span><br><span class="line">     o.createtime,</span><br><span class="line">     u.username</span><br><span class="line">     from user u</span><br><span class="line">     left join orders o</span><br><span class="line">     on o.user_id = u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对多</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建 sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//        sqlSession 帮助生成实现类（给他一个接口，他会生成一个实现类）</span></span><br><span class="line">        OrderMapper orderMapper = sqlSession.getMapper(OrderMapper.class);</span><br><span class="line">        List&lt;User&gt; users = orderMapper.selectUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h5 id="Mybatis-Spring-整合"><a href="#Mybatis-Spring-整合" class="headerlink" title="Mybatis Spring 整合"></a>Mybatis Spring 整合</h5><ul><li>准备工作</li></ul><p>Spring 包 、Mybatis 包、Spring-Mybatis 整合包、数据库驱动包、连接池包、log4j 包</p><p>SqlMapConfig.xml 配置别名\&lt;typeAliases>、配置扫描 Mapper 下的 xml \&lt;Mappers></p><p>applicationContext.xml 配置文件、数据源、Mybatis 工厂（数据源，核心配置文件所在位置路径）</p><ul><li><p>方式一：原始 dao 开发</p><p>手动实例化 Dao 在 impl 中</p><p> id ApplicationContext  ac = new ApplicationContext(“applicationContext.xml”);</p><p>ac.getBean(id);</p><p>Dao 实现类继承 sqlSessionDaoSupport，该 Support 中有 setSqlSessionFactory 方法</p><p>调用时直接 this.getSqlSession.insert() 保存 SqlSession</p></li><li><p>方式二：Mapper 动态代理开发</p><p>创建接口 Mapper 文件  然后 Mybatis 会帮你生成实现类，本质还是实例化接口，不过是由 Mybatis 来写该实现类，所以可以减少代码量</p><p>注入接口、</p><p>接口所在类路径</p></li><li><p>方式三：Mapper 动态代理扫描（增强）</p><p>可以注入工厂也可以不注入，自己会去寻找 spring 实例化的工厂 bean</p><p>接口所在基本包，用来扫描基本包下的接口</p></li></ul><p>application.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mybatis 工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--核心配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：dao 原始开发，实例化 dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.itcast.mybatis.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入到 UserDaoImpl 的父类的 setSqlSessionFactory 方法中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--方式二：mybatis 动态代理开发--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MapperFactoryBean 用来替代 getMapper 方法，</span></span><br><span class="line"><span class="comment">    创建 mapper 的实现类需要提供一个 接口.class 以及 sqlSessionFactory，所以注入属性</span></span><br><span class="line"><span class="comment">    方法：SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">    UserMapperDao userMapperDao = sqlSession.getMapper(UserMapperDao.class);</span></span><br><span class="line"><span class="comment">    都在 MaperFactoryBean 中有所实现--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="mapperInterface" value="com.itcast.mybatis.mapper.UserMapper"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--方式三：动态代理开发增强版，扫描包,不需要注入 sqlSessionFactoryBean ，会自动去找 spring 中实例化的 sqlSessionFactory</span></span><br><span class="line"><span class="comment">    只需要指定基本包，它就会去找包中及其子包中所有的接口来创建 Mapper 的实例，不需要 id 属性</span></span><br><span class="line"><span class="comment">    普通的动态代理如果有多个 UserMapper 等接口，需要配置很多 interface--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.itcast.mybatis.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一种 dao 原始方法</p><p>创建 interface 并实现 dao</p><p>daoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.mybatis.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itcast.mybatis.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原始 dao 开发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过 spring 在父类中 set 方法注入 sqlsession</span></span><br><span class="line"><span class="comment">    public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123;</span></span><br><span class="line"><span class="comment">        if (!this.externalSqlSession) &#123;</span></span><br><span class="line"><span class="comment">            this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    通过 get 方法获得 session</span></span><br><span class="line"><span class="comment">        public SqlSession getSqlSession() &#123;</span></span><br><span class="line"><span class="comment">        return this.sqlSession;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    通过父类对象获得 sqlSession</span></span><br><span class="line"><span class="comment">//    public void insertUser()&#123;</span></span><br><span class="line"><span class="comment">//        this.getSqlSession().insert();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理开发</p><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itcast.mybatis.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itcast.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--值查询为 #&#123;aaa&#125; aaa 可以为任何值，只要 id 与方法第一个参数对应，入参 parameterType 与第二个参数类型对应即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from User where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2. 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itcast.mybatis.pojo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itcast.mybatis.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态代理方法（二、三）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itcast.mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        可以使用两种方法获得 userMapper</span></span><br><span class="line"><span class="comment">//        UserMapper mapper = context.getBean(UserMapper.class);</span></span><br><span class="line">        UserMapper userMapper = (UserMapper) context.getBean(<span class="string">"userMapper"</span>);</span><br><span class="line">        User user = userMapper.queryUserById(<span class="number">27</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h5><p>Dao 接口、Mapper POJO（返回值）、POJO Example（条件查询时放查询条件的对象）</p><hr><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p>ORM：Object Relational Mapping</p><h5 id="Springmvc-与-struts2-区别"><a href="#Springmvc-与-struts2-区别" class="headerlink" title="Springmvc 与 struts2 区别"></a>Springmvc 与 struts2 区别</h5><p>springmvc 是将变量绑在形参上；struts2 绑定在成员变量上</p><p>springmvc 是单例，单例指以方法为单位，每一个请求创建一个方法副本，让请求去访问该方法副本；struts2 是多例的，多例是指以类为单位，每一个请求创建一个类，让请求去访问方法</p><p>springmvc 存数据用 ModelAndView.addObject 底层是 request.setAttribute()，将数据放在 request 域中，参数解析器解析 request 请求中内容，并赋值给形参；而 struts 有一个值栈，将数据放在值栈中，通过 OGNL 存取数据</p><p>springmvc 入口是前端控制器（Servlet）；struts 入口是过滤器（Filter）</p><h5 id="springmvc-处理流程"><a href="#springmvc-处理流程" class="headerlink" title="springmvc 处理流程"></a>springmvc 处理流程</h5><p>Springmvc 处理流程：【客户端】–用户请求–【前端控制器（dispatcherSerlvet）】–请求业务处理</p><p>–【处理器 （handler）】–返回处理结果–【前端控制器（dispatcherSerlvet）】–处理结果转发给 jsp –</p><p>【jsp 页面】– 返回 html 页面 –【前端控制器（dispatcherSerlvet）】– 响应用户–【客户端】</p><ul><li><p>入门 springmvc 配置流程</p><ol><li><p>创建 web 工程</p></li><li><p>导入 jar 包</p></li><li><p>在 web.xml 中配置前端控制器（指定上下文路径 classpath:springmvc.xml）拦截规则：/<em>、/、\</em>.action</p></li><li><p>在 springmvc.xml 配置扫描 @Controller 注解</p></li><li><p>书写 Action Controller Handler 处理器，类上添加注解 @Controller</p></li><li><p>书写方法，添加注解 @RequestMapping （value=请求路径）.action ，acion 可以省略</p></li></ol></li><li><p>架构 一个中心：前端控制器</p><p>三大组件：处理器映射器、处理器适配器、视图解析器 由springmvc 提供</p><p>Handler 处理器、JSP 视图 由程序员编写</p></li><li><p>默认三大组件</p><p>默认的已废弃需要自己配置</p><p>RequestMappingHandlerMapping 处理器映射器</p><p>RequestMappingHandlerAdapter 处理器适配器</p><p>可以用 \<a href="mvc:annotation-driver/\" target="_blank" rel="noopener">mvc:annotation-driver/\</a> 替代以上两个配置</p><p>可以配置视图解析器 InternalResourceViewResolver 来简化代码前后缀</p></li><li><p>整合 Mybatis</p><ol><li><p>SqlMapConfig.xml 配置 mybatis 的核心配置文件（配置别名 typeAliases，可以将 pojo 包中类设置别名，不需要再书写完整路径；mappers 不需要再配置，因为 spring 的 appicationContext.xml 已经配置了MapperScannerConfigurer 来扫描 dao 下的基本包）</p></li><li><p>配置 spring  applicationContext.xml 数据源 Druid;     读取 db.properties;  Mybatis 的工厂；Mybatis Mapper 动态代理开发扫描方式； 基本包</p></li><li><p>创建 db.properties </p></li><li><p>事务、扫描 @Service、spring+mybatis</p></li><li>创建 springmvc.xml 三大组件  扫描基本包（com.itcast） 会扫描该包下所有 controller 和 service ，所以可以将第 4 步扫描 @Service 省略 </li><li>web.xml 配置监听器，读取 applicationContext.xml 上下文；并配置前端控制器，读取 springmvc.xml ；配置 Post 提交乱码 Filtter 过滤器</li></ol></li><li><p>参数绑定</p><ol><li><p>默认参数绑定 Request Response Session     Model ModelMap 是实现关系</p></li><li><p>简单类型参数绑定  方法的形参上绑定基本类型（Integer id，String，Double，Boolen,double）</p></li><li><p>POJO 类型 Items items ，表单中需要 name 与 Items 对象中属性名一致</p></li><li><p>包装类型 QueryVo vo（包装 private Items items） 表单需要 items.username</p></li><li><p>自定义参数类型</p><p>在 springmvc 中配置转换器的工厂 Converters ， list set array&lt;bean class=自定义转换器类</p><p>创建自定义转换器类 实现 Converter\&lt;S,T>  ；S 是页面传过来的类型，T 是转换后的类型</p></li></ol></li></ul><p>前端控制器一实例化就会去加载默认组件 spring-webmvc.jar 包，其下的 DispatcherServlet.properties</p><p> 配置文件中配置了 HandlerMapping（处理器映射器）、HandlerAdapter（处理器适配器）、</p><p>spring mvc拦截器配置 /<em> （真）全拦截；struts2 的 /</em> 不拦截 css/jsp/js/png 等（不建议）</p><p>spring mvc 拦截器 .action  .do 拦截 action 与 do 后缀的请求，（用于 ERP、 进销存系统、）</p><p>spring mvc 拦截器配置 / 全拦截，不拦截 jsp 页面，但是会拦截样式 css、js 等；struts2 的 /* 不拦截 jsp、css、js、png 等，对静态资源放行（建议使用，用于前台面向消费者）</p><p>静态资源放行</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--放行静态资源，放行 web 文件夹下的静态资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span>  <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span>  <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span>  <span class="attr">location</span>=<span class="string">"/fonts/"</span> <span class="attr">mapping</span>=<span class="string">"/fonts/**"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h5><p>配置前端控制器</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--因为 springmvc 跟 spring 是无缝整合的，所以配置配置文件路径放在一起--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context-param&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/context-param&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果没有配置，默认找/WEB-INF/"servlet名称"-servlet.xml--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 springmvc.xml 开启 spring 注解扫描（将其配置到 web.xml 使其能进行用户请求的拦截，前端控制器是 springmvc 的入口，对应 sturts2 的 filter 过滤器）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启 spring 注释扫描，@Controller，@Service...--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--实例化视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以不自己配置，但是配置后可以简化 controller 的 ViewName（统一前后缀）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建 controller 层或 handler 层 - springmvc（就是 web 层-servlet 或 action 层-struts2 ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面访问该路径（localhost:8080+路径）即可访问到该 mav 所返回的页面</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/item/itemlist.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">itemList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建页面需要显示的商品数据</span></span><br><span class="line">        List&lt;Items&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Items(<span class="number">1</span>, <span class="string">"1小米 RedMi3"</span>, <span class="number">999f</span>, <span class="keyword">new</span> Date(), <span class="string">"牛逼！1"</span>));</span><br><span class="line"></span><br><span class="line">        是springmvc 提供的对象，由 处理器（Handler） 处理请求后返回响应，再由前端控制器（DispatcherServlet）转发给 jsp 页面</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.addObject(<span class="string">"itemList"</span>,list);</span><br><span class="line">        mav.setViewName(<span class="string">"/WEB-INF/jsp/itemList.jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="ssm-整合"><a href="#ssm-整合" class="headerlink" title="ssm 整合"></a>ssm 整合</h5><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--因为 springmvc 跟 spring 是无缝整合的，所以配置配置文件路径放在一起--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context-param&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/context-param&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置监听器读取配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果没有配置，默认找/WEB-INF/"servlet名称"-servlet.xml--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mybatis 工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--核心配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式三：动态代理开发增强版，扫描包,不需要注入 sqlSessionFactoryBean ，会自动去找 spring 中实例化的 sqlSessionFactory</span></span><br><span class="line"><span class="comment">    只需要指定基本包，它就会去找包中及其子包中所有的接口来创建 Mapper 的实例，不需要 id 属性</span></span><br><span class="line"><span class="comment">    普通的动态代理如果有多个 UserMapper 等接口，需要配置很多 interface--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.itcast.springmvc.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解,给驱动提供事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启 spring 注释扫描，@Controller，@Service...--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itcast"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置处理器映射器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置处理器适配器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动 相当于映射器加适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--实例化视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以不自己配置，但是配置后可以简化 controller 的 ViewName（统一前后缀）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2. 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itcast.springmvc.pojo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在 spring 配置文件中 applicationContext.xml 中配置了扫描全部基本包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mappers&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name="com.itcast.springmvc.dao"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/mappers&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>db.properties、log4j.properties 省略</p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itcast.springmvc.pojo.Items;</span><br><span class="line"><span class="keyword">import</span> com.itcast.springmvc.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/item/itemlist.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">itemList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从 mysql 查询需要展示的数据</span></span><br><span class="line">        List&lt;Items&gt; list = itemService.selectItemsList();</span><br><span class="line"></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.addObject(<span class="string">"itemList"</span>,list);</span><br><span class="line">        mav.setViewName(<span class="string">"itemList"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h5><p>因为 springmvc 是单例模式</p><p>单例模式是一个方法为一个模板，每有一个用户访问就创建一个模板的副本，让多个用户进行多线程访问</p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改页面</span></span><br><span class="line"><span class="comment">     * 入参 id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/itemEdit.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">edit</span><span class="params">(Integer id,HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpSession session,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//servlet 世代开发</span></span><br><span class="line"><span class="comment">//        可以直接从页面传递 id 过来</span></span><br><span class="line"><span class="comment">//        String sid = request.getParameter("id");</span></span><br><span class="line"><span class="comment">//        Integer id = Integer.parseInt(sid);</span></span><br><span class="line">        <span class="comment">//查询商品</span></span><br><span class="line">        Items item = itemService.selectItemById(id);</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"item"</span>,item);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"editItem"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>RequestMapping(url)  在类上加可以统一提取 方法中的路径前缀，窄化路径</p><p><code>@RequestMapping(&quot;/item/&quot;)</code></p><p>多请求路径，可以访问多个地址实现请求访问</p><p><code>@RequestMapping(value={&quot;/item/itemlist.action&quot;,&quot;/item/list.action&quot;})</code></p><p>方法限定，只能使用 get 或 post 提交响应</p><p><code>@RequestMapping(value=&quot;/update.action&quot;,method = {RequestMethod.POST,RequestMethod.GET})</code></p><hr><h5 id="controller-返回值类型"><a href="#controller-返回值类型" class="headerlink" title="controller 返回值类型"></a>controller 返回值类型</h5><ol><li><p>ModelAndView 万能的   带数据   返回视图路径后结束 全局异常处理会用到</p></li><li><p>String 只能返回视图路径  需要通过方法传参数 Model model，通过 model 带数据 官方推荐</p></li></ol><p>符合解耦合 数据 视图 分离 MVC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/item/itemlist.action"</span>,<span class="string">"/item/list.action"</span>&#125;)</span><br><span class="line">    <span class="comment">//传入 model ，用来给他赋值，传递到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">itemList</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从 mysql 查询需要展示的数据</span></span><br><span class="line">        List&lt;Items&gt; list = itemService.selectItemsList();</span><br><span class="line">        model.addAttribute(<span class="string">"itemList"</span>,list);</span><br><span class="line">        <span class="comment">//返回路径</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"itemList"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>void   ajax  请求 适合返回 json 格式数据（response 异步请求使用，不用刷页面），因为是请求转发，所以如果原本没有页面，直接访问该 action 转发后还是 404 not found。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/item/itemlist.action"</span>,<span class="string">"/item/list.action"</span>&#125;)</span><br><span class="line">    <span class="comment">//传入 model ，用来给他赋值，传递到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemList</span><span class="params">(Model model,HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从 mysql 查询需要展示的数据</span></span><br><span class="line">        List&lt;Items&gt; list = itemService.selectItemsList();</span><br><span class="line">        model.addAttribute(<span class="string">"itemList"</span>,list);</span><br><span class="line"><span class="comment">//ajax 异步请求数据不需要跳转页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"itemList"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重定向标签</p><p>重定向后网址改变，刷新后 request 的提交参数不保留</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/updateitem.action"</span>)</span><br><span class="line"><span class="comment">//    public ModelAndView updateitem(Items items)&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateitem</span><span class="params">(QueryVo vo)</span></span>&#123;</span><br><span class="line">        itemService.updateitem(vo.getItems());</span><br><span class="line"><span class="comment">//       修改后 重定向到列表页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/item/itemlist.action"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>内部转发标签</p><p><code>return &quot;forward:/item/itemlist.action&quot;;</code></p><p>转发后网址不会变，刷新后会提示是否重新提交表单</p><hr><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><p>在各个层之间捕获的异常抛出，最终到 controller 层，由 controller 层将异常抛给 前端控制器，前端控制器将异常交给 异常处理器（HandlerExceptionResolver）处理，它会调用一个实现类接口（自己编写接口，并配置到 spring 容器中实例化）来处理异常</p><p>异常处理器自定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理器自定义实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Object o 是发生异常的地方，结构：包名+类名+方法名（形参）的字符串</span></span><br><span class="line">        <span class="comment">//打日志，将 o 写到日志中（发布项目后在 tomcat 下的是 war 包，无法用开发工具查看；发布的 tomcat 在 Linux 服务器下，无法查看，需要打 log4j 日志）</span></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> MessageException)&#123;</span><br><span class="line">            <span class="comment">//预期异常</span></span><br><span class="line">            mav.addObject(<span class="string">"error"</span>,((MessageException) e).getMsg());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//运行时的未知异常</span></span><br><span class="line">            mav.addObject(<span class="string">"error"</span>,<span class="string">"未知异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mav.setViewName(<span class="string">"errors"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其配置到 springmvc.xml 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc 的异常处理器,自定义异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.itcast.springmvc.exception.CustomerExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在 controller 等层中定义可能发生异常的状况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 mysql 查询需要展示的数据</span></span><br><span class="line">List&lt;Items&gt; list = itemService.selectItemsList();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>==<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MessageException(<span class="string">"商品不能为空"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 MessageException 等自定义异常类，设置 msg 属性和 get set 方法</p><hr><h5 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h5><p>如果 idea 要进行图片上传路径设置，需要在 tomcat 设置中 Deployment 中配置 upload 路径，ApplicationContext 用来表示 localhost:8080 后所添加的路径，如果配置为 /spring_mvc 以后的访问路径就是 localhost:8080/spring_mvc/xxx.action，访问文件路径也是如此</p><p>可以将图片放在某一个盘符下，防止开发阶段的修改将该图片删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(value=<span class="string">"/updateitem.action"</span>)</span><br><span class="line"><span class="comment">//    public ModelAndView updateitem(Items items)&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateitem</span><span class="params">(QueryVo vo, MultipartFile pictureFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        保存图片到</span></span><br><span class="line"><span class="comment">//        用 uuid 作为图片名，且去除自动生成的 - ，将 36 位 uuid 变成 32 位</span></span><br><span class="line">        String name = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//截取后缀名</span></span><br><span class="line">        String ext = FilenameUtils.getExtension(pictureFile.getOriginalFilename());</span><br><span class="line"></span><br><span class="line">        pictureFile.transferTo(<span class="keyword">new</span> File(<span class="string">"D:\\upload\\"</span> + name + <span class="string">"."</span> + ext));</span><br><span class="line">        vo.getItems().setPic(name+<span class="string">"."</span>+ext);</span><br><span class="line"></span><br><span class="line">        itemService.updateitem(vo.getItems());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/itemEdit.action?id="</span>+vo.getItems().getId() ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>jsp 页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;商品图片&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;</span><br><span class="line">  &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;item.pic !=null&#125;"</span>&gt;</span><br><span class="line">   &lt;img src=<span class="string">"/pic/$&#123;item.pic&#125;"</span> width=<span class="number">100</span> height=<span class="number">100</span>/&gt;</span><br><span class="line">   &lt;br/&gt;</span><br><span class="line">  &lt;/c:if&gt;</span><br><span class="line">  &lt;input type=<span class="string">"file"</span>  name=<span class="string">"pictureFile"</span>/&gt;</span><br><span class="line"> &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="json-数据交互"><a href="#json-数据交互" class="headerlink" title="json 数据交互"></a>json 数据交互</h5><p>页面发送 ajax 请求并接受服务器返回的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = <span class="string">'&#123;"id":1,"name":"测试商品","price":99.9,"detail":"测试商品描述","pic":"123456.jpg"&#125;'</span>;</span><br><span class="line"></span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">          url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/json.action"</span>,</span><br><span class="line">          data:params,</span><br><span class="line">          contentType:<span class="string">"application/json;charset=UTF-8"</span>,<span class="comment">//发送数据格式</span></span><br><span class="line">          dataType:<span class="string">"json"</span>,</span><br><span class="line">          type:<span class="string">"POST"</span>,</span><br><span class="line">          success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">              alert(data.name);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>controller 接收返回 json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接受 json 格式数据,并返回 json 数据</span></span><br><span class="line"><span class="comment"> * RequestBody 能使接受的数据变为 json 格式</span></span><br><span class="line"><span class="comment"> * ResponseBody 使返回的格式转为 json 格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/json.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Items <span class="title">json</span><span class="params">(@RequestBody Items items)</span></span>&#123;</span><br><span class="line">    System.out.println(items);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="使用-RESTful-操作资源"><a href="#使用-RESTful-操作资源" class="headerlink" title="使用 RESTful 操作资源"></a>使用 RESTful 操作资源</h5><p>localhost:8080/list.action?id=10086</p><p>localhost:8080/list/10086.action</p><p>将 id 放到文件后 action 前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改页面 RESTful 风格</span></span><br><span class="line"><span class="comment"> * 入参 id 将 id 放到访问路径中需要配置 <span class="doctag">@PathVariable</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/itemEdit/&#123;id&#125;.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toEdit</span><span class="params">(@PathVariable Integer id, HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpSession session, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询商品</span></span><br><span class="line">    Items item = itemService.selectItemById(id);</span><br><span class="line"></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mav.addObject(<span class="string">"item"</span>,item);</span><br><span class="line">    mav.setViewName(<span class="string">"editItem"</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><p>拦截器中有三个方法：方法前、方法后、页面渲染后</p><p>用户访问 – 【拦截器方法前】– controller 执行方法 – 【拦截器方法后】– jsp 页面渲染为 html –【拦截器页面渲染后】– 返回给用户</p><p>配置两个放行拦截器时，经过拦截器顺序</p><p>方法前1–方法前2–方法后–方法后1–页面渲染后2–页面渲染后1</p><p>当第一个拦截器拒绝访问，执行拦截器1 方法前，拦截器2 不执行</p><p>当第二个拦截器拒绝访问，执行拦截器1方法前–拦截器2 方法前 – 拦截器1 页面渲染后</p><p>配置拦截器 springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc 拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.itcast.springmvc.intercptor.Interceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.itcast.springmvc.intercptor.Interceptor2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>URL:<a href="http://localhost:8080/springmvc_mybatis/item/list.action" target="_blank" rel="noopener">http://localhost:8080/springmvc_mybatis/item/list.action</a></p><p>URI:/item/list.action</p><hr><p>springmvc 高级参数绑定 List</p><p>多个 \<input type="checkbox" name="ids" \=""></p><p>pojo :public String list(Integer[] ids)</p><p>包装类型：public String list(QueryVo vo)  QueryVo 中有 Integer[] ids 时跟 普通 pojo 一样</p><p>List 集合，方法内不能直接写 List ，需要在包装类内 QueryVo - List 有一个 List itemList 属性，</p><p>\&lt;input type=”checkbox” name=”itemList[${i.index}].name”/></p><p>RequestMapping 处理器映射器（找此标签，路径）</p><p>Value {多个路径}</p><p>Value={/item/} 用于类头上，可以抽取多个方法路径相同的部分，减少代码量</p><p>Method=RequestMethod=POST 、GET</p><p>String 形参绑定路径，Model 形参绑定视图，返回的 “redirect” 重定向另一个方法的映射，“dispatcher” 内部转发</p><p>void ajax 异步请求</p><p>浏览器 ajax 发送 json 字符串 模拟手机等发送的 报文，浏览器一般直接发送 json 格式的数据，而不是字符串</p><hr><h5 id="自定义标签库"><a href="#自定义标签库" class="headerlink" title="自定义标签库"></a>自定义标签库</h5><p>在 jsp 引用标签库，prefix 表示用何种 符号 来使用该标签，uri 是该标签的名字，用来告诉该标签库引用哪个 uri 名的 tld 文件</p><p><code>&lt;%@ taglib prefix=&quot;itcast&quot; uri=&quot;http://itcast.cn/common/&quot;%&gt;</code></p><p>taglib.tld 文件是自定义标签库文件，uri 表示它的名字，在被 jsp 导入标签库时所定位；</p><p>每个 tag 表示定义一个标签；</p><p>tag 标签中 name 是标签库被使用时显示的标签，</p><p>attribute 中配置的是属性，name 指使用标签中可选择的属性 \&lt;itcast:page url=”” number=”” bean=””/></p><p>attribute 中 \&lt;rtexprvalue> 指在使用标签时能不能使用表达式来动态指定数据 ，一般用 true 就行</p><p>\&lt;itcast:page url=”&lt;%=’url’%&gt;” number=”&lt;%’num’%&gt;” bean=””/> 如果是 true 表示可以用表达式动态修改， \&lt;itcast:page url=”<a href="http://aa.com&quot;" target="_blank" rel="noopener">http://aa.com&quot;</a> number=”123” bean=””/> false 表示不能,只能填写固定值，使用动态值会报出异常</p><p>\&lt;required>true\&lt;/required> true 表示该项是必须填的，在创建该标签时，此项会一起出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;taglib&gt;</span><br><span class="line">   &lt;tlib-version&gt;2.0&lt;/tlib-version&gt;</span><br><span class="line">   &lt;jsp-version&gt;1.2&lt;/jsp-version&gt;</span><br><span class="line">   &lt;short-name&gt;common&lt;/short-name&gt;</span><br><span class="line">   &lt;uri&gt;http://itcast.cn/common/&lt;/uri&gt;</span><br><span class="line">   &lt;display-name&gt;Common Tag&lt;/display-name&gt;</span><br><span class="line">   &lt;description&gt;Common Tag library&lt;/description&gt;</span><br><span class="line">   &lt;tag&gt;</span><br><span class="line">&lt;name&gt;page&lt;/name&gt;</span><br><span class="line">&lt;tag-class&gt;cn.itcast.common.utils.NavigationTag&lt;/tag-class&gt;</span><br><span class="line">&lt;body-content&gt;JSP&lt;/body-content&gt;</span><br><span class="line">&lt;description&gt;create navigation for paging&lt;/description&gt;</span><br><span class="line">&lt;attribute&gt;</span><br><span class="line">&lt;name&gt;bean&lt;/name&gt;</span><br><span class="line">&lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt;</span><br><span class="line">&lt;/attribute&gt;</span><br><span class="line">&lt;attribute&gt;</span><br><span class="line">&lt;name&gt;number&lt;/name&gt;</span><br><span class="line">&lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt;</span><br><span class="line">&lt;/attribute&gt;</span><br><span class="line">&lt;attribute&gt;</span><br><span class="line">&lt;name&gt;url&lt;/name&gt;</span><br><span class="line">&lt;required&gt;true&lt;/required&gt;</span><br><span class="line">&lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt;</span><br><span class="line">&lt;/attribute&gt;</span><br><span class="line">&lt;/tag&gt;</span><br><span class="line">&lt;/taglib&gt;</span><br></pre></td></tr></table></figure><p>当使用 &lt;c:foreach … 或自定义标签 &lt;c:itcast url…. 时，会去调用一个 java 类 NavigationTag 中的 doStartTag 方法，执行一系列定义好的方法完成相应的功能</p><hr><p><code>@Value(&quot;${dictType.code}&quot;)</code> 注入 properties 文件的值</p><p>该配置必须写在 springmvc.xml 中，不然无法正确解析值，直接将 dictType.code 作为字符串赋值给了成员变量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--读取 controller keyvalue 键值对--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:resource.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h4><p>@RepsonseBody     该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p><p>当返回不是 html 页面而是其他数据格式（json、xml 等）时使用</p><p>假如Controller类中返回值为 return “OK”，那么根据视图解析器可得将要跳转的页面路径为：/WebContent/jsp/OK.jsp</p><blockquote><p><a href="https://blog.csdn.net/vvvweasel/article/details/52502291" target="_blank" rel="noopener">视图解析器的作用</a></p><p><a href="https://blog.csdn.net/walkerjong/article/details/7520896" target="_blank" rel="noopener">@RequestBody, @ResponseBody 注解详解</a></p></blockquote><hr><h5 id="SSM-增删改查"><a href="#SSM-增删改查" class="headerlink" title="SSM 增删改查"></a>SSM 增删改查</h5><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/customer/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerController</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBaseDictService baseDictService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加成员变量，用注解读取 properties 中的字段</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;fromType.code&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String fromTypeCode;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;industryType.code&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String industryTypeCode;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;levelType.code&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String levelTypeCode;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"list.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model,QueryVo vo)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;BaseDict&gt; fromType = baseDictService.selectBaseDictByCode(fromTypeCode);</span><br><span class="line">        List&lt;BaseDict&gt; industryType = baseDictService.selectBaseDictByCode(industryTypeCode);</span><br><span class="line">        List&lt;BaseDict&gt; levelType = baseDictService.selectBaseDictByCode(levelTypeCode);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"fromType"</span>,fromType);</span><br><span class="line">        model.addAttribute(<span class="string">"industryType"</span>,industryType);</span><br><span class="line">        model.addAttribute(<span class="string">"levelType"</span>,levelType);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        通过四个条件查询分页对象</span></span><br><span class="line">        Page&lt;Customer&gt; customerPage = customerService.selectPageByQueryVo(vo);</span><br><span class="line">        model.addAttribute(<span class="string">"page"</span>,customerPage);</span><br><span class="line">        model.addAttribute(<span class="string">"custName"</span>,vo.getCustName());</span><br><span class="line">        model.addAttribute(<span class="string">"custSource"</span>,vo.getCustSource());</span><br><span class="line">        model.addAttribute(<span class="string">"custIndustry"</span>,vo.getCustIndustry());</span><br><span class="line">        model.addAttribute(<span class="string">"custLevel"</span>,vo.getCustLevel());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"customer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 Customer 对象的字符串</span></span><br><span class="line"><span class="comment">     * response 用于将返回对象转换成 json 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"edit.action"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">Customer <span class="title">edit</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerService.selectCustomerById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"update.action"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">update</span><span class="params">(Customer customer)</span></span>&#123;</span><br><span class="line">        customerService.update(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除，加上 ResponseBody 使其不走视图解析器，直接返回 ajax</span></span><br><span class="line"><span class="comment">     * 如果不加 ResponseBody 视图解析器会跳转到 WEB-INF/jsp/OK.jsp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"delete.action"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        customerService.deleteCustomerById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serviceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过四个条件查询分页对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Customer&gt; <span class="title">selectPageByQueryVo</span><span class="params">(QueryVo vo)</span></span>&#123;</span><br><span class="line">        Page&lt;Customer&gt; page = <span class="keyword">new</span> Page&lt;Customer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        配置每页显示条数，vo 要传入 sql 语句，给 limit 限制每页数传值</span></span><br><span class="line">        vo.setSize(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//        page 的 size 必须有值，不为空</span></span><br><span class="line">        page.setSize(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        防止 vo 及 vo 内的5个值为空或空字符串</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>!=vo) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=vo.getPage())&#123;</span><br><span class="line">                <span class="keyword">if</span>(vo.getPage()&lt;=<span class="number">0</span>)</span><br><span class="line">                    vo.setPage(<span class="number">1</span>);</span><br><span class="line">                page.setPage(vo.getPage());</span><br><span class="line">                vo.setStartRow((vo.getPage()-<span class="number">1</span>)*vo.getSize());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=vo.getCustName()&amp;&amp; !<span class="string">""</span>.equals(vo.getCustName().trim()))&#123;</span><br><span class="line">                vo.setCustName(vo.getCustName().trim());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=vo.getCustSource()&amp;&amp; !<span class="string">""</span>.equals(vo.getCustSource().trim()))&#123;</span><br><span class="line">                vo.setCustSource(vo.getCustSource().trim());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=vo.getCustIndustry()&amp;&amp; !<span class="string">""</span>.equals(vo.getCustIndustry().trim()))&#123;</span><br><span class="line">                vo.setCustIndustry(vo.getCustIndustry().trim());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=vo.getCustLevel()&amp;&amp; !<span class="string">""</span>.equals(vo.getCustLevel().trim()))&#123;</span><br><span class="line">                vo.setCustLevel(vo.getCustLevel().trim());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//通过 dao 查询总条数和总结果集，赋给还未赋值 Page 的两个属性</span></span><br><span class="line">            page.setTotal(customerDao.getCustomerCountByQueryVo(vo));</span><br><span class="line">            page.setRows(customerDao.selectCustomerListByQueryVo(vo));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">selectCustomerById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.selectCustomerById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        customerDao.updateCustomerById(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomerById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        customerDao.deleteCustomerById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itcast.crm.mapper.CustomerDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据四个条件查询总条数</span></span><br><span class="line"><span class="comment">    private String custName;</span></span><br><span class="line"><span class="comment">    private String custSource;</span></span><br><span class="line"><span class="comment">    private String custIndustry;</span></span><br><span class="line"><span class="comment">    private String custLevel;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCustomerCountByQueryVo"</span> <span class="attr">parameterType</span>=<span class="string">"QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        SELECT count(*) FROM customer</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custName != null and custName!=''"</span>&gt;</span></span><br><span class="line">                cust_name LIKE "%"#&#123;custName&#125;"%"</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custSource != null and custSource!=''"</span>&gt;</span></span><br><span class="line">                AND cust_source = #&#123;custSource&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custIndustry !=null and custIndustry!=''"</span>&gt;</span></span><br><span class="line">                AND cust_industry = #&#123;custIndustry&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custLevel !=null and custLevel!=''"</span>&gt;</span></span><br><span class="line">                AND cust_level = #&#123;custLevel&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据 QueryVo 查询 Customer结果集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCustomerListByQueryVo"</span> <span class="attr">parameterType</span>=<span class="string">"QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">        SELECT * FROM customer</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custName != null and custName!=''"</span>&gt;</span></span><br><span class="line">                cust_name LIKE "%"#&#123;custName&#125;"%"</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custSource != null and custSource!=''"</span>&gt;</span></span><br><span class="line">                AND cust_source = #&#123;custSource&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custIndustry !=null and custIndustry!=''"</span>&gt;</span></span><br><span class="line">                AND cust_industry = #&#123;custIndustry&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"custLevel !=null and custLevel!=''"</span>&gt;</span></span><br><span class="line">                AND cust_level = #&#123;custLevel&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        limit #&#123;startRow&#125;,#&#123;size&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--public Customer selectCustomerById(Integer id);--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据 QueryVo 查询 Customer结果集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCustomerById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">        SELECT * FROM customer</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            cust_id = #&#123;custId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据 id 修改 Customer 对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--public void updateCustomerById(Customer customer);</span></span><br><span class="line"><span class="comment">    set 标签用来去除最后的语句的 ，--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateCustomerById"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">        UPDATE customer</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cust_name!=null"</span>&gt;</span></span><br><span class="line">                cust_name=#&#123;cust_name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cust_source!=null"</span>&gt;</span></span><br><span class="line">                cust_source=#&#123;cust_source&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cust_linkman!=null"</span>&gt;</span></span><br><span class="line">                cust_linkman=#&#123;cust_linkman&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            cust_id = #&#123;cust_id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据 id 删除 Customer 对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCustomerById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        DELETE FROM customer</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            cust_id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp 页面 javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">editCustomer</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">   type:<span class="string">"get"</span>,</span><br><span class="line">   url:<span class="string">"&lt;%=basePath%&gt;customer/edit.action"</span>,</span><br><span class="line">   data:&#123;<span class="string">"id"</span>:id&#125;,</span><br><span class="line">   success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#edit_cust_id"</span>).val(data.cust_id);</span><br><span class="line">    $(<span class="string">"#edit_customerName"</span>).val(data.cust_name);</span><br><span class="line">    $(<span class="string">"#edit_customerFrom"</span>).val(data.cust_source)</span><br><span class="line">    $(<span class="string">"#edit_custIndustry"</span>).val(data.cust_industry)</span><br><span class="line">    $(<span class="string">"#edit_custLevel"</span>).val(data.cust_level)</span><br><span class="line">    $(<span class="string">"#edit_linkMan"</span>).val(data.cust_linkman);</span><br><span class="line">    $(<span class="string">"#edit_phone"</span>).val(data.cust_phone);</span><br><span class="line">    $(<span class="string">"#edit_mobile"</span>).val(data.cust_mobile);</span><br><span class="line">    $(<span class="string">"#edit_zipcode"</span>).val(data.cust_zipcode);</span><br><span class="line">    $(<span class="string">"#edit_address"</span>).val(data.cust_address);</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">updateCustomer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 更新操作，$(表单).serialize() 是将表单内容序列化，提交整个 form 表单$.post 的 function(data) data 回调函数为 "OK" 时才能继续执行</span></span><br><span class="line">  $.post(<span class="string">"&lt;%=basePath%&gt;customer/update.action"</span>,$(<span class="string">"#edit_customer_form"</span>).serialize(),<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">   alert(<span class="string">"客户信息更新成功！"</span>);</span><br><span class="line">   <span class="built_in">window</span>.location.reload();</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deleteCustomer</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(confirm(<span class="string">'确实要删除该客户吗?'</span>)) &#123;</span><br><span class="line">   $.post(<span class="string">"&lt;%=basePath%&gt;customer/delete.action"</span>,&#123;<span class="string">"id"</span>:id&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"客户删除更新成功！"</span>);</span><br><span class="line">    <span class="built_in">window</span>.location.reload();</span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q：Mybatis-的-select-Key-标签错误"><a href="#Q：Mybatis-的-select-Key-标签错误" class="headerlink" title="Q：Mybatis 的 select Key 标签错误"></a>Q：Mybatis 的 select Key 标签错误</h5><p>Caused by: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 24; columnNumber: 14; 元素类型为 “select” 的内容必须匹配 “(include|trim|where|set|foreach|choose|if|bind)”。</p><p>A:将 select Key 标签写在了 select 标签内，需要将其 写在 insert 标签内</p><p>注：select 标签内执行 insert 语句也会成功，但是 select 标签内无法包含 select Key 标签</p><hr><h5 id="Q-org-apache-ibatis-binding-BindingException"><a href="#Q-org-apache-ibatis-binding-BindingException" class="headerlink" title="Q: org.apache.ibatis.binding.BindingException"></a>Q: org.apache.ibatis.binding.BindingException</h5><p>org.apache.ibatis.binding.BindingException: Type interface cn.itcast.mybatis.mapper.OrderMapper is not known to the MapperRegistry.</p><p>没有将 mapper(Bean.xml) 添加到 mybatis-config.xml 中</p><p><a href="https://my.oschina.net/kaigejava/blog/726728" target="_blank" rel="noopener">https://my.oschina.net/kaigejava/blog/726728</a></p><hr><h5 id="Q-idea-提示-decompiled-class-file-version-50-0-java6"><a href="#Q-idea-提示-decompiled-class-file-version-50-0-java6" class="headerlink" title="Q: idea 提示 decompiled .class file version 50.0(java6)"></a>Q: idea 提示 decompiled .class file version 50.0(java6)</h5><p>从 eclipse 拷贝的项目，出现：idea 提示 decompiled .class file version 50.0(java6)</p><p>中文解释是：反编译 .class文件中的字节码 到Java 8 版本,这种情况下打开的 class 文件，可以打开 .java 文件重新编译一次</p><p><a href="https://blog.csdn.net/qq_27093465/article/details/52858092" target="_blank" rel="noopener"> idea 提示 decompiled .class file version 52.0(java8)</a></p><hr><h5 id="Q-逆向工程生成的-pojo-与-Mapper-运行报错"><a href="#Q-逆向工程生成的-pojo-与-Mapper-运行报错" class="headerlink" title="Q: 逆向工程生成的 pojo 与 Mapper 运行报错"></a>Q: 逆向工程生成的 pojo 与 Mapper 运行报错</h5><p>Result Maps collection already contains value for com.itcast.mybatis.mapper.OrdersMapper.BaseResultMap</p><p>A:因为有重复的 sql id ，只要删除重复的语句即可（自己是因为运行了两次逆向工程，将所有的代码生成了两次，删除生成的 pojo 与 mapper 包及包下的文件，重新生成即可）</p><p><a href="https://blog.csdn.net/zdyueguanyun/article/details/78439195" target="_blank" rel="noopener">mybatis 报错</a></p><hr><p>Q:实例化 servlet 失败</p><p>Message Error instantiating servlet class [org.springframework.web.servlet.DispatcherServlet]</p><p>Description The server encountered an unexpected condition that prevented it from fulfilling the request.</p><p>Exception</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.servlet.ServletException: Error instantiating servlet class [org.springframework.web.servlet.DispatcherServlet]</span><br></pre></td></tr></table></figure><p>A:一般是 web.xml 配置问题，但是我的这个问题实际发现是 idea 没有正确导入 jar 包导致的，在 Project Struture 中 Problem 中 fix 修复没有将 libs 目录添加进 artifact 的问题（输出的 war 包中没有包含 libs 目录）</p><hr><h5 id="Q-导入了包还是显示包不存在"><a href="#Q-导入了包还是显示包不存在" class="headerlink" title="Q:导入了包还是显示包不存在"></a>Q:导入了包还是显示包不存在</h5><p>Error:(5, 37) java: 程序包org.apache.ibatis.annotations不存在</p><p>A:试着重启，不行就删除包路径，重新导入</p><hr><h5 id="Q-404-错误"><a href="#Q-404-错误" class="headerlink" title="Q: 404 错误"></a>Q: 404 错误</h5><p> The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><p>A: 前端控制器在 web.xml 配置错误，需要将 springmvc.xml 配置到 DispatcherServlet，不然无法进入 controller（没有 springmvc.xml 注释驱动就等于没配置，无法生效，自然无法进入 controller 了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有配置，默认找/WEB-INF/"servlet名称"-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Q-sql-错误"><a href="#Q-sql-错误" class="headerlink" title="Q: sql 错误"></a>Q: sql 错误</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException:</span><br></pre></td></tr></table></figure><p>A:自己添加 属性 set</p><hr><h5 id="Q-500-错误"><a href="#Q-500-错误" class="headerlink" title="Q: 500 错误"></a>Q: 500 错误</h5><p>Message Request processing failed; nested exception is java.lang.NullPointerException</p><p>Description The server encountered an unexpected condition that prevented it from fulfilling the request.</p><p>Exception</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException</span><br></pre></td></tr></table></figure><p>如果入参是包装类，那么参数提交页面（jsp  页面）也需要将 name 变为包装类中的类型前缀，QueryVo 中封装一个 Items items 的 pojo，那么需要在页面的 name 属性前加上 items 的前缀，不然后台取不到属性值。</p><p>name=”items.username”…</p><hr><h5 id="Q-idea-jsp-热修改页面不生效"><a href="#Q-idea-jsp-热修改页面不生效" class="headerlink" title="Q: idea jsp 热修改页面不生效"></a>Q: idea jsp 热修改页面不生效</h5><p>A：在 tocmat 配置中将 On ‘Update’ action 设置为 Restart server；将 On frame</p><hr><h5 id="Q-NullPointException"><a href="#Q-NullPointException" class="headerlink" title="Q:NullPointException"></a>Q:NullPointException</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Type Exception Report</span><br><span class="line"></span><br><span class="line">Message Request processing failed; nested exception is java.lang.NullPointerException</span><br><span class="line"></span><br><span class="line">Description The server encountered an unexpected condition that prevented it from fulfilling the request.</span><br><span class="line"></span><br><span class="line">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException</span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978)</span><br></pre></td></tr></table></figure><p>A:查询看到有人是因为输出 classes 文件中没有生成 BeanMapper.xml 文件，是 src/main/java 在 eclipse 下是资源目录，在 Idea 下是普通目录，所以不生成文件。但是我的 Mapper.xml 已经在out 的 classes 下生成了，于是继续找资料发现需要在 Mapper.xml 最好以 Mapper 结尾。</p><p>最后发现是 Mapper.xml 名字与 Mapper.java 不一致，BaseDictDao.xml 与 BaseDictDao.java 需要名字一致，</p><p>我加了一个 I前缀 IBaseDictDao.java </p><blockquote><p>参考：</p><p>Rename mapper/drugmasterDao.xml to mapper/DrugMasterDao.xml , the name has to match the *Dao.java file name otherwise it throws error or we have to create Ibatismapping.xml explictly and add mapper configuration there</p><p><a href="https://stackoverflow.com/questions/20427210/mybatis-spring-mvc-application-getting-invalid-bound-statement-not-found" target="_blank" rel="noopener">https://stackoverflow.com/questions/20427210/mybatis-spring-mvc-application-getting-invalid-bound-statement-not-found</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h4&gt;&lt;p&gt;Mybatis 原身 Ibatis ，是 apache 的一个开源项目，2010 年迁移到谷歌，更名为 Mybatis，2013 年放到 github，ORM 架构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原生 dao 缺陷&lt;/p&gt;
&lt;p&gt;Dao方法体存在重复代码：通过SqlSessionFactory创建SqlSession，调用SqlSession的数据库操作方法&lt;/p&gt;
&lt;p&gt;调用sqlSession的数据库操作方法需要指定statement的id，这里存在硬编码，不得于开发维护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="ssm" scheme="http://yoursite.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>interview</title>
    <link href="http://yoursite.com/2019/02/25/interview/"/>
    <id>http://yoursite.com/2019/02/25/interview/</id>
    <published>2019-02-25T02:47:51.000Z</published>
    <updated>2019-05-30T09:31:17.728Z</updated>
    
    <content type="html"><![CDATA[<h5 id="List-的实现类区别"><a href="#List-的实现类区别" class="headerlink" title="List 的实现类区别"></a>List 的实现类区别</h5><p>List 列表类，顺序存储任何对象，可重复</p><p>ArrayList：实现动态数组</p><ul><li>随机访问，查询快 O(1) ，增删慢</li><li>线程不同步（非线程安全）</li><li>数组可变长，本质是在数组满后，会自动将该数组复制到一个新的 1.5 倍长得新数组中</li></ul><p>LinkList：：实现链表（JDK 1.7 后为双向链表）</p><ul><li>查询慢 O(n)，增删快</li></ul><a id="more"></a><p>ArrayList 在内存中是一段连续的空间，数组名 a 指向了该空间的起始地址，也是数组第一个元素的地址，与 a[0] 指向的地方相同，但是意义不同，一个是指该内存地址，一个指该地址上存放的元素。</p><p>a[0] a[1] 中的数组表示相对于起始地址的偏移量，如果是 0，表示没有偏移，1 表示偏移量为 1。</p><p>a[1] 底层执行的是 *(a+1) ，*表示取出该地址上存储的元素，不管该数组多长，取出哪个元素都是这两步（加偏移量，取数据），所以按索引访问时间复杂度是 O(1)</p><p>LinkList 虽然也是按索引访问，但是链表在内存中不是连续的，操作系统分配时会将每个元素的数据和下一个元素在内存的索引保存到一个内存地址中，如果要查询则要从一开始的元素进行遍历，使用 for(int i =0;i&lt;list.size();i++) 这种方式遍历时复杂度为 O(n*n) ，如果使用增强 for 循环(底层也是迭代器实现) 或 迭代器，则可以达到 O(n)。LinkList 的增删时间复杂度几乎为 O(1),因为只需断开前后连接重新指向即可添加删除。</p><p>使用迭代器可以不用从头开始访问 LinkList，它会缓存当前节点的前后节点,时间复杂度 O（n）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LinkList&lt;String&gt; list = <span class="keyword">new</span> LinkList&lt;&gt;();</span><br><span class="line">Interator&lt;String&gt; it = list.interator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext)&#123;</span><br><span class="line">String s = it.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考</p><p><a href="https://www.cnblogs.com/whoislcj/p/6508851.html" target="_blank" rel="noopener">Java数据结构之LinkedList、ArrayList的效率分析</a></p><p><a href="http://wiki.jikexueyuan.com/project/java-enhancement/java-thirty.html" target="_blank" rel="noopener">Iterator 迭代器</a></p></blockquote><hr><h5 id="HashMap-与-HashSet-区别"><a href="#HashMap-与-HashSet-区别" class="headerlink" title="HashMap 与 HashSet 区别"></a>HashMap 与 HashSet 区别</h5><p>Set的集合里不允许对象有重复的值，List允许有重复</p><p>HashSet实现了Set接口，它不允许集合中有重复的值，当我们提到HashSet时，第一件事情就是在将对象存储在HashSet之前，要先确保对象重写equals()和hashCode()方法，这样才能比较对象的值是否相等，以确保set中没有储存相等的对象。如果我们没有重写这两个方法，将会使用这个方法的默认实现。</p><p>public boolean add(Object o)方法用来在Set中添加元素，当元素值重复时则会立即返回false，如果成功添加的话会返回true。</p><p>HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许重复的键。Map接口有两个基本的实现，HashMap和TreeMap。TreeMap保存了对象的排列次序，而HashMap则不能。HashMap允许键和值为null。HashMap是非synchronized的，但collection框架提供方法能保证HashMap synchronized，这样多个线程同时访问HashMap时，能保证只有一个线程更改Map。</p><p>public Object put(Object Key,Object value)方法用来将元素添加到map中。</p><table><thead><tr><th><em>HashMap</em></th><th><em>HashSet</em></th></tr></thead><tbody><tr><td>HashMap实现了Map接口</td><td>HashSet实现了Set接口</td></tr><tr><td>HashMap储存键值对</td><td>HashSet仅仅存储对象</td></tr><tr><td>使用put()方法将元素放入map中</td><td>使用add()方法将元素放入set中</td></tr><tr><td>HashMap中使用键对象来计算hashcode值</td><td>HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false</td></tr><tr><td>HashMap比较快，因为是使用唯一的键来获取对象</td><td>HashSet较HashMap来说比较慢</td></tr></tbody></table><blockquote><p><a href="http://www.importnew.com/6931.html" target="_blank" rel="noopener">HashMap和HashSet的区别</a></p></blockquote><hr><p>Set 中元素如何比较是否重复</p><p>1、什么是Set?(what)</p><pre><code>Set是Collection容器的一个子接口，它不允许出现重复元素，当然也只允许有一个null对象。</code></pre><p>2、如何来区分重复与否呢？(how)</p><pre><code>“ 用 iterator() 方法来区分重复与否 ”，这是在网上流传的答案，个人认为这是个错误的答案。JPI中写的很明白：“set 不包含满足</code></pre><p>e1.equals(e2) 的元素对 e1 和 e2 ”，由此可见回答使用equals()区分更合适。</p><p>3、为什么用equals()而不用==来区分？(why)</p><pre><code>应该从它俩的区别谈起，==是用来判断两者是否是同一对象（同一事物），而equals是用来判断是否引用同一个对象。再看一下Set里面存的是</code></pre><p>对象，还是对象的引用。根据java的存储机制可知，set里面存放的是对象的引用，所以当两个元素只要满足了equals()时就已经指向同一个对象，</p><p>也就出现了重复元素。所以应该用equals()来判断。</p><blockquote><p>来源：<a href="https://blog.csdn.net/fhm727/article/details/5221792" target="_blank" rel="noopener">https://blog.csdn.net/fhm727/article/details/5221792</a> </p></blockquote><hr><h5 id="String-s-new-String-“xyz”-创建几个对象"><a href="#String-s-new-String-“xyz”-创建几个对象" class="headerlink" title="String s = new String(“xyz”); 创建几个对象"></a>String s = new String(“xyz”); 创建几个对象</h5><p>因为 String(“xyz”) 这条语句会在 String 常量池（字符串常量缓冲区）创建一个对象</p><p>new String 又会在 堆内存中创建一个新的对象，</p><p>所以一般情况是两个，一个放入常量池，一个放入堆内存。但是如果之前就用过 “xyz” 对象，那么就不会再常量池创建对象，直接从常量池拿。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/dangzhenjiuhao/p/4585389.html" target="_blank" rel="noopener">https://www.cnblogs.com/dangzhenjiuhao/p/4585389.html</a></p></blockquote><hr><h5 id="String-s-”a”-”b”-”c”-”d”-一共创建了几个对象"><a href="#String-s-”a”-”b”-”c”-”d”-一共创建了几个对象" class="headerlink" title="String s=”a”+”b”+”c”+”d”; 一共创建了几个对象"></a>String s=”a”+”b”+”c”+”d”; 一共创建了几个对象</h5><p>一个，</p><p>String s1 = “a”;</p><p>String s2 = s1 + “b”;</p><p>String s3 = “a” + “b”;</p><p>sout(s2 == “ab”);–false</p><p>sout(s3 == “ab”);–true</p><p>javac 编译器会对 string 字符串常量相加时进行优化，直接将其编译成常量相连的结果</p><hr><h5 id="当-try-语句中有-return-时，finally-中的语句还执行吗"><a href="#当-try-语句中有-return-时，finally-中的语句还执行吗" class="headerlink" title="当 try 语句中有 return 时，finally 中的语句还执行吗"></a>当 try 语句中有 return 时，finally 中的语句还执行吗</h5><p>执行，但是在执行 finally 前就会把 return 的值在局部变量开辟一个空间保存起来，即使这个值在 finally 被修改，返回给主函数的值也是原来保存起来的值。</p><p>x=1– 到 return 行，x=3 并保存到一个新的局部变量空间– 到 finally 行，x=7 – 返回到 return 行，将 x=3 返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lalala</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> x=x+<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            x=x+<span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">int</span> lalala = t.lalala();</span><br><span class="line">        System.out.println(lalala);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="http://www.cnblogs.com/averey/p/4379646.html" target="_blank" rel="noopener">http://www.cnblogs.com/averey/p/4379646.html</a></p></blockquote><hr><p>堆和栈</p><p>栈区(stack)–由编译器自动分配和释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p><p>堆区(heap)–一般由程序员分配和释放，若程序员不释放，程序结束时可能由OS回收，注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</p><p>全局区(静态区)(static)–全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域，程序结束后由系统释放。</p><p>JVM 中堆和栈属于不同内存区域，栈常用于保存方法和局部变量，不会被多个线程共享，当定义一个变量时， java 在栈中为这个变量分配了内存空间，超过变量的作用域后，就会释放掉该空间；</p><p>对象分配在堆上，堆被整个 JVM 所有线程共享，用来存放 new 出来的对象和数组，堆内存由java 虚拟机的垃圾回收期自动回收管理</p><p>在堆内存创建数组或对象后，可以在栈中定一个特殊变量，让这个变量的取值为数组或对象在堆内存的首地址，那么就称栈中这个变量为数组或对象的引用变量，以后可以在程序中使用栈中的引用变量来访问堆中数组或对象，引用变量相当于一个数组或对象的名称</p><blockquote><p>参考：<a href="https://blog.csdn.net/hairetz/article/details/4141043" target="_blank" rel="noopener">https://blog.csdn.net/hairetz/article/details/4141043</a></p><p><a href="https://www.jianshu.com/p/ce02402fb36b" target="_blank" rel="noopener">https://www.jianshu.com/p/ce02402fb36b</a></p></blockquote><hr><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>是java泛型的两种用法：List<t>是泛型方法，List&lt;?&gt;是限制通配符</t></p><p>List<t>一般有两种用途：</t></p><p>1、定义一个通用的泛型方法。</p><p>伪代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface Dao&#123;</span><br><span class="line">  List&lt;T&gt; getList()&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">String</span>&gt; getStringList()&#123;</span><br><span class="line">  <span class="keyword">return</span> dao.getList();<span class="comment">//dao是一个实现类实例</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; getIntList()&#123;</span><br><span class="line">  <span class="keyword">return</span> dao.getList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面接口的getList方法如果定义成List&lt;?&gt; ，后面就会报错。‘</p><p>2、限制方法的参数之间或参数和返回结果之间的关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; getList&lt;T param1,T param2&gt;</span><br></pre></td></tr></table></figure><p>这样可以限制返回结果的类型以及两个参数的类型一致。</p><p>List&lt;?&gt;一般就是在泛型起一个限制作用。</p><p>伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public Class Fruit()&#123;&#125;</span><br><span class="line"></span><br><span class="line">public Class Apple extends Fruit()&#123;&#125;</span><br><span class="line"></span><br><span class="line">public void test(? extends Fruit)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">test(new Fruit());</span><br><span class="line">test(new Apple());</span><br><span class="line">test(new String()); //这个就会报错</span><br><span class="line">这样可以现在test方法的参数必须是Fruit或其子类。</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.zhihu.com/question/31429113/answer/51906707" target="_blank" rel="noopener">来源：作者：zane zhou</a></p></blockquote><hr><h5 id="删除一个表中所有重复的字段，只剩下一个"><a href="#删除一个表中所有重复的字段，只剩下一个" class="headerlink" title="删除一个表中所有重复的字段，只剩下一个"></a>删除一个表中所有重复的字段，只剩下一个</h5><p>多次插入相同字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into test(aa,bb,cc) values(&quot;a1&quot;,&quot;b1&quot;,&quot;c1&quot;);</span><br><span class="line">insert into test(aa,bb,cc) values(&quot;a2&quot;,&quot;b2&quot;,&quot;c2&quot;);</span><br><span class="line">insert into test(aa,bb,cc) values(&quot;a3&quot;,&quot;b3&quot;,&quot;c3&quot;);</span><br><span class="line">insert into test(aa,bb,cc) values(&quot;a4&quot;,&quot;b4&quot;,&quot;c4&quot;);</span><br></pre></td></tr></table></figure><p><img src="D:\hexo\source\_posts\interview\table01.png" alt="1553518794795"></p><p>先查询出 id 用 aa 列进行分组（分组同时会过滤重复的列），group 默认 min（）取最小值，然后用 delete 删除未查询出的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete from test where id not in(</span><br><span class="line">select id from (</span><br><span class="line">select id from test group by aa having count(aa) &gt; 1) t</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果直接使用以下方式查询，会出现 [Err] 1093 - You can’t specify target table ‘test’ for update in FROM clause 错误，因为 mysql 中直接修改刚查询出的表会发生错误，可以在中间表多进行一次 select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from test where id not in(</span><br><span class="line">select id from test group by aa having count(aa) &gt; 1);</span><br></pre></td></tr></table></figure><p>如果使用以下方式查询，会出现 [Err] 1248 - Every derived table must have its own alias 错误，每个派生表需要一个命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete from test where id not in(</span><br><span class="line">select id from (</span><br><span class="line">select id from test group by aa having count(aa) &gt; 1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>参考:<a href="https://blog.csdn.net/fdipzone/article/details/52695371" target="_blank" rel="noopener">https://blog.csdn.net/fdipzone/article/details/52695371</a></p></blockquote><hr><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1、 截取连续的数字  【读取字符串中第一个连续的字符串，不包含后面不连续的数字】</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNumbers</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);   <span class="comment">//英文字母数字为 "[A-Za-z0-9]+"</span></span><br><span class="line">        Matcher matcher = pattern.matcher(content);  </span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;  </span><br><span class="line">           <span class="keyword">return</span> matcher.group(<span class="number">0</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reg</span><span class="params">()</span></span>&#123;</span><br><span class="line">String content = <span class="string">"证件类111111型代码CD010003中一级分CD12类为“10000” 且备注Cd422为“朱证件类型” 的代码"</span>;</span><br><span class="line">        <span class="comment">// Pattern pattern = Pattern.compile("\\d+");   //英文字母数字为 "[A-Za-z0-9]+"</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"[C][D][0-9]+"</span>);   <span class="comment">//英文字母数字为 "[A-Za-z0-9]+" 将给定的正则表达式编译赋予给 pattern 类 （以 CD 开头接多个数字的字符串）</span></span><br><span class="line">        Matcher matcher = pattern.matcher(content);  </span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;  <span class="comment">//目标字符串进行匹配，匹配到的字符串可以在任意位置返回 true</span></span><br><span class="line">           <span class="keyword">return</span> matcher.group(<span class="number">0</span>);  <span class="comment">//返回匹配到的字符串</span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ljj999/articles/StringCut.html" target="_blank" rel="noopener">正则表达式</a></p><hr><p>href 跟 url src 区别</p><p><a href="https://zhuanlan.zhihu.com/p/35571428" target="_blank" rel="noopener">href url src link</a></p><p>href 是 a 标签的一个属性，用于指向网络资源所在的位置，也可以建立和当前元素（用于设置锚点，返回页面顶部或页面中某个文件）或当前文档（链接）间的联系</p><hr><p>[Ljava.lang.String;@f0c85e<br>“[“ 表示一维数组<br>“[[“表示二维数组<br>“L”表示一个对象<br>“java.lang.String”表示对象的类型<br>“@”后面表示该对象的HashCode</p><p>在打印 String 数组时会出现以上情况，可以将值用 [0] 等方式取出来再打印</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;List-的实现类区别&quot;&gt;&lt;a href=&quot;#List-的实现类区别&quot; class=&quot;headerlink&quot; title=&quot;List 的实现类区别&quot;&gt;&lt;/a&gt;List 的实现类区别&lt;/h5&gt;&lt;p&gt;List 列表类，顺序存储任何对象，可重复&lt;/p&gt;
&lt;p&gt;ArrayList：实现动态数组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机访问，查询快 O(1) ，增删慢&lt;/li&gt;
&lt;li&gt;线程不同步（非线程安全）&lt;/li&gt;
&lt;li&gt;数组可变长，本质是在数组满后，会自动将该数组复制到一个新的 1.5 倍长得新数组中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LinkList：：实现链表（JDK 1.7 后为双向链表）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询慢 O(n)，增删快&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
