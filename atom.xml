<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crowsongのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-17T12:15:28.574Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>crowsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reflection</title>
    <link href="http://yoursite.com/2018/07/17/active-class/"/>
    <id>http://yoursite.com/2018/07/17/active-class/</id>
    <published>2018-07-17T03:51:02.000Z</published>
    <updated>2018-07-17T12:15:28.574Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>反射 </p><p>指的是可以于运行时加载,探知和使用编译期间完全未知的类. 程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性; 加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。 不是所有的实例化都是 new ，new 时必须知道这个类是什么，而很多时候做不到预先知道类名，很多框架如 Spring 应用了反射的原理。</p><a id="more"></a></li><li><p>new 创建的对象是 <font color="rgb(245," 135,="" 31)="">静态加载类</font>，在编译时就需要加载所有可能用到的类，若在编译时找不到类直接报错。一个功能有问题，其他功能都无法使用。</p></li></ul><p>class 为类类型/字节码（编译后的类）</p><p>OfficeBetter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OfficeBetter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args [])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态加载类，在运行时加载</span></span><br><span class="line"></span><br><span class="line">Class c = Class.forName(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">OfficeAble oa = (OfficeAble)c.newInstance();</span><br><span class="line"></span><br><span class="line">oa.start();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OfficeAble.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OfficeAble</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建接口，由使用者来实现该接口,重写 start 方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Word.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">OfficeAble</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"word--starts"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>编译 javac *.java</li><li>运行 java OfficeBetter Word (main 类 + 实现接口类)</li><li>输出结果 word–starts</li></ol><ul><li><p>获取类的信息首先要获取类的类类型</p><p><code>Class c1 = int.class;</code>  //int 的类类型</p><p><code>String c2 = String.class</code>  //String 的类类型</p><p><code>void c3 = void.class</code></p><p><code>System.out.println(c1.getName());</code>  //打印包含包名的类的名称</p><p><code>System.out.println(c2.getSimpleName());</code>  //打印不包含包名的类的名称</p><p><code>System.out.println(c3.getName());</code>   //打印结果：void</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintClassMessage</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传递的是哪个子类的对象，c 就是该子类的类类型</span></span><br><span class="line"></span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getMethods() 获取所有 public 的函数，包括父类继承而来的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods() 获取的是该类自己声明的方法，不问访问权限；</span></span><br><span class="line"></span><br><span class="line">        Method [] ms = c.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ms.length; i++)&#123;</span><br><span class="line">        <span class="comment">//得到方法返回值类型的类类型</span></span><br><span class="line">        Class returnType = ms[i].getReturnType();</span><br><span class="line">        System.out.print(returnType.getName()+<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//得到方法的名称</span></span><br><span class="line">        System.out.print(ms[i].getName()+<span class="string">"("</span>);</span><br><span class="line">        <span class="comment">//获取参数类型，得到的是参数列表的类型的类类型</span></span><br><span class="line">        Class [] paramTypes = ms[i].getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class class1:paramTypes)&#123;</span><br><span class="line">            System.out.print(class1.getName()+<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFieldMessage</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        <span class="comment">//成员变量也是对象；</span></span><br><span class="line">        Field[] fs = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">            Class fieldType = field.getType();</span><br><span class="line">            String typeName = fieldType.getName();</span><br><span class="line">            <span class="comment">//得到成员变量名称</span></span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.println(typeName + <span class="string">" "</span> + fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印对象的构造函数信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConMessage</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        <span class="comment">/*构造函数也是对象</span></span><br><span class="line"><span class="comment">        java.lang.Constructor 封装了构造函数的信息</span></span><br><span class="line"><span class="comment">        getConstructors 获取所有的 public 的构造函数</span></span><br><span class="line"><span class="comment">        Constructor []cs = c.getConstructors();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Constructor [] cs = c.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : cs) &#123;</span><br><span class="line">            System.out.print(constructor.getName()+<span class="string">"("</span>);</span><br><span class="line">            <span class="comment">//获取构造函数的参数列表--&gt;得到的是参数列表的类类型</span></span><br><span class="line">            Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class class1 : parameterTypes) &#123;</span><br><span class="line">                System.out.print(class1.getName()+<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//PrintClassMessage 方法测试类</span><br><span class="line">public class ClassDemo3 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s = &quot;hello&quot;;</span><br><span class="line">        ClassUtil.PrintClassMessage(s);</span><br><span class="line"></span><br><span class="line">        Integer n1 = 1;</span><br><span class="line">        ClassUtil.PrintClassMessage(n1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//printieldMessage() 方法测试类</span><br><span class="line">public class ClassDemo4 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClassUtil.printFieldMessage(&quot;hello&quot;);</span><br><span class="line">        System.out.println(&quot;==========&quot;);</span><br><span class="line">        ClassUtil.printFieldMessage(new Integer(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//printConMessage() 方法测试类</span><br><span class="line">public class ClassDemo5 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClassUtil.printConMessage(&quot;hello&quot;);</span><br><span class="line">        ClassUtil.printConMessage(new Integer(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法的反射操作</p><p>method.invoke(对象，参数列表)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取print(int a,int b)方法，获取一个方法就是获取类的信息，获取类的信息就要获得类的类类型</span></span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        Class c = a1.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取方法 名称和参数决定</span></span><br><span class="line"><span class="comment">         * getMethod 获取的是 public 的方法</span></span><br><span class="line"><span class="comment">         * getDelcaredMethod 自己声明的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method m = c.getMethod(<span class="string">"print"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line"><span class="comment">//          或 Method m = c.getMethod("pirnt", new Class[]&#123;int.class, int.class&#125;);</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 方法的反射操作</span></span><br><span class="line"><span class="comment">             * a1.print(10,20); 方法的反射操作是用 m 对象来进行方法的调用 和 a1.print 调用效果完全相同</span></span><br><span class="line"><span class="comment">             * 方法没有返回值，则返回 null ，有返回值则返回具体的返回值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            Object o = m.invoke(a1, <span class="keyword">new</span> Object[]&#123;<span class="number">10</span>, <span class="number">20</span>&#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">            <span class="comment">//获取方法对象</span></span><br><span class="line">            Method m1 = c.getMethod(<span class="string">"print"</span>, String.class, String.class);</span><br><span class="line">            <span class="comment">//用方法进行反射操作</span></span><br><span class="line">            o = m1.invoke(a1, <span class="string">"Hello"</span>, <span class="string">"Word"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">            Method m2 = c.getMethod(<span class="string">"print"</span>);</span><br><span class="line">            <span class="comment">//或 Method m1 = c.getMethod("print", new Class[]&#123;&#125;);</span></span><br><span class="line">            m2.invoke(a1);</span><br><span class="line">            <span class="comment">//  或m2.invoke(a1,new Object[]&#123;&#125;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a,String b)</span></span>&#123;</span><br><span class="line">        System.out.println(a.toUpperCase() + <span class="string">","</span> + b.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello Word"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过反射了解泛型本质</li></ul><p>class 为类类型/字节码（编译后的类）</p><p>class/method 等反射操作都是绕过编译的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//泛型，只能放 String 类型；</span></span><br><span class="line">        <span class="comment">//防止加入 list1.add(10); 这种操作</span></span><br><span class="line">        ArrayList&lt;String&gt;list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">"hello"</span>);</span><br><span class="line">        Class c1 = list.getClass();</span><br><span class="line">        Class c2 = list1.getClass();</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 反射的操作都是编译之后的操作（跳过编译阶段）</span></span><br><span class="line"><span class="comment">         * c1 == c2 返回 true 说明编译之后的集合泛型是去泛型化的</span></span><br><span class="line"><span class="comment">         * java 中集合的泛型是防止错误输入，只在编译阶段有效，绕过编译就无效</span></span><br><span class="line"><span class="comment">         * 验证：通过方法反射操作，绕过编译</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Method m = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m = c2.getMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">            m.invoke(list1,<span class="number">10</span>);<span class="comment">//绕过编译操作就绕过了泛型</span></span><br><span class="line">            System.out.println(list1.size());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  for (String string : list1) &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(string);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                此时遍历会发生错误异常，提示不能将 int 转换成 String</span></span><br><span class="line"><span class="comment">             * java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;反射 &lt;/p&gt;
&lt;p&gt;指的是可以于运行时加载,探知和使用编译期间完全未知的类. 程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性; 加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。 不是所有的实例化都是 new ，new 时必须知道这个类是什么，而很多时候做不到预先知道类名，很多框架如 Spring 应用了反射的原理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="imooc，reflection,反射" scheme="http://yoursite.com/tags/imooc%EF%BC%8Creflection-%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>hexo next 搭建博客</title>
    <link href="http://yoursite.com/2018/07/11/article-title/"/>
    <id>http://yoursite.com/2018/07/11/article-title/</id>
    <published>2018-07-11T15:09:21.000Z</published>
    <updated>2018-07-17T07:11:10.539Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href=" https://www.cnblogs.com/visugar/p/6821777.html" rel="noopener" target="_blank">hexo 安装</a></li></ul><p>插入图片：</p><p>node_modules：是依赖包<br>public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章<br>themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息</p><hr><p>接下来依次在命令行输入<br>hexo g<br>hexo s</p><img src="/2018/07/11/article-title/hexog.jpg" title="hexo g"><img src="/2018/07/11/article-title/hexos.jpg" title="hexos"><p>在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，<br>看到网页则配置结束</p><hr><ul><li><p>将Hexo与github page 联系起来</p><a id="more"></a><p>设置Git的user name和email：(如果是第一次的话)</p></li></ul><p><code>git config --global user.name &quot;crow-song&quot;</code><br><code>git config --global user.email &quot;crowsong.end@gmail.com&quot;</code></p><ul><li>设置 ssh 密钥</li></ul><p>参考：<a href="https://blog.csdn.net/love_fdu_llp/article/details/38752365" target="_blank" rel="noopener">https://blog.csdn.net/love_fdu_llp/article/details/38752365</a></p><p><a href="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p><ol><li>检查本机是否有ssh key设置</li></ol><p><code>$ cd ~/.ssh 或cd .ssh</code></p><p>如果没有则提示： No such file or directory</p><p>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm * 删除所有文件)</p><ol start="2"><li><code>ssh-keygen -t rsa -C &quot;crowsong.end@gmail.com&quot;</code>  生成密钥对</li></ol><p>之后全部 enter 就行</p><p>秘钥存放路径为：c:/Users/xxxx_000/.ssh/下 </p><ol start="3"><li>查看你生成的公钥：$ cat ~/.ssh/id_rsa.pub   </li></ol><p>复制公钥到 github 账户的 AccountSettings → SSHKeys → 点击 new SSH Key</p><p>title 随意填写，公钥复制进文本域内 点击确定</p><ol start="4"><li>确认设置</li></ol><p>验证下这个key是不是正常工作。 $ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> # Attempts to ssh to github  键入 yes </p><p>看到： Hi username! You’ve successfully authenticated, but GitHub does not # provide shell access. 就表示设置成功。 </p><p>接下来使用 hexo d 不再需要输入用户和密码了</p><hr><p>配置Deployment<br>同样在_config.yml文件中，找到Deployment，然后按照如下修改：<br>repo 中是仓库地址（自己的 git 发布网址）</p><p>deploy:<br>  type:git<br>  repo:<a href="https://crow-song.github.io/" target="_blank" rel="noopener">https://crow-song.github.io/</a><br>  branch:master</p><hr><ul><li>写博客<br>新建一篇博客，执行下面的命令：</li></ul><p>hexo new post “article title”</p><p>这时候在我的 电脑的目录下 ..\hexo\source\ _posts 将会看到 article title.md 文件</p><p>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>参考：<a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p><p><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="nofollw">hexo的next主题个性化教程</a></p><ul><li><p>修改 css 样式，找到目标对应 css 文件，修改 background:#transparent （面板透明色）</p><p>rgba(255,255,255,.9) </p></li><li><p><a href=" https://blog.csdn.net/thewindkee/article/details/55086735" rel="noopener" target="_blank">添加网易云音乐插件 </a></p><p>在 mian.xxxx.css 中设置位置   .header-music {margin-top: 55px;margin-left: 0px; } </p></li><li><p><a href="http://www.yzznl.cn/archives/225.html" rel="noopener" target="_blank">nofollw 作用</a></p></li><li><p><a href="https://www.jianshu.com/p/cf0628478a4e " rel="noopener" target="_blank">添加图片</a></p><p>可用样式为 </p><p>图片放在对应 md 文件的文件夹中</p></li><li><p>背景图   将括号里面的这里填写背景图片地址替换为你所要显示的背景图片地址，#ffffff表示背景颜色为#ffffff(白色)修改为你想要的背景颜色代码，repeat表示图片平铺，不平铺改为no-repeat，scroll表示图片随对象滚动，图片固定不滚动改为fixed。</p><p> 头像旋转放大： hover 选择器使用 选择鼠标移到链接上的样式 xxx:hover(xxx 可以是 img 也可以是类选择器等。如果直接使用 img:hover 会将插入图片一起放大)     .site-author-image:hover </p></li><li><p><a href="https://www.jianshu.com/p/092de536d948" rel="noopener" target="_blank">Typora markdown 语法</a></p></li></ul><hr><blockquote><p>github fork 别人的博客后 404 错误<br><a href="https://github.com/qiubaiying/qiubaiying.github.io/issues/98" target="_blank" rel="noopener">https://github.com/qiubaiying/qiubaiying.github.io/issues/98</a><br>在code下找到CNAME文件，将里面的内容改为：https://你的Github账号名.github.io，然后点底部的commit changes，应该就可以了</p></blockquote><blockquote><p>hexo d 或 hexo deploy 无反应<br>解决: 配置文档中 _config.yml 冒号后需要加空格<br>deploy:<br>type: git<br>repo: <a href="https://github.com/crow-song/crow-song.github.io.git" target="_blank" rel="noopener">https://github.com/crow-song/crow-song.github.io.git</a><br>branch: master</p></blockquote><blockquote><p>hexo g 错误<br>ERROR Process failed: _posts/article-title.md<br>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:<br>md 文档中开头 3 个标题冒号后也需要加空格<br>title: article title<br>date: 2018-07-11 23:09:21<br>tags: 博客创建</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot; https://www.cnblogs.com/visugar/p/6821777.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;hexo 安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;插入图片：&lt;/p&gt;

&lt;p&gt;node_modules：是依赖包&lt;br&gt;public：存放的是生成的页面&lt;br&gt;scaffolds：命令生成文章等的模板&lt;br&gt;source：用命令创建的各种文章&lt;br&gt;themes：主题&lt;br&gt;_config.yml：整个博客的配置&lt;br&gt;db.json：source解析所得到的&lt;br&gt;package.json：项目所需模块项目的配置信息&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接下来依次在命令行输入&lt;br&gt;hexo g&lt;br&gt;hexo s&lt;/p&gt;
&lt;img src=&quot;/2018/07/11/article-title/hexog.jpg&quot; title=&quot;hexo g&quot;&gt;
&lt;img src=&quot;/2018/07/11/article-title/hexos.jpg&quot; title=&quot;hexos&quot;&gt;
&lt;p&gt;在浏览器中打开&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:4000/&lt;/a&gt;，&lt;br&gt;看到网页则配置结束&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将Hexo与github page 联系起来&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客创建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    
  </entry>
  
</feed>
