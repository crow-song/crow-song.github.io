<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crowsongのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-20T13:41:21.419Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>crowsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BOS</title>
    <link href="http://yoursite.com/2019/02/14/bos/"/>
    <id>http://yoursite.com/2019/02/14/bos/</id>
    <published>2019-02-14T10:11:22.000Z</published>
    <updated>2019-02-20T13:41:21.419Z</updated>
    
    <content type="html"><![CDATA[<h5 id="主流软件系统管理："><a href="#主流软件系统管理：" class="headerlink" title="主流软件系统管理："></a>主流软件系统管理：</h5><ul><li>OA 系统（Office automation）办公自动化，将现代化办公和计算机网络结合的新型办公方式</li><li>CRM 系统（Customer Relationship Management）客户关系管理，企业用 CRM 技术来管理与客户间的关系</li><li>ERP 系统（Enterprise Resource Planning）企业资源计划，针对物资管理（物流）、人力资源管理（人流）、财务资源管理（财流）、信息资源管理（信息流）集成一体的企业管理软件</li></ul><a id="more"></a><hr><h5 id="Maven-项目环境"><a href="#Maven-项目环境" class="headerlink" title="Maven 项目环境"></a>Maven 项目环境</h5><p>使用 maven 工具可以进行 依赖管理 和 项目构建</p><p>bos-parent：父工程，统一管理依赖，是一个聚合工程（可以简化操作，只需要在聚合中执行一次，其子工程可以一起执行）</p><ul><li>bos-web</li><li>bos-service</li><li>bos-dao</li><li>bos-domain</li><li>bos-utils</li></ul><p>struts 配置文件中，action 中不写 class=“” ，就会访问<code>org/apache/struts/struts2-core/2.3.24/struts2-core-2.3.24.jar!/struts-default.xml</code> 下的默认 class<code>&lt;default-class-ref class=&quot;com.opensymphony.xwork2.ActionSupport&quot; /&gt;</code> ActionSupport 的默认方法 execute(){return SUCCESS}，当restult 中没有 name 属性，默认为 success，直接跳转到 WEB-INF 下 pages/xxx/yyy.jsp。因为 WEB-INF 下的页面收到保护不能直接访问，只能通过 action 跳转</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"page_*_*"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/WEB-INF/pages/&#123;1&#125;/&#123;2&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="easyui"><a href="#easyui" class="headerlink" title="easyui"></a>easyui</h5><ul><li><p>页面布局 layout</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-layout"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div title=<span class="string">"东部菜单"</span> style=<span class="string">"height:100px"</span> data-options=<span class="string">"region:'north'"</span>&gt;北部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div style="width:200px" data-options="region:'west'"&gt;西部区域&lt;/</span>div&gt;</span><br><span class="line">&lt;div  data-options=<span class="string">"region:'center'"</span>&gt;中部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div style="width:200px" data-options="region:'east'"&gt;东部区域&lt;/</span>div&gt;</span><br><span class="line">&lt;div style=<span class="string">"height:50px"</span> data-options=<span class="string">"region:'south'"</span>&gt;南部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>折叠面板 accordion</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-layout"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div title=<span class="string">"管理系统"</span> style=<span class="string">"height:100px"</span> data-options=<span class="string">"region:'north'"</span>&gt;北部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title="系统菜单" style="width:200px" data-options="region:'west'"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%--fit:自适应，填充父容器--%&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%--arrordion 折叠面板--%&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="easyui-accordion" data-options="fit:true"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div title="面板一"&gt;aaa&lt;/</span>div&gt;</span><br><span class="line">    &lt;div title=<span class="string">"面板二"</span>&gt;bbb&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div title="面板三"&gt;ccc&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div  data-options=<span class="string">"region:'center'"</span>&gt;中部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div style="width:200px" data-options="region:'east'"&gt;东部区域&lt;/</span>div&gt;</span><br><span class="line">&lt;div style=<span class="string">"height:50px"</span> data-options=<span class="string">"region:'south'"</span>&gt;南部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>选项卡面板 tabs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-layout"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div title=<span class="string">"管理系统"</span> style=<span class="string">"height:100px"</span> data-options=<span class="string">"region:'north'"</span>&gt;北部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title="系统菜单" style="width:200px" data-options="region:'west'"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;%--tabs选项卡面板--%&gt;</span></span><br><span class="line"><span class="regexp">&lt;div  class="easyui-tabs" data-options="region:'center'"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div data-options="iconCls:'icon-cut',closable:true" title="面板一"&gt;aaa&lt;/</span>div&gt;</span><br><span class="line">  &lt;div data-options=<span class="string">"closable:true"</span> title=<span class="string">"面板二"</span>&gt;bbb&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div title="面板三"&gt;ccc&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div style="width:200px" data-options="region:'east'"&gt;东部区域&lt;/</span>div&gt;</span><br><span class="line">&lt;div style=<span class="string">"height:50px"</span> data-options=<span class="string">"region:'south'"</span>&gt;南部区域&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="jquery-动态添加-tabs"><a href="#jquery-动态添加-tabs" class="headerlink" title="jquery 动态添加 tabs"></a>jquery 动态添加 tabs</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-accordion"</span> data-options=<span class="string">"fit:true"</span>&gt;</span><br><span class="line">  &lt;div data-options=<span class="string">"iconCls:'icon-cut'"</span> title=<span class="string">"面板一"</span>&gt;</span><br><span class="line">    &lt;a id=<span class="string">"but1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-linkbutton"</span>&gt;添加选项卡&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      $(function()&#123;</span></span><br><span class="line"><span class="string">          // 页面加载完成，为按钮添加绑定事件</span></span><br><span class="line">          $("#but1").click(function()&#123;</span><br><span class="line">              <span class="comment">// 调用 tabs 对象的 add 方法</span></span><br><span class="line">              <span class="keyword">if</span>($(<span class="string">"#mytabs"</span>).tabs(<span class="string">"exists"</span>,<span class="string">"系统管理"</span>))&#123;</span><br><span class="line">                  $(<span class="string">"#mytabs"</span>).tabs(<span class="string">"select"</span>,<span class="string">"系统管理"</span>);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  $(<span class="string">"#mytabs"</span>).tabs(<span class="string">"add"</span>,&#123;</span><br><span class="line">                      title:<span class="string">'系统管理'</span>,</span><br><span class="line">                      iconCls:<span class="string">'icon-edit'</span>,</span><br><span class="line">                      closable:<span class="literal">true</span>,</span><br><span class="line">                      content:<span class="string">'&lt;iframe frameborder="0" height="100%" width="100%" src="http://www.baidu.com"&gt;&lt;/iframe&gt;'</span></span><br><span class="line">                  &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="Ztree-的使用"><a href="#Ztree-的使用" class="headerlink" title="Ztree 的使用"></a>Ztree 的使用</h5><p>方法一（了解）：利用 json 嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">"面板二"</span>&gt;</span><br><span class="line">  &lt;%--展示 ztree--%&gt;</span><br><span class="line">    &lt;%-- 这里 <span class="class"><span class="keyword">class</span> 必须为 <span class="title">ztree</span>，不然展开样式会无法应用 --%&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">ul</span> <span class="title">id</span></span>=<span class="string">"ztree1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"ztree"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="comment">// 页面加载后执行这段代码，表示创建 stree 属性全部为默认值</span></span><br><span class="line">       <span class="keyword">var</span> setting = &#123;&#125;;</span><br><span class="line">       <span class="comment">// 构造节点数组</span></span><br><span class="line">       <span class="keyword">var</span> zNodes = [</span><br><span class="line">           <span class="comment">// 每个 json 对象表示一个节点数据</span></span><br><span class="line">           &#123;<span class="string">"name"</span>:<span class="string">"节点一"</span>,<span class="string">"children"</span>:[</span><br><span class="line">                   &#123;<span class="string">"name"</span>:<span class="string">"子节点一"</span>&#125;,</span><br><span class="line">                   &#123;<span class="string">"name"</span>:<span class="string">"子节点二"</span>&#125;</span><br><span class="line">               ]&#125;,</span><br><span class="line">           &#123;<span class="string">"name"</span>:<span class="string">"节点二"</span>&#125;,</span><br><span class="line">           &#123;<span class="string">"name"</span>:<span class="string">"节点三"</span>&#125;</span><br><span class="line">       ];</span><br><span class="line">       <span class="comment">// 调用 api 初始化 ztree</span></span><br><span class="line">       $.fn.zTree.init($(<span class="string">"#ztree1"</span>),setting,zNodes);</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>方法二（重要）：利用简单 json 构建子节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setting 的区别，将 simpleDate enable 设置为 <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> setting2 = &#123;</span><br><span class="line">                  data: &#123;</span><br><span class="line">                      simpleData: &#123;</span><br><span class="line">                          enable: <span class="literal">true</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;&#125;;</span><br><span class="line">节点数组的区别</span><br><span class="line"><span class="keyword">var</span> zNodes2 = [</span><br><span class="line">    <span class="comment">// 每个 json 对象表示一个节点数据</span></span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"pId"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"节点一"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"pId"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"节点二"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"pId"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"节点三"</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h5 id="idea-下反向工程生成-entity-及其-hbm-xml"><a href="#idea-下反向工程生成-entity-及其-hbm-xml" class="headerlink" title="idea 下反向工程生成 entity 及其 hbm.xml"></a>idea 下反向工程生成 entity 及其 hbm.xml</h5><ul><li>为模块添加 hibernate（不然后面会找不到 persistence 选项）</li><li>右侧 （或者 view tool windows） database</li><li>点击 + 号，选择 DataSource、Mysql，添加用户密码数据库</li><li>左侧（或者 view tool windows）persistence，选择右键 Generate Persistence Mapping - By DataBase Schema 添加 hibernate 持久层支持，生成实体 Bean 、配置文件</li><li>选择数据库和要存放 bean 的包，选择需要生成的 DataBase Schema</li><li>可以选择不添加 Session Factory，但需要手动添加</li><li>选择 Xml per Entity（hbm.xml）或者 JPA Annotation（注释）</li></ul><p><a href="https://www.cnblogs.com/java-class/p/6208356.html" target="_blank" rel="noopener">idea 逆向工程实践</a></p><p><a href="https://my.oschina.net/u/1035653/blog/494285" target="_blank" rel="noopener">idea hibernate 反向工程</a></p><hr><h5 id="代码抽取"><a href="#代码抽取" class="headerlink" title="代码抽取"></a>代码抽取</h5><p>持久层代码抽取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.bos.dao.base.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.bos.dao.base.IbaseDao;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.support.HibernateDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">IbaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//    代表某个实体类型</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; entityClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDaoImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**在该类的构造方法中获得调用它的子类的实体类型</span></span><br><span class="line"><span class="comment">         * this 代表调用 BaseDaoImpl 的子类,getClass 获得 BaseDaoImpl 子类的类类型，</span></span><br><span class="line"><span class="comment">         *   getGenericSuperclass 表示获得 BaseDaoImpl 子类的父类的类类型，即 BaseDaoImpl 本身</span></span><br><span class="line"><span class="comment">         *   为了获取运行时 BaseDaoImpl&lt;T&gt; 中 T 的值,需要用到 Type 的子接口的方法，</span></span><br><span class="line"><span class="comment">         *   所以将其强转成 ParameterizedType,</span></span><br><span class="line"><span class="comment">         *   使用 getActualTypeArguments 可以获得父类声明的泛型数组的值,&lt;T,a,b,c&gt; 中可以为多个值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ParameterizedType superclass = (ParameterizedType)<span class="keyword">this</span>.getClass().getGenericSuperclass();</span><br><span class="line">        Type[] types = superclass.getActualTypeArguments();</span><br><span class="line">        entityClass = (Class) types[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为 spring 中使用了注解的方式，没有配置</span></span><br><span class="line"><span class="comment">     * &lt;bean id="userDao" class="xxxUserImpl"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="sessionFactory" ref="sessionFactory"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     * 所以 userDao 无法获得 sessionFactory 对象，需要自己配置注入方法</span></span><br><span class="line"><span class="comment">     * 随便创建一个方法，给予 SessionFactory 对象</span></span><br><span class="line"><span class="comment">     * spring 中已经配置了 SessionFactory，所以 mySessionFactory可以获得 SessionFactory 参数</span></span><br><span class="line"><span class="comment">     * 利用 <span class="doctag">@Resource</span> 注解注入到 spring</span></span><br><span class="line"><span class="comment">     * 调用 父类也就是 HibernateDaoSupport 的</span></span><br><span class="line"><span class="comment">     * this.hibernateTemplate = createHibernateTemplate(sessionFactory);方法</span></span><br><span class="line"><span class="comment">     * 创建 hibernateTemplate 模板对象，然后用 <span class="doctag">@Resource</span> 注解注入到 spring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mySessionFactory</span><span class="params">(SessionFactory sessionFactory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setSessionFactory(sessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getHibernateTemplate().save(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getHibernateTemplate().delete(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getHibernateTemplate().update(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findById</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getHibernateTemplate().get(entityClass,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">findAll</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        String hql = <span class="string">"FROM "</span> + entityClass.getSimpleName();</span><br><span class="line">        <span class="keyword">return</span> (List&lt;T&gt;)<span class="keyword">this</span>.getHibernateTemplate().find(hql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表现层代码抽取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.bos.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T model;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法动态获取实体类型</span></span><br><span class="line"><span class="comment">     * 通过反射获得子类的类类型，然后用 反射 实例化（创建 model 对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseAction</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        为了使用子类的方法，强转</span></span><br><span class="line">        ParameterizedType genericSuperclass = (ParameterizedType) <span class="keyword">this</span>.getClass().getGenericSuperclass();</span><br><span class="line"><span class="comment">//        获得 BaseAction &lt;T&gt; 中 T 的值（获得范型数组&lt;T&gt;)</span></span><br><span class="line">        Type[] actualTypeArguments = genericSuperclass.getActualTypeArguments();</span><br><span class="line">        Class&lt;T&gt; entityClass = (Class&lt;T&gt;) actualTypeArguments[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//        通过反射创建对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            model = entityClass.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="easyUI-的一些方法"><a href="#easyUI-的一些方法" class="headerlink" title="easyUI 的一些方法"></a>easyUI 的一些方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">信息提示框</span><br><span class="line">$.messager.alert（title, msg, icon, fn）</span><br><span class="line">确认方法</span><br><span class="line">$.messager.confirm（title, msg, fn）</span><br><span class="line">右下角的信息窗</span><br><span class="line">$.messager.show(&#123;</span><br><span class="line">            title:<span class="string">'标题'</span>,</span><br><span class="line">            msg:<span class="string">'内容'</span>,</span><br><span class="line">            timeout:<span class="number">3000</span>,</span><br><span class="line">            <span class="comment">// 表示滑动出现跟消失</span></span><br><span class="line">            showType:<span class="string">'slide'</span></span><br><span class="line">        &#125;)；</span><br></pre></td></tr></table></figure><p>菜单制作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--制作菜单--%&gt;</span><br><span class="line">&lt;a data-options="iconCls:'icon-help',menu:'#mm'" class="easyui-menubutton" &gt;控制面板&lt;/a&gt;</span><br><span class="line">&lt;%--使用 div 创建下拉菜单--%&gt;</span><br><span class="line">&lt;div id=<span class="string">"mm"</span>&gt;</span><br><span class="line">  &lt;%--添加修改图标--%&gt;</span><br><span class="line">  &lt;div onclick="alert('点击事件')" data-options="iconCls:'icon-edit'"&gt;修改密码&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;联系管理员&lt;/div&gt;</span><br><span class="line">  &lt;%--分隔符 separate 的缩写，添加分割线--%&gt;</span><br><span class="line">  &lt;div class="menu-sep"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;退出系统&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="设置拦截器将未登录用户跳转到登录页面"><a href="#设置拦截器将未登录用户跳转到登录页面" class="headerlink" title="设置拦截器将未登录用户跳转到登录页面"></a>设置拦截器将未登录用户跳转到登录页面</h5><p>编写拦截器，继承 struts2 框架的 MethodFilterInterceptor 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BOSLoginInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义拦截器，实现未登录用户自动跳转到登录页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actionInvocation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation actionInvocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        用工具类 从 session 获取登录对象</span></span><br><span class="line">        User user = BOSUtils.getLoginUser();</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//            没登录，跳转到登录页面,LOGIN 等常量来自于 Action 接口，拦截器没有实现 action 接口，所以无法使用，只能自己写字符串 “login”</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        放行</span></span><br><span class="line">        <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.bos.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.bos.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BOS 项目的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BOSUtils</span> </span>&#123;</span><br><span class="line"><span class="comment">//    获取 session 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServletActionContext.getRequest().getSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    获取 登录用户对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getLoginUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (User) BOSUtils.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>struts2.xml 配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--注册自定义拦截器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"bosLoginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.itheima.bos.web.interceptor.BOSLoginInterceptor"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--排除登录方法拦截--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--定义拦截器栈--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"bosLoginInterceptor"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--struts2 自带的拦截器栈--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用 validatabox 进行非空校验和长度校验</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;新密码：&lt;/td&gt;</span><br><span class="line">    &lt;%--使用 easyui-valudatebox 属性需要 <span class="class"><span class="keyword">class</span> 中填写该值，然后可以使用 <span class="title">required</span></span>=“<span class="keyword">true</span>”/<span class="string">"required"</span> 进行非空判断，data-optoins=<span class="string">"validType:'length[4,6]'"</span>，进行输入密码的长度判断--%&gt;</span><br><span class="line">    &lt;td&gt;&lt;input  required="true" data-options="validType:'length[4,6]'" id="txtNewPass" type="Password" class="txt01 easyui-validatebox" /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;确认密码：&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;input required="true" data-options="validType:'length[4,6]'" id="txtRePass" type="Password" class="txt01 easyui-validatebox" /&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br></pre></td></tr></table></figure><p>为 jsp 页面方法添加 onclick 事件校验输入密码是否一致</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="string">"#btnEp"</span>).click(function()&#123;</span><br><span class="line">    var isValid = $(<span class="string">"#editPasswordForm"</span>).form(<span class="string">'validate'</span>);</span><br><span class="line">    <span class="keyword">if</span>(isValid)&#123;</span><br><span class="line">        <span class="comment">//两次输入是否一致</span></span><br><span class="line">        var v1 = $(<span class="string">"#txtNewPass"</span>).val();</span><br><span class="line">        var v2 = $(<span class="string">"#txtRePass"</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(v1==v2)&#123;</span><br><span class="line">            <span class="comment">// 一致</span></span><br><span class="line">            $.post(<span class="string">"UserAction_editPassword.action"</span>,&#123;<span class="string">"password"</span>:v2&#125;,function(data)&#123;</span><br><span class="line">     <span class="keyword">if</span>(data==<span class="string">"1"</span>)&#123;</span><br><span class="line">         <span class="comment">// 提示成功，关闭窗口</span></span><br><span class="line">       $(<span class="string">"#editPwdWindow"</span>).window(<span class="string">"close"</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         $.messager.alert(<span class="string">"提示"</span>,<span class="string">"修改密码失败"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   $.messager.alert(<span class="string">"提示"</span>,<span class="string">"两次输入密码不一致"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>UserAction 的密码校验方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户修改密码方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">editPassword</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String flag=<span class="string">"1"</span>;</span><br><span class="line"><span class="comment">//        修改当前用户密码</span></span><br><span class="line">        User user = BOSUtils.getLoginUser();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.editPassword(user.getId(),model.getPassword());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            flag=<span class="string">"0"</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ServletActionContext.getResponse().getWriter().write(flag);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>UserDao 的密码校验方法,使用 executeUpdate 增加复用性，传入 queryName 参数表示在 hbm.xml 的 hibernate 映射文件中配置的 query 语句名，objects 表示多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeUpdate</span><span class="params">(String queryName, Object... objects)</span> </span>&#123;</span><br><span class="line">        Session currentSession = <span class="keyword">this</span>.getSessionFactory().getCurrentSession();</span><br><span class="line">        Query query = currentSession.getNamedQuery(queryName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        为 HQL 中 ？ 赋值</span></span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = objects.length;</span><br><span class="line">        <span class="keyword">for</span>(Object obj : objects)&#123;</span><br><span class="line">            query.setParameter(i++,obj);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        执行更新</span></span><br><span class="line">        query.executeUpdate();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>hibernate 实体 bean 的 映射文件中定义更新语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.itheima.bos.domain.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span> <span class="attr">schema</span>=<span class="string">"bos32"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"salary"</span> <span class="attr">column</span>=<span class="string">"salary"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">column</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"station"</span> <span class="attr">column</span>=<span class="string">"station"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"telephone"</span> <span class="attr">column</span>=<span class="string">"telephone"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"remark"</span> <span class="attr">column</span>=<span class="string">"remark"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%--query</span> 语句<span class="attr">--</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"user.editPassword"</span>&gt;</span></span><br><span class="line">        UPDATE User SET password = ? WHERE id = ?</span><br><span class="line">    <span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="idea-hibernate-映射关系配置"><a href="#idea-hibernate-映射关系配置" class="headerlink" title="idea hibernate 映射关系配置"></a>idea hibernate 映射关系配置</h5><p><img src="D:\hexo\source\_posts\bos\hibernate 逆向建表.png" alt="1550416562245"></p><p><a href="https://www.cnblogs.com/solverpeng/p/5948461.html" target="_blank" rel="noopener">idea hibernae 映射关系配置</a></p><hr><h5 id="添加手机号码校验"><a href="#添加手机号码校验" class="headerlink" title="添加手机号码校验"></a>添加手机号码校验</h5><p>jsp 端</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;手机&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;</span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   <span class="comment">// 扩展手机号校验规则</span></span><br><span class="line">   $(function()&#123;</span><br><span class="line">       <span class="comment">// 为保存按钮添加保存功能</span></span><br><span class="line">     $(<span class="string">"#save"</span>).click(function()&#123;</span><br><span class="line">         var v = $(<span class="string">"#addStaffForm"</span>).form(<span class="string">"validate"</span>);</span><br><span class="line">         <span class="keyword">if</span>(v)&#123;</span><br><span class="line">                       $(<span class="string">"#addStaffForm"</span>).submit();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">       var reg = /^<span class="number">1</span>[<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>|<span class="number">7</span>|<span class="number">8</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">9</span>&#125;$/;</span><br><span class="line">               $.extend($.fn.validatebox.defaults.rules,</span><br><span class="line">       &#123;</span><br><span class="line">                     telephone:&#123;</span><br><span class="line">                         validator:function(value,param)&#123;</span><br><span class="line">                             <span class="keyword">return</span> reg.test(value);</span><br><span class="line">                         &#125;,</span><br><span class="line">                         message:<span class="string">'手机号输入格式错误'</span></span><br><span class="line">                     &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;input type="text" data-options="validType:'telephone'" name="telephone" class="easyui-validatebox" required="true"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="easyui-datagrid-创建"><a href="#easyui-datagrid-创建" class="headerlink" title="easyui-datagrid 创建"></a>easyui-datagrid 创建</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--使用插件提供的 api 动态创建 datagrid--%&gt;</span><br><span class="line">&lt;table id=<span class="string">"mytable"</span>&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  $(function()&#123;</span><br><span class="line">     $(<span class="string">"#mytable"</span>).datagrid(&#123;</span><br><span class="line">         <span class="comment">// 指定 ajax 发送请求地址</span></span><br><span class="line">         url:<span class="string">'$&#123;pageContext.request.contextPath&#125;/json/datagrid_data.json'</span>,</span><br><span class="line">         <span class="comment">//定义标题行所有的列</span></span><br><span class="line">         columns:[[</span><br><span class="line">          &#123;title:<span class="string">'编号'</span>,field:<span class="string">'id'</span>,checkbox:<span class="keyword">true</span>&#125;,</span><br><span class="line">          &#123;title:<span class="string">'姓名'</span>,field:<span class="string">'name'</span>&#125;,</span><br><span class="line">          &#123;title:<span class="string">'性别'</span>,field:<span class="string">'age'</span>&#125;,</span><br><span class="line">          &#123;title:<span class="string">'住址'</span>,field:<span class="string">'address'</span>&#125;</span><br><span class="line">      ]],</span><br><span class="line">         rownumbers:<span class="keyword">true</span>,</span><br><span class="line">         singleSelect:<span class="keyword">true</span>,</span><br><span class="line">         <span class="comment">// 定义工具栏</span></span><br><span class="line">         toolbar:[</span><br><span class="line">             &#123;text:<span class="string">"添加"</span>,iconCls:<span class="string">"icon-add"</span>,</span><br><span class="line">                 <span class="comment">//为按钮绑定单击事件</span></span><br><span class="line">                 handler:function()&#123;</span><br><span class="line">                     alert(<span class="string">"点击添加"</span>);</span><br><span class="line">                 &#125;&#125;,</span><br><span class="line">             &#123;text:<span class="string">"删除"</span>,iconCls:<span class="string">"icon-remove"</span>&#125;,</span><br><span class="line">             &#123;text:<span class="string">"修改"</span>,iconCls:<span class="string">"icon-edit"</span>&#125;,</span><br><span class="line">             &#123;text:<span class="string">"查询"</span>,iconCls:<span class="string">"icon-search"</span>&#125;</span><br><span class="line">         ],</span><br><span class="line">         <span class="comment">// 显示分页条</span></span><br><span class="line">         pagination:<span class="keyword">true</span></span><br><span class="line">     &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>dao 查询分页方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用查询分页方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(PageBean pageBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentPage = pageBean.getCurrentPage();</span><br><span class="line">        <span class="keyword">int</span> pageSize = pageBean.getPageSize();</span><br><span class="line">        DetachedCriteria detachedCriteria = pageBean.getDetachedCriteria();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询 pageBean 的 total （总记录数）</span></span><br><span class="line"><span class="comment">//        指定 hibernate 发出 sql 语句的形式，rowCount 会发出 count(*) 的 sql</span></span><br><span class="line">        detachedCriteria.setProjection(Projections.rowCount());</span><br><span class="line">        List&lt;Long&gt; countList = (List&lt;Long&gt;) <span class="keyword">this</span>.getHibernateTemplate().findByCriteria(detachedCriteria);</span><br><span class="line"><span class="comment">//        获得 list 集合的第一个数据，因为只有一个数据所以就是 记录数</span></span><br><span class="line">        Long count = countList.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//        将总条数放入 pageBean</span></span><br><span class="line">        pageBean.setTotal(count.intValue());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询 rows（当前页需要展示的数据集合）</span></span><br><span class="line"><span class="comment">//        将 hibernate 发出 sql 语句的形式改回来，select * from xxx 的形式</span></span><br><span class="line">        detachedCriteria.setProjection(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> firstResult = (currentPage-<span class="number">1</span>)*pageSize;</span><br><span class="line">        <span class="keyword">int</span> maxResults = pageSize;</span><br><span class="line">        List rows = <span class="keyword">this</span>.getHibernateTemplate().findByCriteria(detachedCriteria, firstResult, maxResults);</span><br><span class="line">        pageBean.setRows(rows);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>web 层分页查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pageQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PageBean pageBean = <span class="keyword">new</span> PageBean();</span><br><span class="line">        pageBean.setCurrentPage(page);</span><br><span class="line">        pageBean.setPageSize(rows);</span><br><span class="line"><span class="comment">//        创建提交离线查询对象，告诉 hibernate 该查哪张表</span></span><br><span class="line">        DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Staff.class);</span><br><span class="line">        pageBean.setDetachedCriteria(detachedCriteria);</span><br><span class="line"></span><br><span class="line">        staffService.pageQuery(pageBean);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用 json-lib 将 pageBean 转化为 json 对象，通过输出流返回页面</span></span><br><span class="line"><span class="comment">//        jsonObject 用于将单一对象转换成 josn</span></span><br><span class="line"><span class="comment">//        jsonArray 用于将数组集合转换成 json</span></span><br><span class="line">        JsonConfig jsonConfig = <span class="keyword">new</span> JsonConfig();</span><br><span class="line"><span class="comment">//        指定不需要转为 josn 的属性</span></span><br><span class="line">        jsonConfig.setExcludes(<span class="keyword">new</span> String[]&#123;<span class="string">"currentPage"</span>,<span class="string">"detachedCriteria"</span>,<span class="string">"pageSize"</span>&#125;);</span><br><span class="line">        String json = JSONObject.fromObject(pageBean,jsonConfig).toString();</span><br><span class="line"><span class="comment">//        该方法有重载方法，可以选择是否传入 jsonConfig</span></span><br><span class="line"><span class="comment">//        String json = JSONObject.fromObject(pageBean).toString();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        将 json 用输出流写回页面</span></span><br><span class="line">        ServletActionContext.getResponse().setContentType(<span class="string">"text/json;charset=utf-8"</span>);</span><br><span class="line">        ServletActionContext.getResponse().getWriter().write(json);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>response.getWriter()返回的是PrintWriter，这是一个打印输出流。<br>response.getWriter().print(),不仅可以打印输出文本格式的（包括html标签），还可以将一个对象以默认的编码方式转换为二进制字节输出</p><p><a href="https://blog.csdn.net/sjl6666666666/article/details/53239820" target="_blank" rel="noopener">response.getWriter().write() 和 print 区别</a></p><p><a href="https://blog.csdn.net/qq_27088383/article/details/50468779" target="_blank" rel="noopener">数组集合区别</a></p><hr><h5 id="派件员批量删除按钮添加事件"><a href="#派件员批量删除按钮添加事件" class="headerlink" title="派件员批量删除按钮添加事件"></a>派件员批量删除按钮添加事件</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function">function <span class="title">doDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获得数据表格中选中的行，返回数组对象,如果没有选择则返回空数组</span></span><br><span class="line">  var rows =  $(<span class="string">"#grid"</span>).datagrid(<span class="string">"getSelections"</span>);</span><br><span class="line">  <span class="keyword">if</span>(rows.length==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">//没有选中记录，弹出信息</span></span><br><span class="line">    $.messager.alert(<span class="string">"提示信息"</span>,<span class="string">"请选择需要删除的取派员"</span>,<span class="string">"warning"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//选中了取派员，弹出确认框，是否删除</span></span><br><span class="line">    $.messager.confirm(<span class="string">"确认提醒"</span>,<span class="string">"是否需要删除选中的取派员"</span>,</span><br><span class="line">      function(r)&#123;</span><br><span class="line">          <span class="keyword">if</span>(r)&#123;</span><br><span class="line">              var array = <span class="keyword">new</span> Array();</span><br><span class="line">              <span class="comment">//确认删除，发送请求，获取所有选中取派员的 id</span></span><br><span class="line">         <span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;rows.length;i++)&#123;</span><br><span class="line">           var staff = rows[i];</span><br><span class="line">           var id = staff.id;</span><br><span class="line">           array.push(id);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// alert(array.join(","));</span></span><br><span class="line">         var ids = array;</span><br><span class="line">         <span class="comment">// location.href = "staffAction_deleteBatch.action?ids="+ids;</span></span><br><span class="line">         $.post(<span class="string">"staffAction_deleteBatch.action?ids="</span>+ids);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用 array.join(“,”); 可以指定 array 各个数组间的分割类型，如果不用 array.join(),默认为 , 分隔符</p><hr><p>表单回显</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function doDblClickRow(rowIndex, rowData)&#123;</span><br><span class="line">    $(&quot;#editStaffWindow&quot;).window(&quot;open&quot;);</span><br><span class="line">    // 自动回显表单，rowData 参数是一个 json 字段，里面的 name 与表单名一致，所以可以回显</span><br><span class="line">    $(&quot;#editStaffForm&quot;).form(&quot;load&quot;,rowData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web 层表单修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改取派员信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        一般表之间有关联关系，直接用 model 数据覆盖会造成其他关联表误操作</span></span><br><span class="line"><span class="comment">//        根据 id 查询查询原始数据</span></span><br><span class="line">        Staff staff = staffService.findById(model.getId());</span><br><span class="line">        <span class="comment">//使用页面提交的数据覆盖原始数据</span></span><br><span class="line">        staff.setName(model.getName());</span><br><span class="line">        staff.setTelephone(model.getTelephone());</span><br><span class="line">        staff.setHaspda(model.getHaspda());</span><br><span class="line">        staff.setStation(model.getStation());</span><br><span class="line">        staff.setStandard(model.getStandard());</span><br><span class="line">        staffService.update(staff);</span><br><span class="line">        <span class="keyword">return</span> LIST;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h5 id="文件上传页面不刷新（伪）"><a href="#文件上传页面不刷新（伪）" class="headerlink" title="文件上传页面不刷新（伪）"></a>文件上传页面不刷新（伪）</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe style="display:none" name="abc"&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;form target=<span class="string">"abc"</span> action=<span class="string">"xxx"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"myfile"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"upload"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>easyui 中</p><p><code>$(&quot;#form&quot;).form(&quot;submit&quot;)</code></p><p>也是采用了隐藏的 iframe 来达到页面不刷新的效果，需要刷新需要使用</p><p><code>$(&quot;#form&quot;).submit()</code></p><h5 id="ocupload-的-upload-方法实现文件上传不刷新"><a href="#ocupload-的-upload-方法实现文件上传不刷新" class="headerlink" title="ocupload 的 upload 方法实现文件上传不刷新"></a>ocupload 的 upload 方法实现文件上传不刷新</h5><p>底层也是 iframe 原理，利用 jquery 页面加载完毕时修改 div 属性，创建一个 div 块来包裹代码，创建一个文件上传的 form 表单，target 提交到 iframe ，创建 type=”file” 的 input 来覆盖在原来的按钮上，点击原来的按钮时，会上传文件并且刷新隐藏的 iframe 页面</p><p>不需要点击提交按钮自动提交文件：按钮绑定一个 onchange 事件，选完文件触发 submit()</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  $(function()&#123;</span><br><span class="line">      $(<span class="string">"#myButton"</span>).upload(&#123;</span><br><span class="line">          action:<span class="string">'xxx.action'</span>,</span><br><span class="line">          name:<span class="string">'myFile'</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;input id=<span class="string">"myButton"</span> type=<span class="string">"button"</span> value=<span class="string">"上传"</span>/&gt;</span><br></pre></td></tr></table></figure><p>hidden 是 style 的 visibility 属性，能让元素不可见，但是还是占据空间</p><p>display ：none 是将元素不再渲染，不会占据空间</p><p>我们有几种方式可以隐藏一个元素：</p><ol><li>CSS display的值是none。</li><li>type=”hidden”的表单元素。</li><li>宽度和高度都显式设置为0。</li><li>一个祖先元素是隐藏的，该元素是不会在页面上显示</li><li>CSS visibility的值是hidden</li><li>CSS opacity的指是0</li></ol><p><a href="http://www.cnblogs.com/liebagefly/p/7503045.html" target="_blank" rel="noopener">hidden 与 display:none 区别</a></p><p><a href="https://zhuanlan.zhihu.com/p/23860711" target="_blank" rel="noopener">display:none、visibility:hidden 区别总结</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面加载完成后加载 OCUpload 插件方法</span></span><br><span class="line">$(<span class="string">"#button-import"</span>).upload(&#123;</span><br><span class="line">    action:<span class="string">'RegionAction_importXls.action'</span>,</span><br><span class="line">    name:<span class="string">'regionFile'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h5 id="区域导入"><a href="#区域导入" class="headerlink" title="区域导入"></a>区域导入</h5><p>action 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区域导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">importXls</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(regionFile);</span><br><span class="line">        List&lt;Region&gt; regionList = <span class="keyword">new</span> ArrayList&lt;Region&gt;();</span><br><span class="line">        <span class="comment">//使用 POI 解析 Excel 文件</span></span><br><span class="line">        HSSFWorkbook hssfWorkbook = <span class="keyword">new</span> HSSFWorkbook(<span class="keyword">new</span> FileInputStream(regionFile));</span><br><span class="line">        HSSFSheet hssfSheet = hssfWorkbook.getSheet(<span class="string">"Sheet1"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Row row : hssfSheet)&#123;</span><br><span class="line">            <span class="keyword">if</span>(row.getRowNum()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String id = row.getCell(<span class="number">0</span>).getStringCellValue();</span><br><span class="line">            String province = row.getCell(<span class="number">1</span>).getStringCellValue();</span><br><span class="line">            String city = row.getCell(<span class="number">2</span>).getStringCellValue();</span><br><span class="line">            String district = row.getCell(<span class="number">3</span>).getStringCellValue();</span><br><span class="line">            String postcode = row.getCell(<span class="number">4</span>).getStringCellValue();</span><br><span class="line"><span class="comment">//            包装成区域对象</span></span><br><span class="line">            Region region = <span class="keyword">new</span> Region(id,province,city,district,postcode,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            去除 河北省的 的 省、石家庄市 的 市、桥西区 的 区，等字符串最后一个字符</span></span><br><span class="line">            province = province.substring(<span class="number">0</span>,province.length()-<span class="number">1</span>);</span><br><span class="line">            city = city.substring(<span class="number">0</span>,city.length()-<span class="number">1</span>);</span><br><span class="line">            district = district.substring(<span class="number">0</span>,district.length()-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//            拼接 河北 石家庄 桥西</span></span><br><span class="line">            String info = province + city + district;</span><br><span class="line"><span class="comment">//            获取各个中文字的首字母</span></span><br><span class="line">            String[] head = PinYin4jUtils.getHeadByString(info);</span><br><span class="line"><span class="comment">//            把字符数组拼接成字符串</span></span><br><span class="line">            String shortcode = StringUtils.join(head);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            城市编码 shijiazhuang</span></span><br><span class="line"><span class="comment">//            将汉字转换成拼音</span></span><br><span class="line">            String cityPY = PinYin4jUtils.hanziToPinyin(city, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            region.setShortcode(shortcode);</span><br><span class="line">            region.setCitycode(cityPY);</span><br><span class="line"></span><br><span class="line">            regionList.add(region);</span><br><span class="line">        &#125;</span><br><span class="line">        regionService.saveBatch(regionList);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h5 id="分页类的重构抽取"><a href="#分页类的重构抽取" class="headerlink" title="分页类的重构抽取"></a>分页类的重构抽取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原 action 中定义的属性抽取</span></span><br><span class="line"><span class="keyword">protected</span> PageBean pageBean = <span class="keyword">new</span> PageBean();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(<span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line">        pageBean.setCurrentPage(page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(<span class="keyword">int</span> rows)</span> </span>&#123;</span><br><span class="line">        pageBean.setPageSize(rows);</span><br><span class="line">    &#125;</span><br><span class="line">    DetachedCriteria detachedCriteria = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将指定 java 对象转换为 josn，并响应到客户端</span></span><br><span class="line"><span class="comment"> * 使用 json-lib 将 pageBean 转化为 json 对象，通过输出流返回页面</span></span><br><span class="line"><span class="comment"> * jsonObject 用于将单一对象转换成 josn</span></span><br><span class="line"><span class="comment"> * jsonArray 用于将数组集合转换成 json</span></span><br><span class="line"><span class="comment"> * JSONObject.fromObject方法有重载方法，可以选择是否传入 jsonConfig</span></span><br><span class="line"><span class="comment"> * String json = JSONObject.fromObject(pageBean).toString();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> excludes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">java2Json</span><span class="params">(Object o,String [] excludes)</span></span>&#123;</span><br><span class="line">    JsonConfig jsonConfig = <span class="keyword">new</span> JsonConfig();</span><br><span class="line">    <span class="comment">//指定不需要转为 josn 的属性</span></span><br><span class="line">    jsonConfig.setExcludes(excludes);</span><br><span class="line">    String json = JSONObject.fromObject(o,jsonConfig).toString();</span><br><span class="line">    ServletActionContext.getResponse().setContentType(<span class="string">"text/json;charset=utf-8"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将 json 用输出流写回页面</span></span><br><span class="line">        ServletActionContext.getResponse().getWriter().write(json);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="分区添加功能"><a href="#分区添加功能" class="headerlink" title="分区添加功能"></a>分区添加功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给 Region bean 添加 name get 方法。在 Region 对象转换为 json 时会增加一个 name 字段</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> province + <span class="string">" "</span> + city + <span class="string">" "</span> + district;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模糊查询 jsp 页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;选择区域&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line"> &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-combobox"</span> name=<span class="string">"region.id"</span>  </span><br><span class="line">     data-options=<span class="string">"valueField:'id',</span></span><br><span class="line"><span class="string">     textField:'name',</span></span><br><span class="line"><span class="string">     url:'RegionAction_listajax.action',</span></span><br><span class="line"><span class="string">   mode:'remote'"</span> /&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>模糊查询分区 Action</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *查询所有区域，写回 json 数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listajax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Region&gt; list =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(q)) &#123;</span><br><span class="line">        list = regionService.findListByQ(q);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        list = regionService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.java2Json(list,<span class="keyword">new</span> String[]&#123;<span class="string">"province"</span>,<span class="string">"city"</span>,<span class="string">"district"</span>,<span class="string">"postcode"</span>,<span class="string">"shortcode"</span>,<span class="string">"citycode"</span>,<span class="string">"subareas"</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面 model = 'remote' 查询条件 q</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQ</span><span class="params">(String q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.q = q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模糊查询 dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Region&gt; <span class="title">findListByQ</span><span class="params">(String q)</span> </span>&#123;</span><br><span class="line">    String hql = <span class="string">"FROM Region r WHERE r.shortcode LIKE ? OR r.citycode LIKE ? OR r.city LIKE ? OR r.province LIKE ? OR r.district LIKE ?"</span>;</span><br><span class="line">    List&lt;Region&gt; list = (List&lt;Region&gt;) <span class="keyword">this</span>.getHibernateTemplate().find(hql, <span class="string">"%"</span> + q + <span class="string">"%"</span>, <span class="string">"%"</span> + q + <span class="string">"%"</span>, <span class="string">"%"</span> + q + <span class="string">"%"</span>, <span class="string">"%"</span> + q + <span class="string">"%"</span>, <span class="string">"%"</span> + q + <span class="string">"%"</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="分区组合条件分页查询"><a href="#分区组合条件分页查询" class="headerlink" title="分区组合条件分页查询"></a>分区组合条件分页查询</h5><p>定义一个 json 转换方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个工具方法，用于将指定的表单 form 所有输入项转化为 json 数据</span></span><br><span class="line">    $.fn.serializeJson=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> serializeObj=&#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> array=<span class="keyword">this</span>.serializeArray();</span><br><span class="line">        $(array).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(serializeObj[<span class="keyword">this</span>.name])&#123;</span><br><span class="line">                <span class="keyword">if</span>($.isArray(serializeObj[<span class="keyword">this</span>.name]))&#123;</span><br><span class="line">                    serializeObj[<span class="keyword">this</span>.name].push(<span class="keyword">this</span>.value);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    serializeObj[<span class="keyword">this</span>.name]=[serializeObj[<span class="keyword">this</span>.name],<span class="keyword">this</span>.value];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                serializeObj[<span class="keyword">this</span>.name]=<span class="keyword">this</span>.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> serializeObj;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>方法的调用,为查询窗口的查询按钮绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//调用工具方法，将其转换成 json 格式</span></span><br><span class="line">        <span class="keyword">var</span> json = $(<span class="string">"#searchForm"</span>).serializeJson();</span><br><span class="line"> <span class="comment">//调用数据表格的 load 方法，重新提交一次 ajax 请求，并提交参数</span></span><br><span class="line">  $(<span class="string">"#grid"</span>).datagrid(<span class="string">"load"</span>,json);</span><br><span class="line">  <span class="built_in">console</span>.info(json);</span><br><span class="line">  <span class="comment">// 关闭查询窗口</span></span><br><span class="line">   $(<span class="string">"#searchWindow"</span>).window(<span class="string">"close"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>分区组合条件分页查询 Action</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pageQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DetachedCriteria dc = pageBean.getDetachedCriteria();</span><br><span class="line">        String addresskey = model.getAddresskey();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(addresskey))&#123;</span><br><span class="line">            <span class="comment">//        动态添加过滤条件</span></span><br><span class="line">            dc.add(Restrictions.like(<span class="string">"addresskey"</span>,<span class="string">"%"</span>+addresskey+<span class="string">"%"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Region region = model.getRegion();</span><br><span class="line">        <span class="keyword">if</span>(region !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String province = region.getProvince();</span><br><span class="line">            String city = region.getCity();</span><br><span class="line">            String district = region.getDistrict();</span><br><span class="line">            dc.createAlias(<span class="string">"region"</span>,<span class="string">"r"</span>);</span><br><span class="line">            <span class="comment">//根据 市、城、区 模糊查询</span></span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(province))&#123;</span><br><span class="line"><span class="comment">//                参数一：分区对象中关联区域的属性对象名称</span></span><br><span class="line"><span class="comment">//                参数二：任意的一个别称</span></span><br><span class="line"><span class="comment">//                dc.createAlias("region","r");</span></span><br><span class="line">                dc.add(Restrictions.like(<span class="string">"r.province"</span>,<span class="string">"%"</span>+province+<span class="string">"%"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(city))&#123;</span><br><span class="line">                dc.add(Restrictions.like(<span class="string">"r.city"</span>,<span class="string">"%"</span>+city+<span class="string">"%"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(district))&#123;</span><br><span class="line">                dc.add(Restrictions.like(<span class="string">"r.district"</span>,<span class="string">"%"</span>+district+<span class="string">"%"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        subareaService.pageQuery(pageBean);</span><br><span class="line">        <span class="keyword">this</span>.java2Json(pageBean,<span class="keyword">new</span> String[]&#123;<span class="string">"currentPage"</span>,<span class="string">"detachedCriteria"</span>,<span class="string">"pageSize"</span>,<span class="string">"decidedzone"</span>,<span class="string">"subareas"</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>dao 需要增加语句</p><p>//指定 hibernate 封装对象的方式<br><code>detachedCriteria.setResultTransformer(DetachedCriteria.ROOT_ENTITY);</code></p><p>为了使查询两个表的结果封装到一个 Subarea 下带另一个表结构</p><p>Subarea[</p><p>{key:value},</p><p>{key:value}…</p><p>[{key:value},{key:value}]</p><p>]</p><p><img src="D:\hexo\source\_posts\bos\分区组合条件查询结构.png" alt="1550663597060"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用查询分页方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(PageBean pageBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentPage = pageBean.getCurrentPage();</span><br><span class="line">        <span class="keyword">int</span> pageSize = pageBean.getPageSize();</span><br><span class="line">        DetachedCriteria detachedCriteria = pageBean.getDetachedCriteria();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询 pageBean 的 total （总记录数）</span></span><br><span class="line"><span class="comment">//        指定 hibernate 发出 sql 语句的形式，rowCount 会发出 count(*) 的 sql</span></span><br><span class="line">        detachedCriteria.setProjection(Projections.rowCount());</span><br><span class="line">        List&lt;Long&gt; countList = (List&lt;Long&gt;) <span class="keyword">this</span>.getHibernateTemplate().findByCriteria(detachedCriteria);</span><br><span class="line"><span class="comment">//        获得 list 集合的第一个数据，因为只有一个数据所以就是 记录数</span></span><br><span class="line">        Long count = countList.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//        将总条数放入 pageBean</span></span><br><span class="line">        pageBean.setTotal(count.intValue());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询 rows（当前页需要展示的数据集合）</span></span><br><span class="line"><span class="comment">//        将 hibernate 发出 sql 语句的形式改回来，select * from xxx 的形式</span></span><br><span class="line">        detachedCriteria.setProjection(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//指定 hibernate 封装对象的方式</span></span><br><span class="line">        detachedCriteria.setResultTransformer(DetachedCriteria.ROOT_ENTITY);</span><br><span class="line">        <span class="keyword">int</span> firstResult = (currentPage-<span class="number">1</span>)*pageSize;</span><br><span class="line">        <span class="keyword">int</span> maxResults = pageSize;</span><br><span class="line">        List rows = <span class="keyword">this</span>.getHibernateTemplate().findByCriteria(detachedCriteria, firstResult, maxResults);</span><br><span class="line">        pageBean.setRows(rows);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-idea-的-maven-项目部署后，无法显示-css-等样式"><a href="#Q-idea-的-maven-项目部署后，无法显示-css-等样式" class="headerlink" title="Q:idea 的 maven 项目部署后，无法显示 css 等样式"></a>Q:idea 的 maven 项目部署后，无法显示 css 等样式</h5><p>谷歌浏览器报错：easyui.css:1 Failed to load resource: the server responded with a status of 404 (Not Found）</p><p>提示各种 css 未找到</p><p>A:idea 应该会默认忽视 jsp 页面的 el 表达式，所以以下这种 绝对路径方式会失效</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/js/easyui/themes/default/easyui.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>需要在</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br></pre></td></tr></table></figure><p>添加最后的 isELIgnored=”false” ，来使得不忽视 el 表达式</p><hr><h5 id="Q-点击-ztree-callback-中的-onClick-方法无反应"><a href="#Q-点击-ztree-callback-中的-onClick-方法无反应" class="headerlink" title="Q:点击 ztree callback 中的 onClick 方法无反应"></a>Q:点击 ztree callback 中的 onClick 方法无反应</h5><p>A:callback 应该是跟 date 同级的属性，如果将其放在 date 属性中则无效</p><hr><p>Q:idea 多模块 maven 项目给模块添加 hibernate 时出现报错</p><p>Module must not contain source root. The root already belongs to module</p><p><a href="https://www.jianshu.com/p/ed2733a59ad7" target="_blank" rel="noopener">idea 多模块项目报错</a></p><p>A:在 project Structure 中选择 module - Sources 选择父模块，将右侧的红色 content root 路径删除（一般是父模块拥有了 src、resources 等路径）</p><hr><h5 id="Q-hibernate-错误，网页报错-500"><a href="#Q-hibernate-错误，网页报错-500" class="headerlink" title="Q: hibernate 错误，网页报错 500"></a>Q: hibernate 错误，网页报错 500</h5><p>HTTP Status 500 - User is not mapped [FROM User u WHERE u.username=? AND u.password=?]; nested exception is org.hibernate.hql.internal.ast.QuerySyntaxException: User is not mapped [FROM User u WHERE u.username=? AND u.password=?]</p><p>nested exception is org.hibernate.hql.internal.ast.QuerySyntaxException: User is not mapped</p><p>A:配置 application.xml 中 hibernate 的映射文件注入错误</p><p>将如下配置的 / 写成了 . （com.itheima.bos.domain.*.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/itheima/bos/domain/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhangliang88/p/5476340.html" target="_blank" rel="noopener">ssh 整合报错</a></p><hr><p>Q:hibernate 报错</p><p> Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener<br>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘sessionFactory’ defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: Errors in named queries: user.editPassword</p><p>A: hbm.xml 中的 query 语句错误，语句最后加了一个 ；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"user.editPassword"</span>&gt;</span></span><br><span class="line">    UPDATE User SET password = ? WHERE id = ?</span><br><span class="line"><span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q-sturts2-model-提交乱码问题"><a href="#Q-sturts2-model-提交乱码问题" class="headerlink" title="Q:sturts2 model 提交乱码问题"></a>Q:sturts2 model 提交乱码问题</h5><p>A:form 表单的 method 没有写 post 方法，导致 get 提交了</p><hr><h5 id="Q-500-错误"><a href="#Q-500-错误" class="headerlink" title="Q: 500 错误"></a>Q: 500 错误</h5><p>HTTP Status 500 - not-null property references a null or transient value : com.itheima.bos.domain.Staff.haspda; nested exception is org.hibernate.PropertyValueException: not-null property references a null or transient value : com.itheima.bos.domain.Staff.haspda</p><p>A:</p><p>hibernate 映射文件中（hbm.xml）的字段属性生成时为 not null=“true”，将其改为 false</p><hr><h5 id="Q-java-lang-NoSuchMethodException"><a href="#Q-java-lang-NoSuchMethodException" class="headerlink" title="Q:java.lang.NoSuchMethodException"></a>Q:java.lang.NoSuchMethodException</h5><p>java.lang.NoSuchMethodException: com.itheima.bos.web.action.StaffAction.deleteBatch()</p><p>A: 修改了 hbm.xml 文件，没有重启，修改 xml 后无法热部署，而且修改了 hbm.xml 中的 hql 语句错误</p><hr><h5 id="Q-hibernate-报错"><a href="#Q-hibernate-报错" class="headerlink" title="Q:hibernate 报错"></a>Q:hibernate 报错</h5><p>严重: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener<br>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘sessionFactory’ defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: Errors in named queries: staff.delete<br>Caused by: org.hibernate.HibernateException: Errors in named queries: staff.delete<br>    at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:493)<br>    at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:444)<br>    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:708)<br>    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)<br>    at org.springframework.orm.hibernate5.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:416)<br>    at org.springframework.orm.hibernate5.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:401)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)<br>    … 22 more</init></p><p>A:HQL 语句 “1” 用了双引号会报错，改为单引号 ‘1’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;query name=&quot;staff.delete&quot;&gt;</span><br><span class="line">    UPDATE Staff SET deltag=&quot;1&quot; WHERE id=?</span><br><span class="line">&lt;/query&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="Q-前台传递了参数但是无法修改数据库"><a href="#Q-前台传递了参数但是无法修改数据库" class="headerlink" title="Q:前台传递了参数但是无法修改数据库"></a>Q:前台传递了参数但是无法修改数据库</h5><p>A:struts2 属性驱动没有加 get ，set 方法，导致取到 id 为空</p><hr><h5 id="Q-InstantiationException-无法实例化-bean"><a href="#Q-InstantiationException-无法实例化-bean" class="headerlink" title="Q:InstantiationException 无法实例化 bean"></a>Q:InstantiationException 无法实例化 bean</h5><p>java.lang.InstantiationException: com.itheima.bos.domain.Region<br>    at java.lang.Class.newInstance(Class.java:427)<br>    at com.itheima.bos.web.action.base.BaseAction.<init>(BaseAction.java:32)<br>    at com.itheima.bos.web.action.RegionAction.<init>(RegionAction.java:23)<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</init></init></p><p>​    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br>​    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>​    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)<br>​    at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147)</p><p>A:无法实例化 InstantiationException 错误，用反射类实例化某个对象时，如果内部只有有参构造函数那么会无法实例化（没有有参构造函数时会有默认隐藏的无参构造方法），那么只要手动添加一个无参构造方法就行了</p><p><a href="https://hellsing42.iteye.com/blog/137202" target="_blank" rel="noopener">关于InstantiationException错误的原因</a></p><hr><h5 id="Q-从-excel-表保存取派员数组方法执行，没有报错，但是也没有写进数据库"><a href="#Q-从-excel-表保存取派员数组方法执行，没有报错，但是也没有写进数据库" class="headerlink" title="Q: 从 excel 表保存取派员数组方法执行，没有报错，但是也没有写进数据库"></a>Q: 从 excel 表保存取派员数组方法执行，没有报错，但是也没有写进数据库</h5><p>堆栈跟踪 发现如下问题：</p><p>InvocationTargetException</p><p>InvocationTargetException是因为反射调用的方法和构造器中出现的异常导致，</p><p>继续跟踪发现：</p><p>turn off your session into flushMode.commit auto or remove ‘readOnly’ marker for transcation defintion</p><p>发现应该是事务提交设置了 readOnly 或者 自动提交，于是查看自己的 serviceImpl 发现注释上只写了 @Service 没有 @Transcational，忘记写事务注释了… 因为是 List\&lt;Region> 多个 Region 的保存操作，需要添加事务。</p><hr><h5 id="Q-sturts2-服务端-action-返回-NONE，页面为空白无法显示-json-回显数据"><a href="#Q-sturts2-服务端-action-返回-NONE，页面为空白无法显示-json-回显数据" class="headerlink" title="Q: sturts2 服务端 action 返回 NONE，页面为空白无法显示 json 回显数据"></a>Q: sturts2 服务端 action 返回 NONE，页面为空白无法显示 json 回显数据</h5><p>A: 页面响应 HTTP Status 404 - result ‘null’ not found    The requested resource is not available.</p><p>堆栈跟踪发现 return NONE 抛出 IOException， 但是另一个相同的 action return NONE 确可以正确返回 json 数组。</p><p>因为在 struts.xml 中配置了 \&lt;result name=”none”/> 导致拦截器拦截，然后重定向到一个不存在的页面，导致异常。</p><p>return NONE 代表 Action 正确执行，但并不返回任何视图。然后 struts.xml 的 result 的默认配置是 dispatcher，调用 RequestDispatcher，转发页面</p><p><a href="https://blog.csdn.net/tian330726/article/details/50678614" target="_blank" rel="noopener">result 的 name 和 type 属性</a></p><h5 id="Q-json-转换错误（对象互相引用错误）"><a href="#Q-json-转换错误（对象互相引用错误）" class="headerlink" title="Q: json 转换错误（对象互相引用错误）"></a>Q: json 转换错误（对象互相引用错误）</h5><p>DEBUG DefaultDispatcherErrorHandler:84 - Exception occurred during processing request: There is a cycle in the hierarchy!<br>net.sf.json.JSONException: There is a cycle in the hierarchy!<br>    at net.sf.json.util.CycleDetectionStrategy$StrictCycleDetectionStrategy.handleRepeatedReferenceAsObject(CycleDetectionStrategy.java:97)</p><p>A: 一个对象 A 中引用了另一个的集合对象 B，B 中又含有对 A 的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.java2Json(pageBean,<span class="keyword">new</span> String[]&#123;<span class="string">"currentPage"</span>,<span class="string">"detachedCriteria"</span>,<span class="string">"pageSize"</span>&#125;);</span><br></pre></td></tr></table></figure><p>json 转换时忽略其循环引用的字段</p><p>如果循环嵌套的字段是需要在需要展示的字段，那么就需要将该对象的 hbm.xml 中的展示字段属性,懒加载关闭 lazy = ‘false’</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;主流软件系统管理：&quot;&gt;&lt;a href=&quot;#主流软件系统管理：&quot; class=&quot;headerlink&quot; title=&quot;主流软件系统管理：&quot;&gt;&lt;/a&gt;主流软件系统管理：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;OA 系统（Office automation）办公自动化，将现代化办公和计算机网络结合的新型办公方式&lt;/li&gt;
&lt;li&gt;CRM 系统（Customer Relationship Management）客户关系管理，企业用 CRM 技术来管理与客户间的关系&lt;/li&gt;
&lt;li&gt;ERP 系统（Enterprise Resource Planning）企业资源计划，针对物资管理（物流）、人力资源管理（人流）、财务资源管理（财流）、信息资源管理（信息流）集成一体的企业管理软件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>ssh_crm</title>
    <link href="http://yoursite.com/2019/01/30/ssh-crm/"/>
    <id>http://yoursite.com/2019/01/30/ssh-crm/</id>
    <published>2019-01-30T01:33:37.000Z</published>
    <updated>2019-02-14T10:12:19.241Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用-SSH-搭建-crm-项目"><a href="#使用-SSH-搭建-crm-项目" class="headerlink" title="使用 SSH 搭建 crm 项目"></a>使用 SSH 搭建 crm 项目</h4><h5 id="数据库内部"><a href="#数据库内部" class="headerlink" title="数据库内部"></a>数据库内部</h5><p>数据库内部分为库和服务两部分，库负责存储硬盘上的文件（表的存储方式），服务用来操作库。</p><p>JDBC （客户端）连接数据库就是连接服务部分，客户端用 sql 语句告诉服务该做什么，服务负责在库中读写数据（用 Input/OutPut）。服务从库中获得数据，将其转换成结果集（ResultSet）返回给客户端。</p><p>计算总页数：</p><p>临界值法：</p><p>totalPage（总页数）</p><p>totalCount（总条数）</p><p>pageSize（每页显示条数）</p><p>totalPage = （totalCount）+（pageSize-1））/pageSize</p><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--隐藏域用来获得表单中 currentPage 的值，传入服务器--%&gt;</span><br><span class="line">&lt;input type="hidden" name="currentPage" id="currentPageInput" value="&lt;s:property value="#pageBean.currentPage"/&gt;"/&gt;</span><br><span class="line">&lt;input type="hidden" name="pageSize" id="pageSizeInput" value="&lt;s:property value="#pageBean.pageSize"/&gt;"/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.web.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注入 property 的 name 值，是由 userAction 类中的 UserService 的 set 方法为准的（虽然 UserService 对象的名字一般与 set 方法一致，若出现不一致则按 set 方法命名 name 属性）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"dict_id"</span>  &gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- generator:主键生成策略(用 varchar 作为主键生成策略的7种里只有2种：uuid 与 assigned--手动指定) </span></span><br><span class="line"><span class="comment">   企业中数据字典表的维护，直接修改表维护，一般不会根据项去修改表，所以此时主键生成策略是用不到的--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="struts2-文件上传"><a href="#struts2-文件上传" class="headerlink" title="struts2 文件上传"></a>struts2 文件上传</h5><p>前台：</p><p>&lt;%–文件上传要求：表单 Post 提交，提交类型 enctype=”multipart/form-data” 文件需要 input type=”file”–%&gt;</p><p>后台：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> File photo;<span class="comment">//上传的文件自动上传,需要在后台提供一个与前台 input 的 type=file name 相同的属性</span></span><br><span class="line"><span class="comment">//文件名,在提交键名后加后缀FileName，文件名会自动封装</span></span><br><span class="line"><span class="keyword">private</span> String photoFileName;</span><br><span class="line"><span class="comment">//文件 MIME 类型（text/html）（image/png）</span></span><br><span class="line"><span class="keyword">private</span> String photoContentType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//文件上传</span></span><br><span class="line">        photo.renameTo(<span class="keyword">new</span> File(<span class="string">"D:/upload/aa.jpg"</span>));</span><br><span class="line">        System.out.println(photoFileName);</span><br><span class="line">        System.out.println(photoContentType);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"toList"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>struts2 文件上传原理：</p><p>拦截器 FileUploadInterceptor 中判断是否多段请求，是就处理，提取 photo，photoFileName，photoContentType 的信息，封装到对应 Map 的键值对中，然后放行。参数的赋值交给后续拦截器 param 拦截器。</p><hr><h5 id="添加联系人列表"><a href="#添加联系人列表" class="headerlink" title="添加联系人列表"></a>添加联系人列表</h5><p>点击按钮打开新窗口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">''</span>,<span class="string">''</span>,<span class="string">'width=200,height=100'</span>)</span><br></pre></td></tr></table></figure><p>第一个参数 url ，选填，打开新窗口路径</p><p>第二个参数 name ，选填，打开的新窗口名称</p><p>URL=<code>&#39;${pageContext.request.contextPath}/CustomerAction_list?select=ture&#39;</code></p><p>在按钮提交中添加一个参数，让其在提交到 jsp 页面后可以判断是否显示 选择按钮（context 部分有一个 parameters 键值对，存放有提交的所有参数的 map，key:parameters,value:{select={Ljava.lang.String;@3926ec}}）</p><p>让翻页跟查询后都保留选择按钮，需要在进行这些操作时保留参数值，使用隐藏域将参数保留下来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"select"</span> <span class="attr">value</span>=<span class="string">"&lt;s:property value="</span>#<span class="attr">parameter.select</span>"/&gt;</span>"/&gt;</span><br></pre></td></tr></table></figure><p>点击 add.jsp 中选择客户按钮弹出的 list.jsp 中选择按钮将选择的 Customer 对象添加到 add.jsp 的 所属客户栏</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--id 用于后台查询 联系人 getById(),用 name 属性值自动传递参数到后台（struts2）。</span><br><span class="line">但是不需要让用户看到，设置隐藏域。id 便于前台获得 input，在打开选择窗口点击选择按钮后，获得客户选择的客户 id，赋值给 input 的 id--%&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> id=<span class="string">"cust_id"</span> name=<span class="string">"cust_id"</span> style=<span class="string">"WIDTH: 180px"</span>/&gt;</span><br><span class="line"> &lt;%--客户名称不传递到后台，只用于前台显示名称,不用设置 name 属性。</span><br><span class="line"> id 便于前台获得 input，在打开选择窗口点击选择按钮后，获得客户选择的客户 name，赋值给 input 的 name--%&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"cust_name"</span> style=<span class="string">"WIDTH: 180px"</span>/&gt;</span><br></pre></td></tr></table></figure><p>window.opener 用于获得打开该窗口的 父类的 window 对象，例如 A 窗口中点击 button 打开了 B 窗口，那么 B 窗口调用 window.opener 即可获得 A 窗口的 window 对象。用来对 A 窗口的各种 input 等 value 值进行赋值或其他操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectCustomer</span>(<span class="params">cust_id,cust_name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获得添加页面 window 对象</span></span><br><span class="line">  <span class="keyword">var</span> win = <span class="built_in">window</span>.opener;</span><br><span class="line">  <span class="comment">//获得添加页面的 doucument 对象</span></span><br><span class="line">  <span class="keyword">var</span> doc = win.document;</span><br><span class="line">  <span class="comment">//获得隐藏域和文本框</span></span><br><span class="line">  doc.getElementById(<span class="string">"cust_id"</span>).value=cust_id;</span><br><span class="line">  doc.getElementById(<span class="string">"cust_name"</span>).value=cust_name;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h5 id="让不同方法的异常跳转到不同的错误页面"><a href="#让不同方法的异常跳转到不同的错误页面" class="headerlink" title="让不同方法的异常跳转到不同的错误页面"></a>让不同方法的异常跳转到不同的错误页面</h5><ol><li><p>使用自定义异常，继承 RunTimeException，在 struts.xml 中配置各种自定义异常（需要定义异常类过多，较繁琐）</p></li><li><p>使用 try catch 包裹可能抛出异常代码，进行异常的收集与页面重定向到错误页面</p></li></ol><p>service 的实现类中，对查询返回了 Customer 对象的用户名进行异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果返回了对象抛出异常</span></span><br><span class="line"><span class="keyword">if</span>(existU!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"该用户名已存在"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action 中进行try catch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            userService.saveUser(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="comment">//            将错误信息放到 request 域，传递给错误页面</span></span><br><span class="line">            ActionContext.getContext().put(<span class="string">"error"</span>,e.getMessage());</span><br><span class="line"><span class="comment">//            返回到注册页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>struts.xml 的 Action 中 result 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span> &gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp 页面进行异常信息的输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TD style="HEIGHT: 18px" colspan="2" &gt;&lt;font color="red" &gt;&lt;s:property value="#error" /&gt; &lt;/font&gt;&lt;/TD&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="添加登录拦截器"><a href="#添加登录拦截器" class="headerlink" title="添加登录拦截器"></a>添加登录拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionContext;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionInvocation;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.interceptor.MethodFilterInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//不校验登录注册方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation actionInvocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        获得 session</span></span><br><span class="line">        Map&lt;String, Object&gt; session = ActionContext.getContext().getSession();</span><br><span class="line"><span class="comment">//        获得登录标示</span></span><br><span class="line">        User user = (User) session.get(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">//        判断标记是否存在，存在就放行，不存在就重定向到登录页面</span></span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> actionInvocation.invoke();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"toLogin"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果没有登录则跳转到登录页面，因为在 CustomerAction 与 LinkManAction 中都要使用，所以配置全局 result--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"toLogin"</span> &gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>回显就是将本身 input 的 name 属性值赋给 value</p><p>隐藏域 id 回显</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type="hidden" id="cust_id" name="customer.cust_id" style="WIDTH: 180px" value="&lt;s:property value="#linkMan.customer.cust_id"/&gt;"/&gt;</span><br></pre></td></tr></table></figure><p>客户名称回显：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type="text" id="cust_name" style="WIDTH: 180px" value="&lt;s:property value="#linkMan.customer.cust_name"/&gt;"/&gt;</span><br></pre></td></tr></table></figure><p>性别回显判断（判断性别的值 1 与 2 要加引号）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"radio"</span> value=<span class="string">"1"</span> name=<span class="string">"lkm_gender"</span> &lt;s:property value=<span class="string">"#linkMan.lkm_gender=='1'?'checked':''"</span>/&gt;&gt;男</span><br></pre></td></tr></table></figure><hr><h5 id="原生-sql-查询"><a href="#原生-sql-查询" class="headerlink" title="原生 sql 查询"></a>原生 sql 查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Object[]&gt; getIndustryCount() &#123;</span><br><span class="line"><span class="comment">//        原生 sql 查询</span></span><br><span class="line">        List&lt;Object[]&gt; list = getHibernateTemplate().execute(<span class="keyword">new</span> HibernateCallback&lt;List&gt;() &#123;</span><br><span class="line">            String sql=<span class="string">" select dict_item_name,count(*) total "</span> +</span><br><span class="line">                    <span class="string">" from cst_customer c,base_dict bd where "</span> +</span><br><span class="line">                    <span class="string">" c.cust_industry=bd.dict_id "</span> +</span><br><span class="line">                    <span class="string">" group by "</span> +</span><br><span class="line">                    <span class="string">" c.cust_industry "</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List <span class="title">doInHibernate</span><span class="params">(Session session)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">                SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">                <span class="keyword">return</span> query.list();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h5 id="Spring-注解"><a href="#Spring-注解" class="headerlink" title="Spring 注解"></a>Spring 注解</h5><p>spring 配置文件 application.xml 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--读取配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将 dataSource 放入 spring 容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--核心事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描类中的注解   component-组件，scan-扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将连接池注入到 sessionFactory,hibernate 会通过连接池获得连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载配置方案2：在 spring 配置中放置 hibernate 配置信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置 hibernate 基本信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--可选配置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入元数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingDirectoryLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:cn/itcast/domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dao 注入，需要在每个 dao 的实现类中，用 @Repository(“baseDao”) 将该 dao 托管到 spring。用 @Resource(name=”sessionFactory”) ，在一个 set 上用 父类的 setSessionFactory 将 sessionFactory 注入到每个 dao 实现类中，以便能使用 getHibernateTemplate() 提供的方法完成基本的增删改查功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"baseDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class clazz;<span class="comment">//用于接受运行期泛型类型</span></span><br><span class="line"><span class="comment">//    注入 sessionFactory</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSF</span><span class="params">(SessionFactory sf)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setSessionFactory(sf);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>service 注入</p><p>在每个 service 实现类上注释 @Service ，将该 Service 交给 spring 管理。@Transactional 用来开启事务，具体方式与 xml 配置一样。@Resource(name=”baseDictDao”) 用来在 调用的 dao 定义上注释，来表示从 spring 获得被托管的 dao（spring 帮助创建该 dao 的实例对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"baseDictService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(isolation= Isolation.REPEATABLE_READ,propagation = Propagation.REQUIRED,readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDictServiceImpl</span> <span class="keyword">implements</span> <span class="title">BaseDictService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"baseDictDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> BaseDictDao baseDictDao;</span><br></pre></td></tr></table></figure><p>action 注入</p><p>在每个 action 上注释 @Controller(“baseDictAction”)，将该 action 交给 spring 管理，@Scope(“prototype”) 表示多例方法，struts 必须是多例创建才行，因为每个 访问都要创建一个 ActionContext，不是多例会出现问题。</p><p>用 @Resource(name=”baseDictService”)，表示从 spring 获得托管在 spring 上的 Service ，让其帮助创建对应的 Service 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"baseDictAction"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDictAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dict_type_code;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"baseDictService"</span>)</span><br><span class="line">    <span class="keyword">private</span> BaseDictService baseDictService;</span><br></pre></td></tr></table></figure><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="A-HTML-为红色报错：Element-HTML-must-be-declared"><a href="#A-HTML-为红色报错：Element-HTML-must-be-declared" class="headerlink" title="A: HTML 为红色报错：Element HTML must be declared"></a>A: HTML 为红色报错：Element HTML must be declared</h5><p>dtd是定义html标记的规则的，不兼容这一个dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd"&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HTML</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将第一个 DOCTYPE 注释掉，或换成第二个</p><hr><h5 id="A-applicationContext-xml-配置错误，"><a href="#A-applicationContext-xml-配置错误，" class="headerlink" title="A: applicationContext.xml  配置错误，"></a>A: applicationContext.xml  配置错误，</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在视图 jsp 中 session 还是打开的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--OpenSessionInViewFilter 下红色波浪线--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Error:(24, 23) ‘org.springframework.orm.hibernate5.support.OpenSessionInViewFilter’ is not assignable to ‘javax.servlet.Filter’</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--struts2 核心过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--StrutsPrepareAndExecuteFilter 下红色波浪线--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Error:(34, 23) ‘org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter’ is not assignable to ‘javax.servlet.Filter’</p><p>A: 没有导入 servlet 包，在 module 中选中项目点击右侧绿色 + 号， libraries 选择 tomcat 的 lib 添加即可。</p><p>如果 OpenSessionInViewFilter、StrutsPrepareAndExecuteFilter 等类的文字是红色，则需要导入 lib 目录下 jar 包</p><hr><h5 id="Q-从-svn-下载的项目导入路径全为红色，但运行没问题"><a href="#Q-从-svn-下载的项目导入路径全为红色，但运行没问题" class="headerlink" title="Q: 从 svn 下载的项目导入路径全为红色，但运行没问题"></a>Q: 从 svn 下载的项目导入路径全为红色，但运行没问题</h5><p>xml <code>&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</code></p><p><code>&lt;hibernate-mapping package=&quot;cn.itcast.domain&quot; &gt;</code></p><p>等配置路径都为红色。</p><p>A: 在 module 将当前项目 src 目录标记为 Sources 即可解决问题，亦或是多模块项目则将该模块添加到 project 中，在 module 中导入下载 模块的的 iml 文件</p><p><a href="https://blog.csdn.net/u013041642/article/details/72835242" target="_blank" rel="noopener">多模块错误</a></p><hr><h5 id="Q-jsp-action-页面报错-Module-“”-must-not-contain-source-root-The-root-already-belongs-to-module-“-”"><a href="#Q-jsp-action-页面报错-Module-“”-must-not-contain-source-root-The-root-already-belongs-to-module-“-”" class="headerlink" title="Q: jsp action 页面报错 Module “” must not contain source root . The root already belongs to module “*”."></a>Q: jsp action 页面报错 Module “<em>” must not contain source root </em>. The root already belongs to module “*”.</h5><p><a href="https://blog.csdn.net/u013041642/article/details/72835242" target="_blank" rel="noopener">多模块错误</a></p><p>A:A: 在 module 将当前项目 src 目录标记为 Sources 即可解决问题，亦或是多模块项目则将该模块添加到 project 中，在 module 中导入下载 模块的的 iml 文件</p><hr><h5 id="Q-No-result-defined-for-action-cn-itcast-web-action-CustomerAction-and-result-error"><a href="#Q-No-result-defined-for-action-cn-itcast-web-action-CustomerAction-and-result-error" class="headerlink" title="Q:No result defined for action cn.itcast.web.action.CustomerAction and result error"></a>Q:No result defined for action cn.itcast.web.action.CustomerAction and result error</h5><p>Hibernate:<br>    select<br>        count(*) as y0_<br>    from<br>        cst_customer this_</p><p>A:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//计算总页数(加上临界值)</span><br><span class="line">this.totalPage = (this.totalCount + pageSize - 1) / this.pageSize;</span><br></pre></td></tr></table></figure><p>此处的 pageSize 没有加 this</p><p>导致 pageBean 构造函数错误</p><hr><p>Q:404 error</p><p>No result defined for action cn.itcast.web.action.CustomerAction and result error</p><p>A: action 中配置的 result 应与 action  中 返回的值一致 return “edit”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"CustomerAction_*"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"edit"</span>  &gt;</span>/jsp/customer/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q：数据字典下拉列表-整个列表-不显示，"><a href="#Q：数据字典下拉列表-整个列表-不显示，" class="headerlink" title="Q：数据字典下拉列表(整个列表)不显示，"></a>Q：数据字典下拉列表(整个列表)不显示，</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loadSelect(<span class="string">"009"</span>,<span class="string">"source"</span>,<span class="string">"cust_source.dict_id"</span></span><br><span class="line">           &lt;s:<span class="keyword">if</span> test=<span class="string">"#customer.cust_source!=null"</span>&gt;,</span><br><span class="line">           &lt;s:property value=<span class="string">'#customer.cust_source.dict_id'</span>/&gt;</span><br><span class="line">           &lt;<span class="regexp">/s:if&gt;);</span></span><br></pre></td></tr></table></figure><p>A:在 \&lt;s:if> 前多加了一个 ,</p><hr><h5 id="Q：数据字典下拉列表没有回显"><a href="#Q：数据字典下拉列表没有回显" class="headerlink" title="Q：数据字典下拉列表没有回显"></a>Q：数据字典下拉列表没有回显</h5><p>A：录入时 typeCode 与 调用 loadSelect 函数时查询所得 customer 传入的 typeCode 不一致，重新录入正确的 Customer 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadSelect</span>(<span class="params">typeCode,positionId,selectName,selectedId</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建 select 对象，指定其 name 属性</span></span><br><span class="line">    <span class="keyword">var</span> $select = $(<span class="string">"&lt;select name="</span>+selectName+<span class="string">"&gt;&lt;/select&gt;"</span>);</span><br><span class="line">    <span class="comment">//提示选项，请选择</span></span><br><span class="line">    $select.append($(<span class="string">"&lt;option value=''&gt;---请选择---&lt;/option&gt;"</span>));</span><br><span class="line">    <span class="comment">//使用 jquery 的 ajax 访问后台 action</span></span><br><span class="line">    $.get(<span class="string">"$&#123;pageContext.request.contextPath&#125;/BaseDictAction"</span>, &#123; <span class="attr">dict_type_code</span>:typeCode &#125;,</span><br><span class="line">        <span class="comment">//返回 json 数组对象，对其遍历。遍历中创建的 option 对象，判断是否回显，添加到 select 中</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// alert(data);</span></span><br><span class="line">            $.each( data, <span class="function"><span class="keyword">function</span>(<span class="params">i, json</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> $option = $(<span class="string">"&lt;option value='"</span>+json[<span class="string">'dict_id'</span>]+<span class="string">"'&gt;"</span>+json[<span class="string">'dict_item_name'</span>]+<span class="string">"&lt;/option&gt;"</span>);</span><br><span class="line">                <span class="keyword">if</span>(json[<span class="string">'dict_id'</span>]==selectedId)&#123;</span><br><span class="line">                    <span class="comment">// 判断是否要回显</span></span><br><span class="line">                    $option.attr(<span class="string">"selected"</span>,<span class="string">"selected"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                $select.append($option);</span><br><span class="line">                <span class="comment">// alert(json["dict_item_name"] );</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        type=<span class="string">"json"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//将组装好的 select 放到页面指定位置</span></span><br><span class="line">    $(<span class="string">"#"</span>+positionId).append($select);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="Q-No-result-defined-for-action-cn-itcast-web-action-LinkManAction-and-result-error"><a href="#Q-No-result-defined-for-action-cn-itcast-web-action-LinkManAction-and-result-error" class="headerlink" title="Q:No result defined for action cn.itcast.web.action.LinkManAction and result error"></a>Q:No result defined for action cn.itcast.web.action.LinkManAction and result error</h5><p>A:</p><p>打断点发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageBean pb = lms.getPageBean(dc,currentPage,pageSize);</span><br></pre></td></tr></table></figure><p>中的 lms 值为 cust_name like %…% 的查询语句,应该是之前的修改没有生效,重启 intellj idea 即可解决</p><h5 id="为什么会发生-error-result-这种错误"><a href="#为什么会发生-error-result-这种错误" class="headerlink" title="为什么会发生 error  result 这种错误:"></a>为什么会发生 error  result 这种错误:</h5><p>在 sturts.xml 中配置了如下出现异常就跳转错误页面的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启运行时异常--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-exception-mappings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-mapping</span> <span class="attr">exception</span>=<span class="string">"java.lang.RuntimeException"</span> <span class="attr">result</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">exception-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-exception-mappings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在 LinkManAction 下配置如下 result</p><p>在跳转页面 list.jsp 中添加 \&lt;s:debug>\&lt;s:debug></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;result name=&quot;error&quot; &gt;/jsp/linkman/list.jsp&lt;/result&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="Q-进行双条件框条件查询无结果"><a href="#Q-进行双条件框条件查询无结果" class="headerlink" title="Q:进行双条件框条件查询无结果"></a>Q:进行双条件框条件查询无结果</h5><p>A:</p><p>后台采用 id 查询,前台用选择框进行客户名称的选择,并自动填入 名称 与 id，如果进行手动输入名称，该页面会无法获得 customer.cust_id ，从而后台无法查询到该条件的对应结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((linkMan.getCustomer()!=<span class="keyword">null</span>))&#123;</span><br><span class="line">    dc.add(Restrictions.eq(<span class="string">"customer.cust_id"</span>,linkMan.getCustomer().getCust_id()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectCustomer</span>(<span class="params">cust_id,cust_name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获得添加页面 window 对象</span></span><br><span class="line">  <span class="keyword">var</span> win = <span class="built_in">window</span>.opener;</span><br><span class="line">  <span class="comment">//获得添加页面的 doucument 对象</span></span><br><span class="line">  <span class="keyword">var</span> doc = win.document;</span><br><span class="line">  <span class="comment">//获得隐藏域和文本框</span></span><br><span class="line">  doc.getElementById(<span class="string">"cust_id"</span>).value=cust_id;</span><br><span class="line">  doc.getElementById(<span class="string">"cust_name"</span>).value=cust_name;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h5 id="Q-拦截器登录页面跳转异常"><a href="#Q-拦截器登录页面跳转异常" class="headerlink" title="Q: 拦截器登录页面跳转异常"></a>Q: 拦截器登录页面跳转异常</h5><p>No result defined for action cn.itcast.web.action.LinkManAction and result toLogin</p><p>A:修改 ctruts.xml 的 Action result 为全局 result</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果没有登录则跳转到登录页面，因为在 CustomerAction 与 LinkManAction 中都要使用，所以配置全局 result--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"toLogin"</span> &gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q：500-异常-400-异常"><a href="#Q：500-异常-400-异常" class="headerlink" title="Q：500 异常 400 异常"></a>Q：500 异常 400 异常</h5><p>500问题：</p><p>​     Unable to instantiate Action, saleVisitAction, defined for ‘SaleVisitAction_add’ in namespace ‘/‘saleVisitAction</p><p>​    description The server encountered an unexpected condition that prevented it from fulfilling the request.</p><p>A: spring 配置文件 application.xml 中的 action name 与 struts2 配置文件 struts 中的 action class 不一致</p><p>400问题：</p><p>​    No result defined for action cn.itcast.web.action.SaleVisitAction and result error</p><p>A: struts 配置文件中 ，result 的 name 应该与 action 中 return 的值相同，表示返回的是什么页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"toList"</span>  <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>debug 显示 </p><p>ActionMapping{name=’SaleVisitAction_add’, namespace=’/‘, method=’null’, extension=’null’, params=null, result=null}</p><h5 id="Q-hibernate-错误提示"><a href="#Q-hibernate-错误提示" class="headerlink" title="Q:hibernate 错误提示"></a>Q:hibernate 错误提示</h5><p>Unable to evaluate the expression Method threw ‘org.hibernate.LazyInitializationException’ exception.</p><p>A: <del>多表的关系问题，经查询应该跟级联操作有关，删除数据库相关数据表，让其自动重新创建。</del></p><p>[http-nio-8080-exec-4] ERROR org.hibernate.internal.SessionImpl - HHH000346: Error during managed flush [object references an unsaved transient instance - save the transient instance before flushing: cn.itcast.domain.Customer]</p><p>A：级联操作问题：</p><p>在页面上写了子表ID的隐藏表单域，传到后面的时候value=”” ,不是value=null，所以执行的时候hibernate判断为更新，所以报错了</p><p>用来回显 visit_id 的 input 隐藏域，如果使用了 hibernate 的 saveOrUpdate 方法，则会自动根据 visit_id 是否为null 判断是添加还是升级操作，但是后台根据此隐藏域获得无 visit_id 时，是空字符串 “”，根据 hibernate 判断依旧为升级操作，所以会出现异常。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input  type="hidden"  name="visit_id" value="&lt;s:property value="#saleVisit.visit_id" /&gt;"  /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://blog.csdn.net/ailaojie/article/details/82689536" target="_blank" rel="noopener">https://blog.csdn.net/ailaojie/article/details/82689536</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;使用-SSH-搭建-crm-项目&quot;&gt;&lt;a href=&quot;#使用-SSH-搭建-crm-项目&quot; class=&quot;headerlink&quot; title=&quot;使用 SSH 搭建 crm 项目&quot;&gt;&lt;/a&gt;使用 SSH 搭建 crm 项目&lt;/h4&gt;&lt;h5 id=&quot;数据库内部&quot;&gt;&lt;a href=&quot;#数据库内部&quot; class=&quot;headerlink&quot; title=&quot;数据库内部&quot;&gt;&lt;/a&gt;数据库内部&lt;/h5&gt;&lt;p&gt;数据库内部分为库和服务两部分，库负责存储硬盘上的文件（表的存储方式），服务用来操作库。&lt;/p&gt;
&lt;p&gt;JDBC （客户端）连接数据库就是连接服务部分，客户端用 sql 语句告诉服务该做什么，服务负责在库中读写数据（用 Input/OutPut）。服务从库中获得数据，将其转换成结果集（ResultSet）返回给客户端。&lt;/p&gt;
&lt;p&gt;计算总页数：&lt;/p&gt;
&lt;p&gt;临界值法：&lt;/p&gt;
&lt;p&gt;totalPage（总页数）&lt;/p&gt;
&lt;p&gt;totalCount（总条数）&lt;/p&gt;
&lt;p&gt;pageSize（每页显示条数）&lt;/p&gt;
&lt;p&gt;totalPage = （totalCount）+（pageSize-1））/pageSize&lt;/p&gt;
    
    </summary>
    
      <category term="SSH" scheme="http://yoursite.com/categories/SSH/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>ssh</title>
    <link href="http://yoursite.com/2019/01/15/ssh/"/>
    <id>http://yoursite.com/2019/01/15/ssh/</id>
    <published>2019-01-15T02:40:21.000Z</published>
    <updated>2019-02-20T13:40:28.883Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hibernate"><a href="#hibernate" class="headerlink" title="hibernate"></a>hibernate</h4><p><a href="https://blog.csdn.net/fighting_sxw/article/details/80566295" target="_blank" rel="noopener">idea 下 hibernate 的创建</a></p><p><a href="https://www.linuxidc.com/Linux/2016-09/135624.htm" target="_blank" rel="noopener">idea 创建 bean.hbm.xml 与 hibernate.cfg.xml</a></p><p>在配置 javaBean.hbm.xml 时，column 如果不配，自动根据属性名 name 填写，如果表的 列名 与 代码的属性名 相同，则不需要配置 column</p><h5 id="hibernate-中对象的状态"><a href="#hibernate-中对象的状态" class="headerlink" title="hibernate 中对象的状态"></a>hibernate 中对象的状态</h5><ol><li>瞬时状态：没有 id，没有在 session 缓存中</li><li>持久化状态：有 id ，在 session 缓存中</li><li>游离/托管状态：有 id ，没有在 session  缓存中</li></ol><p>save 方法实质是将 瞬时状态的转变成持久化状态</p><p>执行 save 方法时，为了将对象转换成持久化状态必须生成 id 值，如果需要的话会执行 insert 语句来生成：主键自增的情况下</p><p>如果是 increament ：查询数据库 id 最大值作为主键的情况下会执行查询数据库 id 最大值的 sql 语句</p><p>持久化对象的特点：持久化对象的任何变化都会自动同步到数据库</p><p>save/update ：将瞬时/游离状态的对象转变为持久化状态（saveOrupdate 方法可以通用）</p><p>delete/close：将持久化状态的对象转变为 瞬时/游离状态</p><p>get 直接获得一个持久化状态的对象</p><p>hibernate 的作用：把希望持久化到数据库的数据，其对应的对象状态变为持久化</p><a id="more"></a><h5 id="hibernate-事务"><a href="#hibernate-事务" class="headerlink" title="hibernate 事务"></a>hibernate 事务</h5><p><code>sf.getCurrentSession();//获得当前与 Thread 绑定的 session（多次获得都是同一个 session）</code></p><p>需要配置 hibernate.cfg.xml 中的<code>&lt;property name=&quot;hibernate.connection.isolation&quot;&gt;4&lt;/property&gt;</code>才能使用</p><p>通过 getCurrentSession() 获得的 session 事务提交后，session 会自动关闭，不需要 close</p><p>HQL 语句只有对象名和属性名，没有数据库的任何表名和属性名</p><h5 id="hibernate-一级缓存-缓存快照"><a href="#hibernate-一级缓存-缓存快照" class="headerlink" title="hibernate 一级缓存+缓存快照"></a>hibernate 一级缓存+缓存快照</h5><p>作用：可以提高查询效率，可以减少不必要的修改语句的发送</p><p>程序–&gt;get 方式查询时–&gt;hibernate 先从缓存中查看是否有相同 id 的对象，如果有直接返回缓存中；如果没有，发送 sql 语句查询数据库–&gt;数据库返回一个 ResultSet–&gt;hibernate 将 resultSet 中的数据组装成两个对象，并存入 session 缓存中，另一个存入缓存快照–&gt;session 中的对象返回程序–&gt;</p><p>如果程序修改了对象进行事务提交–&gt;hibernate 会比对缓存中对象和快照，如果有变化会同步到数据库，如果没变化则不修改</p><p>所以在执行多条 相同 get 语句查询相同 id 对象时，只会执行一次查询数据库操作，其余的都在缓存中查找。</p><h5 id="inverse（反转）-属性："><a href="#inverse（反转）-属性：" class="headerlink" title="inverse（反转） 属性："></a>inverse（反转） 属性：</h5><p>inverse 属性为空时，默认 false 表示维护当前外键关系，true 表示放弃维护</p><p>一对多时，一的一方放弃维护</p><p>当遇到多对多关系时，必须有一方放弃维护关系，具体放弃方由业务决定</p><p>例：员工入职时需要指定职位，此时由员工维护，职位放弃维护</p><h5 id="cascade-（级联操作）属性："><a href="#cascade-（级联操作）属性：" class="headerlink" title="cascade （级联操作）属性："></a>cascade （级联操作）属性：</h5><p>save-update:级联保存更新</p><p>delete：级联删除</p><p>all：级联保存更新+删除</p><p>用来简化代码书写，一般只用 save-update，delete 在多对多表中容易多张表关联删除</p><h5 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h5><p>increment：代理主键，适合于所有数据库，由hibernate维护主键自增，和底层数据库无关，但是不适合于2个或以上hibernate进程。</p><p>identity：代理主键，适合于Mysql或ms sql server等支持自增的dbms，主键值不由hibernate维护。</p><p>sequence：代理主键，适合于oracle等支持序列的dbms，主键值不由hibernate维护，由序列产生。（Oracle中很常用）</p><p>native：代理主键，根据底层数据库的具体特性选择适合的主键生成策略，如果是mysql或sqlserver，选择identity，如果是oracle，选择sequence。（推荐）</p><p>hilo：代理主键，hibernate把特定表的字段作为hign值，生成主键值</p><p>uuid.hex：代理主键，hibernate采用uuid 128位算法生成基于字符串的主键值</p><p>assigned：适合于应用程序维护的自然主键。</p><p>用 varchar 作为主键生成策略的7种里只有2种：uuid 与 assigned–手动指定， 企业中数据字典表的维护，直接修改表维护，一般不会根据项去修改表，所以此时主键生成策略是用不到的。</p><p><a href="https://www.cnblogs.com/flyoung2008/articles/2165759.html" target="_blank" rel="noopener">Hibernate主键生成策略</a></p><p><a href="https://www.cnblogs.com/kakafra/archive/2012/09/16/2687569.html" target="_blank" rel="noopener">Hibernate各种主键生成策略与配置详解</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;id name=&quot;dict_id&quot;  &gt;</span><br><span class="line">   &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">&lt;/id&gt;</span><br></pre></td></tr></table></figure><h5 id="一对多，多对一"><a href="#一对多，多对一" class="headerlink" title="一对多，多对一"></a>一对多，多对一</h5><p>ORM</p><p>O:对象    一的一方使用集合，多的一方直接引用一的一方</p><p>R:关系型数据库    多的一方使用外键引用一的一方的主键</p><p>M:映射文件    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一：</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"外键"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">多：</span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">column</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在一张表的外键访问另一张表的主键时，外键字段的值是多个的，也就是多条记录，是多的一方。另一张表因为是主键，所以只有一个，是一的一方。</p><p>在配置时，如果多的一方需要通过数据字典访问一的一方，那么多的一方需要配置多对一关系。如果一的一方不需要通过数据字典反过来访问多的一方，则在数据字典实体中不需要配置一对多关系</p><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><p>ORM</p><p>O:对象    两方都使用集合</p><p>R:关系型数据库    使用中间表，至少两列，作为外键引用两张表的主键</p><p>M:映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">多：</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">table</span>=<span class="string">"中间表名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"外键,别人引用我的"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">column</span>=<span class="string">"我引用别人的"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Hibernate-Restrictions"><a href="#Hibernate-Restrictions" class="headerlink" title="Hibernate Restrictions"></a>Hibernate Restrictions</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Restrictions.eq</td><td>＝</td></tr><tr><td>Restrictions.allEq</td><td>利用Map来进行多个等于的限制</td></tr><tr><td>Restrictions.gt</td><td>＞</td></tr><tr><td>Restrictions.ge</td><td>＞＝</td></tr><tr><td>Restrictions.lt</td><td>＜</td></tr><tr><td>Restrictions.le</td><td>＜＝</td></tr><tr><td>Restrictions.between</td><td>BETWEEN</td></tr><tr><td>Restrictions.like</td><td>LIKE</td></tr><tr><td>Restrictions.in</td><td>in</td></tr><tr><td>Restrictions.and</td><td>and</td></tr><tr><td>Restrictions.or</td><td>or</td></tr><tr><td>Restrictions.sqlRestriction</td><td>用SQL限定查询</td></tr></tbody></table><p> 全称：</p><p><strong>QBC常用限定方法</strong></p><p>Restrictions.eq –&gt; equal,等于.</p><p>Restrictions.allEq –&gt; 参数为Map对象,使用key/value进行多个等于的比对,相当于多个Restrictions.eq的效果</p><p>Restrictions.gt –&gt; great-than &gt; 大于</p><p>Restrictions.ge –&gt; great-equal &gt;= 大于等于</p><p>Restrictions.lt –&gt; less-than, &lt; 小于</p><p>Restrictions.le –&gt; less-equal &lt;= 小于等于</p><p>Restrictions.between –&gt; 对应SQL的between子句</p><p>Restrictions.like –&gt; 对应SQL的LIKE子句</p><p>Restrictions.in –&gt; 对应SQL的in子句</p><p>Restrictions.and –&gt; and 关系</p><p>Restrictions.or –&gt; or 关系</p><p>Restrictions.isNull –&gt; 判断属性是否为空,为空则返回true</p><p>Restrictions.isNotNull –&gt; 与isNull相反</p><p>Restrictions.sqlRestriction –&gt; SQL限定的查询</p><p>Order.asc –&gt; 根据传入的字段进行升序排序</p><p>Order.desc –&gt; 根据传入的字段进行降序排序</p><p>MatchMode.EXACT –&gt; 字符串精确匹配.相当于”like ‘value’”</p><p>MatchMode.ANYWHERE –&gt; 字符串在中间匹配.相当于”like ‘%value%’”</p><p>MatchMode.START –&gt; 字符串在最前面的位置.相当于”like ‘value%’”</p><p>MatchMode.END –&gt; 字符串在最后面的位置.相当于”like ‘%value’”</p><p><a href="https://xuganggogo.iteye.com/blog/440078" target="_blank" rel="noopener">Restrictions 用法</a></p><h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h5><p>get 方法，立即加载，执行方法时执行 sql 语句查询结果</p><p>load 方法（默认）：在执行时，不发送任何 sql 语句，返回一个对象，使用该对象时才执行查询（懒加载/延迟加载：只是获得没有使用，使用时查询）。可以在 class 元素上配置 lazy 属性控制，默认 lazy=true 实行懒加载，改为 lazy=false 则不执行懒加载。</p><p>load 方法使用了代理 ，使 返回的代理对象能够在使用属性时，根据关联 session 查询数据库，加载数据</p><p>打印对象中 $ 符号，指代理对象，可以对方法进行改造或增强</p><p>关联级别查询</p><p>为了提高效率，fetch 选择 select ，lazy 取 true，全部为默认值</p><p>no-session-Exception:因为在代理对象被放到页面时，session 一定关闭了，所以需要扩大 session 作用域</p><hr><h4 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h4><p>用来代替 servlet 层进行处理访问服务器的请求的</p><h5 id="servlet-线程安全问题"><a href="#servlet-线程安全问题" class="headerlink" title="servlet 线程安全问题"></a>servlet 线程安全问题</h5><p><a href="https://blog.csdn.net/qq_24145735/article/details/52433096" target="_blank" rel="noopener">servlet 的线程不安全问题</a></p><p>servlet 只创建一个对象实例，所以只有一个成员变量（它随着对象的创建而创建），多个用户访问 servlet 只修改一个成员变量，可能会有覆盖问题，会导致线程安全问题</p><p>struts2 的 Action 在每次请求时都会创建一个新的 Action 实例对象，所以是线程安全的，可以定义成员变量接收参数</p><p>struts1 基于 servlet，servlet 有线程不安全问题</p><p>struts2 基于 filter 过滤器</p><p>struts2 的核心是拦截器（inteceptor）</p><p>拦截器封装了很多功能，且用了可插拔设计，使用了 aop 思想（将纵向重复代码，横向抽取），在调用 action 前先调用 inteceptor</p><p><a href="https://www.jianshu.com/p/d8ba3a768447" target="_blank" rel="noopener">struts2 Result 详解</a></p><hr><p>i18n:国际化：配置多国语言，根据浏览器发送的不同编码，读取不同语言版本的配置文件，动态将配置文件信息显示到页面。解决 post 提交乱码问题</p><p>reload 热加载</p><p>redeploy 热部署</p><p>动态配置方法调用：通配符方式</p><p>POJO：不用继承任何父类，也不需要实现任何接口的类</p><p><a href="https://blog.csdn.net/it_manman/article/details/79699455" target="_blank" rel="noopener">tomcat 没有 artifact 的配置</a></p><p><a href="https://www.cnblogs.com/deng-cc/p/6416332.html" target="_blank" rel="noopener">idea 项目配置简介</a></p><hr><h5 id="struts-的数据中心：ActionContext（它是一个-Map）"><a href="#struts-的数据中心：ActionContext（它是一个-Map）" class="headerlink" title="struts 的数据中心：ActionContext（它是一个 Map）"></a>struts 的数据中心：ActionContext（它是一个 Map）</h5><p>用来获得原生 ServletAPI</p><p>生命周期：每次请求都会创建一个对应的 ActionContext 对象，请求处理完，ActionContext 销毁。ActionContext 中只是获得 各个域 及对象（request,response,sevletContext 等）的引用，不会影响其生命周期。</p><p>request 域 与 session 域 application 域，实质就是在 HttpRequest/HttpSession/servletContext 的一块空间中创建了 Map，用 set/getAttribute 来存取值（param 参数存取也是一个 Map）</p><p>ActionContext 与 request 的生命周期相同，所以官方推荐使用 ActionContext 代替 requestScope</p><p>struts2 的 ActionContext  加强了 request 的方法，使其在取值时仍旧使用原有的方法。调用的就是 request.getAttribute() 方法， 先去 request 域中找，也去 ActionContext 的域中找。存值用 ActionContext ；</p><p>struts 结果集：转发、重定向、转发 Action、重定向 Action</p><h5 id="Struts-mvc"><a href="#Struts-mvc" class="headerlink" title="Struts mvc"></a>Struts mvc</h5><p>c:Filter</p><p>m:Action</p><p>v:Result</p><h5 id="获得参数的方式"><a href="#获得参数的方式" class="headerlink" title="获得参数的方式"></a>获得参数的方式</h5><p>有 struts2 的话，表单参数会自动封装到栈顶对象</p><ol><li>属性驱动 - Action 准备与参数建同名属性，创建参数的 set 方法</li><li>对象驱动 - Action 准备与参数建同名属性（页面属性名需要改为 Obj.property），将属性封装到对象中，模型对象驱动栈顶对象（ModelDriven\&lt;栈顶对象>）不能生成 get set 方法</li><li>模型驱动 - 实现 ModelDriven 接口 - 实现 getModel 方法，返回需要封装参数的对象（可以直接返回对象，页面属性名跟 servlet 一样，但返回多对象麻烦）</li><li>复杂参数封装 <ul><li>List 集合：提交键：list        list[index]</li><li>Map 集合： 提交键：map[‘key’]</li></ul></li></ol><p>为什么使用模型驱动：</p><p>当我们使用params拦截器完成数据自动封装的时候，如果要封装的是JavaBean对象，那么在web表单中就必须的name写上javaBean.属性名….</p><p>这样的话，web层和Action层就耦合了…因为在web层必须要知道封装的JavaBean对象是什么才能够实现自动封装！</p><p>而模型驱动就解决了这个问题！即时不知道Action层的JavaBean对象是什么，也能够完成数据自动封装！</p><p><a href="https://blog.csdn.net/maoyuanming0806/article/details/76704596" target="_blank" rel="noopener">struts2 模型驱动理解</a></p><p>实现方式：参数拦截器</p><p><code>&lt;interceptor name=&quot;params&quot;class=&quot;com.opensymphony.xwork2.interceptor.ParametersInterceptor&quot;/&gt;</code></p><p><a href="https://blog.csdn.net/hon_3y/article/details/70877090" target="_blank" rel="noopener">数据自动封装获得参数</a></p><p><a href="https://blog.csdn.net/csuliky/article/details/4226917" target="_blank" rel="noopener">struts2 获得参数</a></p><hr><h5 id="OGNL-与-Struts2"><a href="#OGNL-与-Struts2" class="headerlink" title="OGNL 与 Struts2"></a>OGNL 与 Struts2</h5><p>OGNL：Object-Graph Navigation Language 对象视图导航语言</p><p>OGNL 与 struts2 没关系，是一种独立的表达式语言</p><p>el 表达式 ${user.addr.name} 等表达式是 对象视图导航</p><p>OGNL 本质跟 el 表达式差不多，但添加了许多功能</p><p>OGNL 包含在 struts2 的包中，包名为：”ognl-var.jar”</p><p>el表达式的取值范围为 11 大内置对象</p><p>OGNL 的取值范围是 OGNLContext：OGNL上下文对象</p><p>OGNLContext 内部有两部分组成：root/context</p><p>root 中可以放置任何对象</p><p>context 中需要存放 map （键值对）</p><p>OGNL 可以调用静态方法（不需要对象）</p><p>OGNL 表达式要运行先要准备一个 OGNLContext，struts2 准备了一个 ValueStack（值栈） 作为 OGNLCOntext，</p><p>OGNLContext 由两部分构成，一部分叫 Root，放置的是一个栈，一部分叫 Context，将 AcitonContext （数据中心）放入</p><p>默认情况下 Root（栈）中放置当前访问的 Action 对象</p><p>ActionContext 下放的是：request、response、servletContext、requestScope、sessionScope、applicationScope、parameters、attrs…</p><p>list 集合制作栈结构容器</p><p>push ：压栈：list.add(0,obj);</p><p>list 的索引一定是连续的，如果 list 中添加了 0 索引的值，之后的索引会往后延续</p><p>pop：弹栈：list.remove(0);</p><p>list remove 方法会移除 0 索引的值，并返回该值，后续的索引会往前移</p><p>在栈中取属性时，从栈顶开始，找不到就往下找，直到找到停止。</p><p>struts2 中参数接受由 OGNL 引擎完成</p><p>属性驱动:从 Root 中拿到 name 属性值，并赋值为 tom — name = tom</p><p>对象驱动：从栈顶对象中获得 user 属性，再获得 user 属性的 name 属性，赋值为 tom – user.name = tom</p><p>模型驱动：从栈顶对象获得 name 属性，并赋值为 tom — name = tom</p><p>因为实现模型驱动需要在 赋值前，将接受的参数压入栈顶，不然无法赋值。</p><p>但是默认的 拦截器中，赋值的 param 拦截器运行比 action（压栈）早，所以需要自己去实现 Preparable 接口,实现 prepare 方法，把 action 的压栈代码放到 prepare 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得栈值</span><br><span class="line">ValueStack vs = ActionContext.getContext().getValueStack();</span><br><span class="line">//将 User u 压入栈顶</span><br><span class="line">vs.push(u);</span><br></pre></td></tr></table></figure><p>或者可以使用 ModelDriven<user> 接口，实现 public User getModel( return u){} 方法，将压栈方法放入其中，实现原理跟 prepare 一致。</user></p><hr><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><p>生命周期：随项目启动而创建，随项目关闭而销毁，类似 filter</p><p>idea 查看源码没有注释的原因及解决方法</p><p>idea 直接查看源码是 jar 包反编译 .class 文件得到的，注释不会存在于 .class 文件中， 若需要注释则需要导入 .java 的 jar 包，即 -sources.jar 后缀的文件 。</p><p><a href="https://blog.csdn.net/qq_40163099/article/details/81263804" target="_blank" rel="noopener">idea 查看 jar 包没有注释</a></p><p>拦截器放行则调用 invoke() 方法，如果不想放行直接返回一个页面则 return 一个字符串，赋值给 resultCode(源码中)，使其不再递归调用 invoke()</p><p>就不会调用后续拦截器及 action </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">window</span>.parent != <span class="built_in">window</span>)&#123;<span class="comment">//如果页面再框架中</span></span><br><span class="line">          <span class="comment">//让框架页面跳转到登陆页面</span></span><br><span class="line">          <span class="built_in">window</span>.parent.location.href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login.jsp"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>解决登录页跳转在框架中的方法 </p><hr><h5 id="Struts2-xml-配置"><a href="#Struts2-xml-配置" class="headerlink" title="Struts2 xml 配置"></a>Struts2 xml 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">    "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置常量 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 字符集 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 开发模式 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 主题 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.ui.theme"</span> <span class="attr">value</span>=<span class="string">"simple"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 扩展名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 通用package --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">&lt;!--如果struts2 没有被 spring 代理时，需要在 class 中填写完整类名，method 表示访问 action 中的某个方法，name 是一个返回的名称，与项目名路径拼接成一个访问路径。如果被 spring 代理则填写 spring 配置的 action 名即可--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findById"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.crm.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"findCustomerById"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/info.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>action 中 name 是访问时根据 项目名+name+.action 来拼接访问网址用的，class 是该类的完整类名（由 spring 管理 struts2 时，spring 的 application.xml 文件中会配置该 action，所以那时只需要填写 spring 中配置的 action 的 name 属性即可），method 表示该 action 中要访问哪个方法，result 表示访问该方法后，return 了 success 后的跳转页面</p><p>如果配置扩展名的 constant，则在网站访问时，必须是 actionName.action 等有后缀的方式，具体后缀名根据配置改变</p><hr><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><p>spring 管理项目中所有对象</p><p>Spring 框架是容器性质的，容器中有什么对象就有什么功能，是一站式框架</p><p><a href="https://www.cnblogs.com/shindo/p/7272646.html" target="_blank" rel="noopener">创建 idea web项目</a></p><p>创建 spring xml 配置文件：</p><p>先创建一个项目，然后配置好spring依赖，随后新建xml文件就可以看到Spring Config选项了，选择它，然后输入配置文件名（applicationContext），建好了spring的配置文件。</p><p>spring 导包：4个核心包，2个日志包，1个 web 整合包</p><h5 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h5><p>（Inversion of Control，缩写为IOC）</p><p>反转控制就是反转对象的创建方式，由我们自己创建反转成 spring（容器）创建</p><h5 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h5><p>（Dependency Injection，简称DI）</p><p>依赖注入就是实现 IOC 思想的方式</p><p>注入方式：</p><ol><li>set 方法注入</li><li>构造方法注入</li><li>字段注入</li></ol><p>注入类型：</p><ol><li>值注入：8 大数据类型都是值注入，可以将在一个 name 创建时给与值 “三爷”</li><li>引用类型注入：将依赖对象注入，将 dao 注入到 service 或将 service 注入到 action</li></ol><p>BeanFactory</p><p>spring 的原始接口，针对其接口的功能比较单一，BeanFactory 接口实现类的容器在获得对象时才会创建</p><p>AppicationContext</p><p>Spring 比较末端的接口，每次启动时创建容器中所有配置对象，并提供更多功能</p><p>从类路径加载配置文件:classPathXmlApplicationContext</p><p>web 开发用 AppicationContext，手机等资源匮乏的地方用 BeanFactory</p><hr><h5 id="spring-配置"><a href="#spring-配置" class="headerlink" title="spring 配置"></a>spring 配置</h5><p>Bean 元素</p><p>name 属性 与 id 属性都是用来给被管理对象起名，在获得对象时根据这个名字来获得。</p><p>name 属性是为了解决 id 属性不能使用特殊字符规则而创造出来的</p><p>class 属性用来获得 对象完整类名</p><p>scope 属性</p><ol><li>singleton（单例模式）：单例模式的对象在 Spring 容器中只会存在一个实例</li><li>prototyte（多例原型）：多例原型的对象每次在获得时才会创建，每次创建都是新的对象</li><li>request：web 环境下，对象与 request 生命周期一致（不用）</li><li>session：web 环境下，对象与 session 生命周期一致（不用）</li></ol><p>一般情况都是用默认配置 singleton，但与 struts2 整合时，给 action 的 bean 必须声明多例（struts 每个请求都会创建一个新的 action）</p><p>创建方式</p><ol><li><p>空参构造创建（对象创建必须通过构造函数）(推荐)</p><p><code>&lt;bean name=&quot;user&quot; class=&quot;com.xxx.bean.User&quot;&gt;&lt;/bean&gt;</code></p></li><li><p>静态工厂</p></li><li><p>实例工厂</p></li></ol><p>分模块配置</p><p>将一个配置文件导入另一个配置文件中</p><p><code>&lt;import resource=&quot;cn.xxx.applicationContext.xml&quot;/&gt;</code></p><p><a href="https://blog.csdn.net/sinat_34596644/article/details/53080026" target="_blank" rel="noopener">spring 定义 bean 的三种方式</a></p><p>属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.xxx.bean.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--set 注入 ，为 User 对象 name，age 属性 注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用类型注入用 ref ，对象注入,将下方配置的 Car 注入到 User--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将 Car 配置到容器,注入到其他对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"cn.xxx.bean.Car"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"迈巴赫"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cloor"</span> <span class="attr">value</span>=<span class="string">"黑"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>构造函数注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index 属性指定构造函数参数的索引地址， type 指定参数类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.xxx.bean.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lisi"</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用类型注入用 ref ，对象注入,将上方配置的 Car 注入到 User--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p名称注入</p><p>先导入<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p><p><code>&lt;bean name=&quot;user3&quot; class=&quot;cn.xxx.bean.User&quot; p:name=&quot;jack&quot; p:age=&quot;18&quot; p:car-ref=&quot;car&quot;&gt;&lt;/bean&gt;</code></p><p>本质还是走 set 构造，用来简化 property 配置方式。</p><p>spel 注入：spring Expression Language， spring 表达式语言</p><p>复杂类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"cb"</span> <span class="attr">class</span>=<span class="string">"cn.itheima.bean.CollectionBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arr"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--多元素 array 注入--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>jim<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--map 类型注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql///hibernate"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"carName"</span> <span class="attr">value-ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"user"</span> <span class="attr">value-ref</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--property 类型注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClass"</span>&gt;</span>com.jdbc.com.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"userName"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>tomcat  jar 包导入，并且应用到 mudeule</p><p>先在右上角点击 Edit Configurations，选择  tomcat ，设置名称，点击 Application server 右侧的 configure，选择左侧的 tomcat 版本（记住这个版本号），点击第一个 + 号，选择 tomcat 下的 lib 目录。点击确定。</p><p>然后 ctrl + alt + shift + s 打开 project structure ，选择 module，选中当前 module。点击右侧 + 号，选择 libraries，选择刚才配置的 tomcat 版本号。完成</p><hr><h5 id="Spring-使用注解替代-xml"><a href="#Spring-使用注解替代-xml" class="headerlink" title="Spring 使用注解替代 xml"></a>Spring 使用注解替代 xml</h5><ol><li>为主配置导入新的命名空间（约束），导包（4+2+spring-aop)</li><li>开启注解代理配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定扫描 该 package 下所有类中的注解，扫描时会连带其包下的子孙包一起扫描--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.xxx.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>在类中使用注解</p><p>@Component(“user”)</p><p>@Service(“user”);（service 层）</p><p>@Controller(“user”);（web 层，action/servlet）</p><p>@Repository(“user”);（dao 层，仓库）</p><p>四个注解功能相同，下面 3 个更容易区分功能层级（可读性高）</p></li></ol><p>修改对象作用范围：</p><p>@Scope(ScopeName=”prototype”)</p><p>设置为多例，默认为单例(singleton)</p><p>值类型注入：</p><p>@Value(“name”);</p><p>可以加在 成员变量上，通过反射的 Field 赋值，破坏封装性</p><p>也可以加载 set 方法上，通过 set 方法赋值</p><p><code>@Autowired//自动装配</code></p><p>如果由多个一致类型的对象，则无法选择具体哪一个</p><p><code>@Autowired</code></p><p><code>@Qualifier(&quot;car2&quot;)</code></p><p>有多个一致类型的对象，使用这两条注释，用来选择具体哪个对象</p><p>或者直接使用<code>@Resource(name=&quot;car2&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span><span class="comment">//对象创建（被构造）后调用-就是 init-method</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"初始化"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PreDestroy</span><span class="comment">//对象销毁前调用-destory-method</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"销毁"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ApplicationContext 没有 close 方法，需要用它的子类 ClassPathXmlApplicationContext</p><hr><h5 id="spring-aop"><a href="#spring-aop" class="headerlink" title="spring aop:"></a>spring aop:</h5><p>Spring 能为我们管理的对象动态生成代理对象，</p><p>自己创建代理对象需要创建方法 :</p><p>Proxy.newProxyInstance(classLoader,Interface[] arr,InvocationHandler handler);</p><p>spring 实现 aop 原理（Spring 混合 2 种代理）</p><ol><li>动态代理：被代理对象必须实现接口，才能产生代理对象，如果没有接口就不能使用动态代理技术（有接口时优先使用）</li><li>cglib 代理：第三方代理技术，可以对任何类生成代理，代理的原理是对目标对象进行继承代理，如果目标对象被 final 修饰，则无法被 cglib 代理（没有接口时使用）</li></ol><h5 id="aop-名词"><a href="#aop-名词" class="headerlink" title="aop 名词"></a>aop 名词</h5><p>Joinpoint（连接点）：目标对象中所有可以增强的方法</p><p>Pointcut（切入点）：目标对象中已经增强的方法</p><p>Advice（通知/增强）：增强的代码（需要添加在 被增强方法 前后的代码）</p><p>Target（目标对象）：被代理对象</p><p>Weaving（织入）：将通知应用到切入点这个过程</p><p>Proxy（代理）：将通知织入到目标对象后形成代理</p><p>aspect（切面）：切入点+通知</p><p>aop 导包：</p><p>4个基本包+</p><p>spring-aop-5.0.8.RELEASE.jar</p><p>com.springsource.org.aopalliance-1.0.0.jar</p><p>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</p><p>spring-aspects-5.0.8.RELEASE.jar</p><p>动态代理</p><ol><li>通过动态代理可以实现 aop 思想</li><li>对目标对象中方法增强</li></ol><details><br>    <summary>spring aop 配置 xml</summary><br>    <p><br>        <pre><br><!-- 准备工作: 导入aop(约束)命名空间 --><br><!-- 1.配置目标对象 --><br>    <bean name="userService" class="cn.itcast.service.UserServiceImpl"></bean><br><!-- 2.配置通知对象 --><br>    <bean name="myAdvice" class="cn.itcast.d_springaop.MyAdvice"></bean><br><!-- 3.配置将通知织入目标对象 --><br>    <a href="aop:config" target="_blank" rel="noopener">aop:config</a><br>        <!-- 配置切入点             public void cn.itcast.service.UserServiceImpl.save()             void cn.itcast.service.UserServiceImpl.save()            * cn.itcast.service.UserServiceImpl.save()            * cn.itcast.service.UserServiceImpl.*()            * cn.itcast.service.*ServiceImpl.*(..)            * cn.itcast.service..*ServiceImpl.*(..)        --><br>        &lt;aop:pointcut expression=”execution(<em> cn.itcast.service.</em>ServiceImpl.*(..))” id=”pc”/&gt;<br>        &lt;aop:aspect ref=”myAdvice” &gt;<br>            <!-- 指定名为before方法作为前置通知 --><br>            &lt;aop:before method=”before” pointcut-ref=”pc” /&gt;<br>            <!-- 后置 --><br>            &lt;aop:after-returning method=”afterReturning” pointcut-ref=”pc” /&gt;<br>            <!-- 环绕通知 --><br>            &lt;aop:around method=”around” pointcut-ref=”pc” /&gt;<br>            <!-- 异常拦截通知 --><br>            &lt;aop:after-throwing method=”afterException” pointcut-ref=”pc”/&gt;<br>            <!-- 后置 --><br>            &lt;aop:after method=”after” pointcut-ref=”pc”/&gt;<br>        &lt;/aop:aspect&gt;<br>    &lt;/aop:config&gt;<br><br>        </pre><br>    </p><br></details><hr><h5 id="spring-jdbc-配置"><a href="#spring-jdbc-配置" class="headerlink" title="spring jdbc 配置"></a>spring jdbc 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util-4.0.xsd http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将 dataSource 放入 spring 容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将 jdbcTemplate 放入 spring 容器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将 UserDao 放入 spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.jdbctemplate.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="jt" ref="jdbcTemplate"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--直接把 jdbc 连接池注入给 dao --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Spring-事务操作"><a href="#Spring-事务操作" class="headerlink" title="Spring 事务操作"></a>Spring 事务操作</h5><p>事务操作对象：PlatFormTransactionManager 接口</p><p>最核心的就是 TransactionManager 对象，给各个数据库操作对象提供不同的接口</p><p>Spring 事务属性</p><ul><li><p>事务的隔离级别：1-读已提交，2-读未提交，4-可重复度，8-串行化</p></li><li><p>是否只读：true（只读）/false（可操作）</p></li><li><p>事务传播行为：业务（Service）方法之间互相（平行）调用时，事务该如何处理</p><p>默认行为：PROPAGATION_REQUIRED 支持当前事务，如果不存在则新建一个（基本只用这个）</p></li></ul><p>Spring 事务管理方式</p><ul><li><p>编码式（了解）</p></li><li><p>xml 配置（aop）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务核心管理器配置，封装了所有事务操作，依赖于连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">isolation</span>=<span class="string">"READ_COMMITTED"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPc"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.itcast.service.impl.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注解配置（aop）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务核心管理器配置，封装了所有事务操作，依赖于连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>类上的注解配置：</p><p><code>@Transactional(isolation = Isolation.REPEATABLE_READ,propagation = Propagation.REQUIRED,readOnly = false)</code></p><p>如果想要一个类中所有方法都使用该注解配置，则将其放在类名上，如果其中有个别方法需要额外配置，则另填加注释再该方法上。</p></li></ul><hr><h4 id="SSH-框架整合"><a href="#SSH-框架整合" class="headerlink" title="SSH 框架整合"></a>SSH 框架整合</h4><p>WEB 层：struts2 + jsp</p><p>Service 层：javaBean</p><p>JavaBeans 是Java中一种特殊的类，可以将多个对象封装到一个对象（bean）中。 特点<strong>是</strong>可序列化，提供无参构造器，提供getter方法和setter方法访问对象的属性。</p><p>Dao 层：hibernate</p><p>struts2 与 spring 整合：将 Action 对象交给 spring 容器来创建</p><p>hibernate 与 spring 整合：将 sessionFactory 交给 spring 负责维护，并将 session 的维护以及 aop 事务都交给 spirng</p><hr><h5 id="导包："><a href="#导包：" class="headerlink" title="导包："></a>导包：</h5><ul><li>hibernate 包</li></ul><p>\hibernate-release-5.0.7.Final\hibernate-release-5.0.7.Final\lib\required  下全部包</p><p><img src="D:\hexo\source\_posts\ssh\捕获.PNG" alt="hibernate jar包"></p><p>\hibernate-release-5.0.7.Final\hibernate-release-5.0.7.Final\lib\jpa\ <code>hibernate-entitymanager-5.0.7.Final.jar</code></p><p><code>mysql-connector-java-5.1.7-bin.jar</code></p><ul><li>struts2:包</li></ul><p>\struts-2.3.24-all\struts-2.3.24\apps\struts2-blank\WEB-INF\lib 下全部包</p><p><img src="D:\hexo\source\_posts\ssh\struts2jar.PNG" alt="struts2jar"></p><p>\struts-2.3.24-all\struts-2.3.24\lib\ <code>struts2-spring-plugin-2.3.24.jar</code></p><p>struts2-spring-plugin-2.3.24.jar 这个包会让 struts2 在项目启动时会去寻找 spring 容器，如果找不到就会报错，单独使用 struts2 项目时不能导入</p><ul><li>spring 包</li></ul><p>4+2(核心包):</p><p>\spring-framework-5.0.8.RELEASE-dist\spring-framework-5.0.8.RELEASE\libs 下4个核心包</p><p>beans、comtext、core、expression</p><p>\spring-framework-3.0.2.RELEASE-dependencies\org.apache.log4j\com.springsource.org.apache.log4j\1.2.15 下的</p><p><code>com.springsource.org.apache.log4j-1.2.15.jar</code></p><p>\spring-framework-3.0.2.RELEASE-dependencies\org.apache.commons\com.springsource.org.apache.commons.dbcp\1.2.2.osgi 下的</p><p><code>com.springsource.org.apache.commons.dbcp-1.2.2.osgi.jar</code></p><p>整合 web 的包(spring-web)：</p><p>\spring-framework-5.0.8.RELEASE-dist\spring-framework-5.0.8.RELEASE\libs 下的</p><p><code>spring-web-5.0.8.RELEASE.jar</code></p><p>整合 aop （4个）(spring-aop|spring-aspect|aopalliance|aopweaving)</p><p>\spring-framework-5.0.8.RELEASE-dist\spring-framework-5.0.8.RELEASE\libs 下的</p><p><code>spring-aop-5.0.8.RELEASE.jar</code></p><p><code>spring-aspects-5.0.8.RELEASE.jar</code></p><p>\spring-framework-3.0.2.RELEASE-dependencies\org.aopalliance\com.springsource.org.aopalliance\1.0.0 下的</p><p><code>com.springsource.org.aopalliance-1.0.0.jar</code></p><p>\spring-framework-3.0.2.RELEASE-dependencies\org.aspectj\com.springsource.org.aspectj.weaver\1.6.8.RELEASE</p><p><code>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</code></p><ul><li>整合 hibernate 事务的（4个）（spring-jdbc|spring-tx|c3p0|spring-orm）</li></ul><p>\spring-framework-5.0.8.RELEASE-dist\spring-framework-5.0.8.RELEASE\libs 下的</p><p><code>spring-jdbc-5.0.8.RELEASE.jar</code></p><p><code>spring-orm-5.0.8.RELEASE.jar</code></p><p><code>spring-tx-5.0.8.RELEASE.jar</code></p><p>\spring-framework-3.0.2.RELEASE-dependencies\com.mchange.c3p0\com.springsource.com.mchange.v2.c3p0\0.9.1.2 下的</p><p><code>com.springsource.com.mchange.v2.c3p0-0.9.1.2.jar</code></p><ul><li>junit4 测试包</li></ul><p>\SSH\spring-framework-5.0.8.RELEASE-dist\spring-framework-5.0.8.RELEASE\libs 下的</p><p><code>spring-test-5.0.8.RELEASE.jar</code></p><hr><h5 id="单独配置-spring"><a href="#单独配置-spring" class="headerlink" title="单独配置 spring"></a>单独配置 spring</h5><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--让 spring 随 web 启动而创建的监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 spring 配置文件位置参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="单独配置-struts2"><a href="#单独配置-struts2" class="headerlink" title="单独配置 struts2"></a>单独配置 struts2</h5><p>struts.xml（sturts2 主配置文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory"</span> <span class="attr">value</span>=<span class="string">"spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"UserAction_*"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 action 的创建（obj 工厂 ）交给 spring 管理<br>struts.objectFactory = spring</p><p>spring 负责装配 Action 的依赖属性（将 action 中需要创建的 servie 交给 spring 管理）<br>struts.objectFactory.spring.autoWire = name</p><p>method={1} 代表该方法代表 name 中第几个通配符（*）</p><p>struts2 核心过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--struts2 核心过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="整合方案1（不推荐）"><a href="#整合方案1（不推荐）" class="headerlink" title="整合方案1（不推荐）"></a>整合方案1（不推荐）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方案1：class 属性仍然配置 action 完整类名，--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--struts2仍然修饰 action ，由 spring 负责组装 Action 中依赖关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"UserAction_*"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="整合方案2：spring-负责创建-action-及组装"><a href="#整合方案2：spring-负责创建-action-及组装" class="headerlink" title="整合方案2：spring 负责创建 action 及组装"></a>整合方案2：spring 负责创建 action 及组装</h5><p>applicationContext.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Action 作用对象一定是多例的--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.web.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"us"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.service.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"UserAction_*"</span> <span class="attr">class</span>=<span class="string">"userAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="单独配置-hibernate"><a href="#单独配置-hibernate" class="headerlink" title="单独配置 hibernate"></a>单独配置 hibernate</h5><p>导入orm元数据 与 实体类</p><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 数据库url --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///crm_32<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 数据库连接用户名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 数据库连接密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>dfwhj43815<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库方言--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将hibernate生成的sql语句打印到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将hibernate生成的sql语句格式化(语法缩进) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- auto schema export  自动导出表结构. 自动建表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入orm元数据</span></span><br><span class="line"><span class="comment">路径书写: 填写src下的路径</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/itcast/domain/Customer.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/itcast/domain/LinkMan.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/itcast/domain/User.hbm.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="spring-整合-hibernate"><a href="#spring-整合-hibernate" class="headerlink" title="spring 整合 hibernate"></a>spring 整合 hibernate</h5><p>方案一：spring 中配置 sessionFactory（不重要）</p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将 SessionFactory 配置到 spring 容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载配置方案1：仍然使用外部 hibernate.cfg.xml 配置信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方案二：将 hibernate 配置文件放到 spring 的配置文件中（使用该方法）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载配置方案2：在 spring 配置中放置 hibernate 配置信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置 hibernate 基本信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--必选配置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///crm_32<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>dfwhj43815<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--可选配置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入元数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingDirectoryLocations"</span> <span class="attr">value</span>=<span class="string">"cn/itcast/domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="spring-整合-c3p0-连接池"><a href="#spring-整合-c3p0-连接池" class="headerlink" title="spring 整合 c3p0 连接池"></a>spring 整合 c3p0 连接池</h5><ul><li><p>配置 db.properties ，放入用户密码等键值对</p></li><li><p>引入连接池到 spring </p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启 session 连接池--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--将 dataSource 放入 spring 容器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</code></p><p>将连接池注入到 sessionFactory,hibernate 会通过连接池获得连接</p><hr><h5 id="spring-整合-hibernate-操作数据库"><a href="#spring-整合-hibernate-操作数据库" class="headerlink" title="spring 整合 hibernate 操作数据库"></a>spring 整合 hibernate 操作数据库</h5><p>dao 类创建继承 HibernateDaoSupport</p><p>模板操作 ：execute / findByCriteria</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//hibernateDaoSupport 使用 需要为 dao 注入 sessionFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//匿名内部类引用外部变量必须设置为 final</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByUserCode</span><span class="params">(<span class="keyword">final</span> String usercode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HQL</span></span><br><span class="line"><span class="comment">//        return getHibernateTemplate().execute(new HibernateCallback&lt;User&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public User doInHibernate(Session session) throws HibernateException &#123;</span></span><br><span class="line"><span class="comment">//                String hql = " from User where user_code=? ";</span></span><br><span class="line"><span class="comment">//                Query query = session.createQuery(hql);</span></span><br><span class="line"><span class="comment">//                query.setParameter(0,usercode);</span></span><br><span class="line"><span class="comment">//                User user = (User) query.uniqueResult();</span></span><br><span class="line"><span class="comment">//                return user;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Criteria</span></span><br><span class="line">        DetachedCriteria dc = DetachedCriteria.forClass(User.class);</span><br><span class="line"></span><br><span class="line">        dc.add(Restrictions.eq(<span class="string">"user_code"</span>,usercode));</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) getHibernateTemplate().findByCriteria(dc);</span><br><span class="line">        <span class="keyword">if</span>(list!=<span class="keyword">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml 注入 sessioFactory</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模板操作需要注入 sessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="spring-AOP-事务"><a href="#spring-AOP-事务" class="headerlink" title="spring AOP 事务"></a>spring AOP 事务</h5><p>配置核心事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--核心事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xml 配置 aop 事务</p><ul><li><p>配置通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置通知--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"persist*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置织入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置将通知织入目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPc"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.itcast.service.impl.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="注解事务"><a href="#注解事务" class="headerlink" title="注解事务"></a>注解事务</h5><p>开启注解事务</p><p><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;</code></p><p>在类或方法上添加注释（类上加的话，类中方法全部使用该注释，特例的方法上可以单独加注释覆盖类注释）</p><p><code>@Transactional(isolation= Isolation.REPEATABLE_READ,propagation = Propagation.REQUIRED,readOnly = true)</code></p><hr><h5 id="扩大-session-作用域"><a href="#扩大-session-作用域" class="headerlink" title="扩大 session 作用域"></a>扩大 session 作用域</h5><p>避免使用懒加载时出现 no-session 问题（session 在到达 jsp 前已经关闭），需要扩大 session 作用域</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扩大 session 作用范围</span></span><br><span class="line"><span class="comment">    该 filter 一定要在 struts 的 filter 之前</span></span><br><span class="line"><span class="comment">    struts 过滤器没有 放行代码，所有过滤器都要在 struts 前--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在视图 jsp 中 session 还是打开的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="maven-的使用"><a href="#maven-的使用" class="headerlink" title="maven 的使用"></a>maven 的使用</h4><h5 id="maven-的用途"><a href="#maven-的用途" class="headerlink" title="maven 的用途"></a>maven 的用途</h5><ol><li>maven 能统一管理依赖（管理项目的 jar 包），从而节省项目空间</li><li>能一键构建项目：mvn tomcat:run 能不依靠 tomcat 直接运行项目</li><li>可以跨平台（因为是 java 开发的，专门用于 java 项目的，而 java 是跨平台的）</li><li>用于大型开发项目，可以提高开发效率（将一个项目分成多个小项目，分模块开发）（按业务分或按层分：dao、web、service）</li></ol><h5 id="maven-仓库"><a href="#maven-仓库" class="headerlink" title="maven 仓库"></a>maven 仓库</h5><p>它有三种仓库：</p><ol><li>本地仓库：自己维护，需要修改 C:\Users\用户名.m2 下 setting.xml 文件的 属性<code>&lt;localRepository&gt;C:\repository&lt;/localRepository&gt;</code></li><li>远程仓库：公司维护，本地仓库没有 jar 包时去这里下载</li><li>中央仓库：maven 团队维护，2亿 jar 包，如果远程仓库没有会去这里下载，也可以直接下载到本地仓库。</li></ol><h5 id="maven-项目目录结构"><a href="#maven-项目目录结构" class="headerlink" title="maven 项目目录结构"></a>maven 项目目录结构</h5><p>maven-helloworld</p><ul><li>src<ul><li>main：主目录<ul><li>java：放置 java 代码</li><li>resource：放置 xml 以及 properties 等原来 src 目录下的配置文件</li><li>webapp</li></ul></li><li>test：测试目录<ul><li>java：java 代码，junit 测试调用</li><li>resources：junit 测试用到的配置文件，如果内部没有测试文件，默认从 main 中找</li></ul></li></ul></li></ul><h5 id="meven-常用命令"><a href="#meven-常用命令" class="headerlink" title="meven 常用命令"></a>meven 常用命令</h5><ul><li>mvn tomcat:run  一键启动运行</li><li>mvn clean 删除编译的文件（target 文件夹）</li><li>mvn compile 编译主目录文件</li><li>mvn test 编译并运行 测试目录的文件（test 目录）</li><li>mvn package 打包项目成 war 包（包名，后缀名都是在 pom.xml 中配置的）</li><li>mvn install 将项目发布到配置的本地仓库</li></ul><h5 id="三种生命周期"><a href="#三种生命周期" class="headerlink" title="三种生命周期"></a>三种生命周期</h5><p>clean 生命周期：clean</p><p>Default 生命周期：Compile、test、package、install、deploy（按顺序）</p><p>Set 生命周期：site（用来生成项目的站点文档，用来描述项目）</p><p>同一生命周期的顺序靠后的命令执行时会同时顺序执行在前的命令</p><p>不同生命周期的命令可以同时执行（mvn clean package，这样会执行 clean 后执行 package）</p><hr><h5 id="Intellj-IDEA-创建-maven-项目"><a href="#Intellj-IDEA-创建-maven-项目" class="headerlink" title="Intellj IDEA 创建 maven 项目"></a>Intellj IDEA 创建 maven 项目</h5><p>右键创建类没有 servlet 的话，在 maven 的 pom.xml 下 dependencies 中配置 servlet 即可，如果还是没有就刷新 maven 的 pom 文件</p><blockquote><p><a href="https://blog.csdn.net/qq_32588349/article/details/51461182" target="_blank" rel="noopener">idea 配置 maven 项目入门</a></p><p><a href="https://blog.csdn.net/xiaoke815/article/details/72810976" target="_blank" rel="noopener">创建 maven 项目无 src 目录</a></p></blockquote><h5 id="jar-包依赖范围："><a href="#jar-包依赖范围：" class="headerlink" title="jar 包依赖范围："></a>jar 包依赖范围：</h5><p>Compile：编译时需要，测试时需要，运行时需要(struts2-core)</p><p>Provided：编译时需要，测试时需要，打包时不需要（jsp-api.jar，servlet-api.jar）</p><p>Runtime：编译时不需要，运行时不需要，打包时需要（数据库驱动包）</p><p>Test：编译时不需要，测试时需要，打包时不需要（junit.jar）</p><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--约束的版本信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--坐标 GAV--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打包方式 jar war pom--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>ssh Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jar 包依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内部配置了多个插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="依赖版本冲突解决"><a href="#依赖版本冲突解决" class="headerlink" title="依赖版本冲突解决"></a>依赖版本冲突解决</h5><p>调节原则：</p><ul><li>路径近者优先原则</li><li>第一申明者优先原则</li></ul><p>排除原则</p><p>版本锁定</p><hr><h5 id="idea-使用-maven-分模块开发"><a href="#idea-使用-maven-分模块开发" class="headerlink" title="idea 使用 maven 分模块开发"></a>idea 使用 maven 分模块开发</h5><p>[<a href="https://blog.csdn.net/u012129558/article/details/78423511" target="_blank" rel="noopener">使用IDEA创建maven项目整合SSH(多模块聚合)</a></p><p><a href="https://blog.csdn.net/fighting_sxw/article/details/80850971" target="_blank" rel="noopener">使用IDEA创建maven项目</a></p><p>依赖传递在 scope 为 test 时会无法传递到下一个模块，可以在下一个模块中再添加一个同样 scope 为 test 的依赖</p><p>聚合运行：在 parent 项目上 tomcat：run，最终打的 package 中是 web 中的 jar 包，所以不会出现 jar 包冲突</p><p>pom 文件中配置的路径为 网页访问路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- maven内置 的tomcat6插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以灵活配置工程路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/ssh<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以灵活配置端口号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分模块测试 junit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.crm.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.crm.entity.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.crm.service.CustomerService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ContextConfiguration(locations=&#123;"classpath:applicationContext-service.xml","classpath:applicationContext-dao.xml"&#125;)</span></span><br><span class="line"><span class="comment">//表示 从jar包中获得 xml 时需要加上 classpath*，applicationContext-* 表示任何后缀都获取（service/dao....）</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"classpath*:applicationContext-*.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = customerService.findById(<span class="number">1l</span>);</span><br><span class="line">        System.out.println(customer.getCustName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="私服-nexus"><a href="#私服-nexus" class="headerlink" title="私服 nexus"></a>私服 nexus</h5><p>登录 用户名：admin</p><p>密码：admin123</p><p>Virtual：虚拟仓库</p><ul><li>central M1 shadow ：影子仓库，没实际用处</li></ul><p>Proxy：代理仓库</p><ul><li><p>Apache Snapshots （阿帕奇 快照）：作为一个非正式仓库，代理跳转到 阿帕奇 的一个仓库</p></li><li><p>Central ：代理跳转到 阿帕奇中央仓库</p></li></ul><p>Hosted：宿主仓库，本地仓库</p><ul><li>3rd party：其他公司自己开发的工程</li><li>Releases：自己做的工程是 Release 会提交到此处</li><li>Snapshots：自己做的工程属性 是 Snapshots 时，提交到私服时会自动放到此处</li></ul><p>group</p><ul><li>public Respositories：不知道是 release 还是 snaphots 则从此处下载工程</li></ul><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-Field-‘id’-doesn’t-have-a-default-value-错误提示。"><a href="#Q-Field-‘id’-doesn’t-have-a-default-value-错误提示。" class="headerlink" title="Q:Field ‘id’ doesn’t have a default value 错误提示。"></a>Q:Field ‘id’ doesn’t have a default value 错误提示。</h5><p>A:删除原本的数据库，让其自动创建</p><h5 id="Q-java-lang-NoClassDefFoundError-Could-not-initialize-class-com-itheima-utils-HibernateUtils"><a href="#Q-java-lang-NoClassDefFoundError-Could-not-initialize-class-com-itheima-utils-HibernateUtils" class="headerlink" title="Q:java.lang.NoClassDefFoundError: Could not initialize class com.itheima.utils.HibernateUtils"></a>Q:java.lang.NoClassDefFoundError: Could not initialize class com.itheima.utils.HibernateUtils</h5><p>A：参考：<a href="https://www.cnblogs.com/chenjfblog/p/7904024.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenjfblog/p/7904024.html</a></p><p>配置了 xml 与 注释，删掉其中一个就好了</p><h5 id="Q-修改-jsp-内容后页面标签属性-href-不变化"><a href="#Q-修改-jsp-内容后页面标签属性-href-不变化" class="headerlink" title="Q:修改 jsp 内容后页面标签属性 href 不变化"></a>Q:修改 jsp 内容后页面标签属性 href 不变化</h5><p>因为删除了原先的 menu.htm 页面，没有将标签的 src 属性 变成新的 menu.jsp，修改 href 无效，重启 idea ，再发布网页会显示 网页 menu 部分 404 异常： HTTP Status 404 – Not Found</p><h5 id="Q-org-hibernate-HibernateException-No-CurrentSessionContext-configured"><a href="#Q-org-hibernate-HibernateException-No-CurrentSessionContext-configured" class="headerlink" title="Q:org.hibernate.HibernateException: No CurrentSessionContext configured!"></a>Q:org.hibernate.HibernateException: No CurrentSessionContext configured!</h5><p>解决的办法就是根据需求在hibernate.cfg.xml文件中加上 </p><p><code>&lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;/property&gt;</code></p><p>或</p><p><code>&lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;jta&lt;/property&gt;</code></p><p>添加第一种报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.hibernate.HibernateException: createCriteria is not valid without active transaction</span><br></pre></td></tr></table></figure><p>将 thread 改为 jta</p><p>参考：<a href="https://blog.csdn.net/yinjian520/article/details/8666695" target="_blank" rel="noopener">https://blog.csdn.net/yinjian520/article/details/8666695</a></p><p>修改后出现问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.hibernate.HibernateException: No TransactionManagerLookup specified</span><br></pre></td></tr></table></figure><p>将 service 中的 openSession  改为 getCurrentSession</p><p>参考：<a href="https://blog.csdn.net/xlgen157387/article/details/39801967" target="_blank" rel="noopener">https://blog.csdn.net/xlgen157387/article/details/39801967</a></p><blockquote><p>出错原因：需要把两个方法中用的sesiion一致，因为混用了所以报错，</p><p>要么同时写session=HibernateSessionFactory.getSession()来获取session</p><p>然后hibernate中配置为</p><property name="current_session_context_class">jta</property><p>要不就是用session=HibernateSessionFactory.getSessionFactory().getCurrentSession();来获取session</p><p>然后hibernate中的配置为：<property name="current_session_context_class">thread</property></p><p>出处：<a href="https://blog.csdn.net/tarataotao/article/details/9376693" target="_blank" rel="noopener">https://blog.csdn.net/tarataotao/article/details/9376693</a></p></blockquote><h5 id="Q-配置文件报错：不允许有匹配-“-xX-mM-lL-”-的处理指令目标。"><a href="#Q-配置文件报错：不允许有匹配-“-xX-mM-lL-”-的处理指令目标。" class="headerlink" title="Q:配置文件报错：不允许有匹配 “[xX][mM][lL]” 的处理指令目标。"></a>Q:配置文件报错：不允许有匹配 “[xX][mM][lL]” 的处理指令目标。</h5><p>A:</p><p> 规范 XML格式</p><p> &lt;?xml version=”1.0” encoding=”UTF-8”?&gt;  必须是XML文件的第一个元素且前面不能空格。</p><p>参考：<a href="https://blog.csdn.net/niubaofeng2011/article/details/39007693" target="_blank" rel="noopener">https://blog.csdn.net/niubaofeng2011/article/details/39007693</a></p><h5 id="Q-IDEA-DTD-文件引入报错"><a href="#Q-IDEA-DTD-文件引入报错" class="headerlink" title="Q:IDEA  DTD 文件引入报错"></a>Q:IDEA  DTD 文件引入报错</h5><p>错误信息：URI is not registered (Settings | Languages &amp; Frameworks | Schemas and DTD</p><p><a href="https://blog.csdn.net/weixin_39220472/article/details/80031704" target="_blank" rel="noopener">IDEA解决URI is not registered (Settings | Languages &amp; Frameworks | Schemas and DTD</a></p><hr><h5 id="Q-idea-的-tomcat-不能正常关闭"><a href="#Q-idea-的-tomcat-不能正常关闭" class="headerlink" title="Q:idea 的 tomcat 不能正常关闭"></a>Q:idea 的 tomcat 不能正常关闭</h5><p>问题报错：</p><p>org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [ROOT] appears to have started a thread named [pool-2-thread-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:  sun.misc.Unsafe.park</p><p>A:</p><p><a href="https://stackoverflow.com/questions/28105803/tomcat8-memory-leak" target="_blank" rel="noopener">https://stackoverflow.com/questions/28105803/tomcat8-memory-leak</a></p><hr><h5 id="Q-Error-2-17-java-程序包org-junit不存在"><a href="#Q-Error-2-17-java-程序包org-junit不存在" class="headerlink" title="Q:Error:(2, 17) java: 程序包org.junit不存在"></a>Q:Error:(2, 17) java: 程序包org.junit不存在</h5><p>A:导入 com.springsource.org.junit-4.7.0.jar 的 junit jar 包即可</p><hr><h5 id="Q-bean-重复配置"><a href="#Q-bean-重复配置" class="headerlink" title="Q: bean 重复配置"></a>Q: bean 重复配置</h5><p>org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Bean name ‘user’ is already used in this <beans> element<br>Offending resource: class path resource [applicationContext.xml]</beans></p><p>A: 在 Spring 配置文件重复配置相同 name 属性的 bean 会产生错误</p><hr><h5 id="Q-NullPointerException"><a href="#Q-NullPointerException" class="headerlink" title="Q:NullPointerException"></a>Q:NullPointerException</h5><p>java.lang.NullPointerException at cn.itheima.service.impl.UserServiceImpl.login(UserServiceImpl.java:19) at cn.itheima.web.action.UserAction.login(UserAction.java:16) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at</p><p>spring 容器注入，需要由 spring 创建 UserService 对象，自己创建就会为空</p><hr><h5 id="Q-Spring-Junit4-RunWith-为红色"><a href="#Q-Spring-Junit4-RunWith-为红色" class="headerlink" title="Q:Spring Junit4 @RunWith 为红色"></a>Q:Spring Junit4 @RunWith 为红色</h5><p>A: 在 Module 中 Libraries 中，点击左侧 + 号，选择 java 添加 idea lib 包下的 junit 添加到该项目</p><hr><h5 id="Q-程序包org-junit-runner不存在"><a href="#Q-程序包org-junit-runner不存在" class="headerlink" title="Q:程序包org.junit.runner不存在"></a>Q:程序包org.junit.runner不存在</h5><p>idea 使用 springJunit4 出现问题 : 程序包org.junit.runner不存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/he99774/article/details/78254262" target="_blank" rel="noopener">程序包org.junit.runner不存在</a></p><p>File -&gt; Project Struct… -&gt; Libraies -&gt; 点击绿色的加号 -&gt; Java -&gt; 找到 IDEA 安装路径下的 Lib 中的junit-4.12 -&gt; 确定就行了，点击OK就出去了</p><hr><h5 id="Q-Spring-整合的-Junit4-错误"><a href="#Q-Spring-整合的-Junit4-错误" class="headerlink" title="Q:Spring 整合的 Junit4 错误"></a>Q:Spring 整合的 Junit4 错误</h5><p>java.lang.NoSuchMethodError: org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runLeaf</p><p>(Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;Lorg/junit/runner/notification/RunNotifier;)</p><p>A:Junit4 包冲突了，删除自己导入 lib 下的 com.springsource.org.junit-4.7.0.jar，在红色的 @Test 上选择第一个修复方法</p><hr><h5 id="Q-unnamed-spring-confirguration-files-found"><a href="#Q-unnamed-spring-confirguration-files-found" class="headerlink" title="Q:unnamed spring confirguration files found"></a>Q:unnamed spring confirguration files found</h5><p><img src="D:\hexo\source\_posts\ssh\spring配置.png" alt="spring配置"></p><p>A:shift + ctrl + alt + s 进入 Project Structure–&gt; modules–&gt;选择未配置 Spring Configuration 的项目–&gt;（如果没有 相应的 spring ,点击左侧 + 号,选择 spring）–&gt;选中需要添加的spring 项目 –&gt; 点击右侧 + 号–&gt; 选择需要的 Spring Application Context xml  文件，点击确认</p><p>Facets 表示这个module有什么特征，比如 Web，Spring和Hibernate等； </p><p>Artifact：项目产生物，主要有jar, war, maven插件</p><p><a href="https://blog.csdn.net/qq_35624642/article/details/51980916" target="_blank" rel="noopener">idea facet 及 artifact 理解</a></p><hr><h5 id="Q-Spring-配置-jdbc-c3p0-异常"><a href="#Q-Spring-配置-jdbc-c3p0-异常" class="headerlink" title="Q: Spring 配置 jdbc c3p0 异常"></a>Q: Spring 配置 jdbc c3p0 异常</h5><p>org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!</p><p>A: class 与 url 填反了</p><p>参考：以上问题可能有以下原因造成：</p><p>1，驱动配置有误：driver=com.mysql.jdbc.Driver<br>2，数据库连接地址有误：url=jdbc:mysql://localhost:3306/test?3useUnicode=true&amp;characterEncoding=utf8<br>3，密码或帐号有误：username=root， password=root</p><p>4，数据库未启动或无权访问</p><p>5，项目未引入对应的驱动jar包mysql-connector-java-5.1.6-bin.jar</p><p>6,mysql root没有远程访问的权限，需要增加权限，增加权限的步骤如下：<br>进入mysql数据库：<br>grant all privileges on <em>.</em> to ‘root‘@’%’ identified by ‘root’ with grant option;<br>flush privileges;</p><hr><h5 id="A-Spring-异常-Junit4，-NoClassDefFoundError-org-hamcrest-SelfDescribing"><a href="#A-Spring-异常-Junit4，-NoClassDefFoundError-org-hamcrest-SelfDescribing" class="headerlink" title="A:Spring 异常 Junit4，.NoClassDefFoundError: org/hamcrest/SelfDescribing"></a>A:Spring 异常 Junit4，.NoClassDefFoundError: org/hamcrest/SelfDescribing</h5><p>Exception in thread “main” java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</p><p>Caused by: java.lang.ClassNotFoundException: org.hamcrest.SelfDescribing</p><p>A: 删除Mudle 里的 Junit4 lib 包，在 @Test 上 alt+enter 选择添加 junit4，再选择第一个选项即可，idea 会自动添加 junit4 与 hamcrest-core 的 jar 包</p><hr><h5 id="A-java-lang-IllegalStateException-Failed-to-load-ApplicationContext"><a href="#A-java-lang-IllegalStateException-Failed-to-load-ApplicationContext" class="headerlink" title="A: java.lang.IllegalStateException: Failed to load ApplicationContext"></a>A: java.lang.IllegalStateException: Failed to load ApplicationContext</h5><p>缺少包  com.springsource.org.aopalliance-1.0.0.jar</p><p>Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [applicationContext.xml]; nested exception is java.lang.NoClassDefFoundError: org/aopalliance/intercept/MethodInterceptor</p><p>Caused by: java.lang.NoClassDefFoundError: org/aopalliance/intercept/MethodInterceptor</p><p>Caused by: java.lang.ClassNotFoundException: org.aopalliance.intercept.MethodInterceptor</p><h5 id="Q-启动-tomcat-报错-xml-错误"><a href="#Q-启动-tomcat-报错-xml-错误" class="headerlink" title="Q: 启动 tomcat 报错 xml 错误"></a>Q: 启动 tomcat 报错 xml 错误</h5><p>Error creating bean with name ‘transactionManager’ defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean ‘sessionFactory’ while setting bean property ‘sessionFactory’</p><p>A：proerties 文件下参数配置错误，导致无法获得 dataSource,后续无法将 dataSource 注入  sessionFactory， 致使 sessionFactory 无法注入到 transactionManager 核心事务管理器，出现错误</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将 dataSource 放入 spring 容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--将 SessionFactory 配置到 spring 容器中--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"><span class="comment">&lt;!--核心事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q-idea-项目配置文件-class-都为红色"><a href="#Q-idea-项目配置文件-class-都为红色" class="headerlink" title="Q:idea 项目配置文件 class 都为红色"></a>Q:idea 项目配置文件 class 都为红色</h5><p>A: 在 module 中设置项目的 src 路径</p><hr><h5 id="Q-配置-MAVEN-运行后出现异常"><a href="#Q-配置-MAVEN-运行后出现异常" class="headerlink" title="Q:配置 MAVEN 运行后出现异常"></a>Q:配置 MAVEN 运行后出现异常</h5><p>[ERROR] Failed to execute goal org.codehaus.mojo:tomcat-maven-plugin:1.1:run (default-cli): Goal requires a project to execute but there is no POM in this directory (). Please verify you invoked Maven from the correct directory</p><p>A: 需要在运行文件的 src 同级目录放有 pom.xml 文件，并且内部有相应的配置信息。</p><p>需要在 C:\Users\用户名.m2 中放置 配置 maven 的 settings.xml 而不是在 maven 解压目录的 conf 目录下</p><blockquote><p>参考：<a href="https://stackoverflow.com/questions/16230666/failed-to-execute-goal-org-codehaus-mojotomcat-maven-plugin1-1deploy-default" target="_blank" rel="noopener">https://stackoverflow.com/questions/16230666/failed-to-execute-goal-org-codehaus-mojotomcat-maven-plugin1-1deploy-default</a></p></blockquote><hr><h5 id="Q-intellj-IDEA-创建-maven-项目无-src-目录问题"><a href="#Q-intellj-IDEA-创建-maven-项目无-src-目录问题" class="headerlink" title="Q:intellj IDEA 创建 maven 项目无 src 目录问题"></a>Q:intellj IDEA 创建 maven 项目无 src 目录问题</h5><p>在自己的 maven 主配置文件 mirrors 下加入 国内阿里云的镜像网站</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!-- 中央仓库 --&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://blog.csdn.net/xiaoke815/article/details/72810976" target="_blank" rel="noopener">https://blog.csdn.net/xiaoke815/article/details/72810976</a></p></blockquote><hr><h5 id="Q-maven-idea-项目-xml-文件中-junit-版本红色"><a href="#Q-maven-idea-项目-xml-文件中-junit-版本红色" class="headerlink" title="Q:maven idea 项目 xml 文件中 junit 版本红色"></a>Q:maven idea 项目 xml 文件中 junit 版本红色</h5><p>A:将版本从 4.11 改成 4.10 或者 4.9</p><hr><h5 id="Q-maven-jar-包冲突"><a href="#Q-maven-jar-包冲突" class="headerlink" title="Q:maven jar 包冲突"></a>Q:maven jar 包冲突</h5><p>A: maven 的 jsp 与 servlet api 与 tomcat 中的冲突了，在这两个 dependency 中添加 <scope>provided</scope>` 属性，修改其依赖范围</p><blockquote><p>参考：<a href="https://stackoverflow.com/questions/5735957/maven-loads-servlet-api-twice" target="_blank" rel="noopener">https://stackoverflow.com/questions/5735957/maven-loads-servlet-api-twice</a></p></blockquote><hr><h5 id="Q-intellj-idea-的-jsp-页面无法使用-el-表达式"><a href="#Q-intellj-idea-的-jsp-页面无法使用-el-表达式" class="headerlink" title="Q: intellj idea 的 jsp 页面无法使用 el 表达式"></a>Q: intellj idea 的 jsp 页面无法使用 el 表达式</h5><p>A:在 page 属性中加上 isELIgnored=”false” 属性，使其不要忽略 EL 表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://blog.csdn.net/qq_36921440/article/details/83785588" target="_blank" rel="noopener">https://blog.csdn.net/qq_36921440/article/details/83785588</a></p></blockquote><hr><h5 id="Q-intellj-idea-meven-install-错误"><a href="#Q-intellj-idea-meven-install-错误" class="headerlink" title="Q:intellj idea meven install 错误"></a>Q:intellj idea meven install 错误</h5><p>The packaging for this project did not assign a file to the build artifact</p><p>A:不要使用自带右侧 maven 的 install ，自己在 EditConfiguration 中配置 install</p><hr><h5 id="Q-分模块运行-web-错误-404"><a href="#Q-分模块运行-web-错误-404" class="headerlink" title="Q:分模块运行 web 错误 404"></a>Q:分模块运行 web 错误 404</h5><p>HTTP Status 404 - There is no Action mapped for namespace [/] and action name [findById] associated with context path [/ssh].<br>type Status report</p><p>message There is no Action mapped for namespace [/] and action name [findById] associated with context path [/ssh].</p><p>description The requested resource (There is no Action mapped for namespace [/] and action name [findById] associated with context path [/ssh].) is not available.</p><p>A: 经过查看 target 的输出文件夹，发现 applicationContext.xml 与 struts.xml 文件 都不在 class 目录下</p><p>于是查看后发现把 ssh-web 模块的 resources 文件夹放到了src 目录下，需要将其放入 src/main 中</p><hr><h5 id="Q-idea-上传到私服错误"><a href="#Q-idea-上传到私服错误" class="headerlink" title="Q: idea 上传到私服错误"></a>Q: idea 上传到私服错误</h5><p>idea Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy</p><p>Return code is: 401, ReasonPhrase: Unauthorized</p><p>A:401 是用户密码错误，没有设置好用户名和密码，400是没有访问权限</p><p>需要在你的 idea 的配置 xml 下配置 server 属性（C:\Users\用户名\.m2），而不是 maven conf 下的xml</p><p><a href="https://huangyunbin.iteye.com/blog/1740426" target="_blank" rel="noopener">https://huangyunbin.iteye.com/blog/1740426</a></p><hr><h5 id="Q-idea-不会自动从私服下载项目模块-jar-包"><a href="#Q-idea-不会自动从私服下载项目模块-jar-包" class="headerlink" title="Q:idea 不会自动从私服下载项目模块 jar 包"></a>Q:idea 不会自动从私服下载项目模块 jar 包</h5><p>因为 idea 默认的 maven 是自带的，需要在 setting Build，Execution，Deployment/Build Tools/Maven 的Maven Home Directory 中选择自己安装的 maven 目录</p><p><a href="https://blog.csdn.net/suah01/article/details/64906323" target="_blank" rel="noopener">https://blog.csdn.net/suah01/article/details/64906323</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;hibernate&quot;&gt;&lt;a href=&quot;#hibernate&quot; class=&quot;headerlink&quot; title=&quot;hibernate&quot;&gt;&lt;/a&gt;hibernate&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/fighting_sxw/article/details/80566295&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;idea 下 hibernate 的创建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linuxidc.com/Linux/2016-09/135624.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;idea 创建 bean.hbm.xml 与 hibernate.cfg.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在配置 javaBean.hbm.xml 时，column 如果不配，自动根据属性名 name 填写，如果表的 列名 与 代码的属性名 相同，则不需要配置 column&lt;/p&gt;
&lt;h5 id=&quot;hibernate-中对象的状态&quot;&gt;&lt;a href=&quot;#hibernate-中对象的状态&quot; class=&quot;headerlink&quot; title=&quot;hibernate 中对象的状态&quot;&gt;&lt;/a&gt;hibernate 中对象的状态&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;瞬时状态：没有 id，没有在 session 缓存中&lt;/li&gt;
&lt;li&gt;持久化状态：有 id ，在 session 缓存中&lt;/li&gt;
&lt;li&gt;游离/托管状态：有 id ，没有在 session  缓存中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;save 方法实质是将 瞬时状态的转变成持久化状态&lt;/p&gt;
&lt;p&gt;执行 save 方法时，为了将对象转换成持久化状态必须生成 id 值，如果需要的话会执行 insert 语句来生成：主键自增的情况下&lt;/p&gt;
&lt;p&gt;如果是 increament ：查询数据库 id 最大值作为主键的情况下会执行查询数据库 id 最大值的 sql 语句&lt;/p&gt;
&lt;p&gt;持久化对象的特点：持久化对象的任何变化都会自动同步到数据库&lt;/p&gt;
&lt;p&gt;save/update ：将瞬时/游离状态的对象转变为持久化状态（saveOrupdate 方法可以通用）&lt;/p&gt;
&lt;p&gt;delete/close：将持久化状态的对象转变为 瞬时/游离状态&lt;/p&gt;
&lt;p&gt;get 直接获得一个持久化状态的对象&lt;/p&gt;
&lt;p&gt;hibernate 的作用：把希望持久化到数据库的数据，其对应的对象状态变为持久化&lt;/p&gt;
    
    </summary>
    
      <category term="SSH" scheme="http://yoursite.com/categories/SSH/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Listener_Filter</title>
    <link href="http://yoursite.com/2018/12/25/Listener_Filter/"/>
    <id>http://yoursite.com/2018/12/25/Listener_Filter/</id>
    <published>2018-12-25T07:20:54.000Z</published>
    <updated>2019-01-21T08:27:39.768Z</updated>
    
    <content type="html"><![CDATA[<h4 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器 Listener"></a>监听器 Listener</h4><h5 id="监听器概念"><a href="#监听器概念" class="headerlink" title="监听器概念"></a>监听器概念</h5><p>监听某个对象的状态变化的组件</p><ol><li>事件源：被监听的对象 – 三个域对象 request、session、servletContext</li><li>监听器：监听事件源对象 – 事件源对象的状态变化都会触发监听器 – 6+2</li><li>注册监听器：将监听器与事件源进行绑定</li><li>相应行为：监听器监听到事件源的状态变化时所涉及的功能代码 – 需要编写</li></ol><h5 id="监听器分类"><a href="#监听器分类" class="headerlink" title="监听器分类"></a>监听器分类</h5><p>第一维度：按照被监听对象划分：ServletRequest 域、 HttpSession 域、servletContext 域</p><p>第二维度：安装监听的内容分：监听域对象的创建与销毁 监听域对象的属性变化</p><h5 id="监听三大域对象的创建与销毁的监听器"><a href="#监听三大域对象的创建与销毁的监听器" class="headerlink" title="监听三大域对象的创建与销毁的监听器"></a>监听三大域对象的创建与销毁的监听器</h5><p>监听 ServletContext 域的创建与销毁的监听器 ServletContextListener </p><ol><li><p>servlet 与的生命周期</p><p>何时创建：服务器启动创建</p><p>何时销毁：服务器关闭销毁</p></li><li><p>监听器编写步骤（重点）</p><ol><li>编写一个监听器类去实现监听器接口 （6+2 中选）</li><li>覆盖监听器的方法</li><li>在 web.xml 中进行配置</li></ol></li><li><p>监听方法</p></li></ol><p>6个监听器 ：ServletContext、HttpSession、ServletRequest 域 + Listener / AttributeListener </p><a id="more"></a><h5 id="ServletContextListener-的主要作用"><a href="#ServletContextListener-的主要作用" class="headerlink" title="ServletContextListener  的主要作用"></a>ServletContextListener  的主要作用</h5><ol><li><p>初始化的工作：初始化数据 – 加载数据库驱动、连接池的初始化</p></li><li><p>加载一些初始化的配置文件 – spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//配置 spring 的核心监听器 </span><br><span class="line">//ContextLoaderListener implements ServletContextListener 实现了 监听器接口</span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 以上配置监听器用来在服务器开启时加载 spring 配置文件 applicationContext.xml </p></li><li><p>任务调度 – 定时器  Timer、TimerTask</p></li></ol><p>httpSession 域的 创建与销毁 监听器，在一个客户端访问时会创建一个 session</p><p>jsp 页面默认被转换成 sevlet 会自动添加 pageContext.getSession 方法</p><p>一般只用来记录页面访问人数</p><p>2个监听器：与 session 中的绑定对象相关的监听器（对象感知监听器）</p><p>4个状态都是针对 存放到 session 中的对象的</p><p>即将绑定到 session 的对象状态：</p><ol><li>绑定状态：一个对象被放到 session 中</li><li>解绑状态：一个对象被 session 移除</li><li>钝化状态：将 session 内存中的对象持久化（序列化）到磁盘</li><li>活化状态</li></ol><p>绑定与解绑监听器： HttpSessionbindingListener ：是给对象用的，对象自己知道自己被绑或解绑</p><p>感知监听器不用配置 xml</p><p>面试题：当用户很多时，怎么对服务器进行优化？</p><p>答：把待机很久不动的用户 session （服务器内存）中的内容存到磁盘中，如果用户回来了就将磁盘中的内容返回给用户</p><p>钝化与活化监听器：HttpSessionActivationListener</p><p>钝化（服务器关闭后）tomcat 文件夹下会有一个 SESSIONS.ser 文件 ，对象需要 实现 Serializable 接口才能真正钝化（序列化）到磁盘，不然会无法活化</p><p>服务器正常关闭或启动 实现钝化活化</p><p>使用钝化与活化监听器需要在 webContent/META-INF 下配置 context.xml </p><hr><h4 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器 Filter"></a>过滤器 Filter</h4><p>过滤器概念</p><p>filter 是对客户端访问资源的过滤，符合要求的放行不符合的不放行，并且可以对目标访问资源前后进行逻辑处理</p><ol><li>编写一个过滤器的类实现 Filter 接口</li><li>实现接口中尚未实现的方法（着重实现 doFilter 方法）</li><li>在 web.xml 中进行配置（主要对过滤哪些资源配置进行配置）</li></ol><p>作用：权限控制、公共代码的提取、对 request 和 response 中的方法进行增强（装饰者模式/动态代理）</p><p>增强方法：在 filter 中获得 request 与 response 时进行增强再发送给客户端</p><p>核心过滤方法 ：doFilter</p><p>放行请求：doFilter(resqust,response);</p><p>doFilter(ServletRequest,ServletResponse){</p><p>}</p><p>doFilter 内部请求是 ServletRequest，所以无法使用一些 HttpServletRequest 的 Api 如 request.getSession()，需要把它强转成子类，servlet 内部的 doGet doPost 方法都是底层源码自动强转过的 HttpServletRequest</p><p>FilterChian 对象 内部有所有 Filter 的索引与顺序</p><p>过滤器的执行顺序看 web.xml 中 <filter-mapping> 配置的先后顺序</filter-mapping></p><details><br>    <summary>异常报错</summary><br>    <p><br>        <pre><br>        HTTP Status 500 – Internal Server Error<br>TypeException Report<br>Message An exception occurred processing JSP page [/index.jsp] at line [27]<br>Description The server encountered an unexpected condition that prevented it from fulfilling the request.<br>Exception<br>org.apache.jasper.JasperException: An exception occurred processing JSP page [/index.jsp] at line [27]<br>24:             鑼冨洿浠庡皬鍒板ぇ page鍩�(pageContext 瀵硅薄)–&gt;request鍩�–&gt;session鍩�–&gt;application鍩�(servletContext)–%&gt;<br>25:         &lt;%–&lt;%=pageContext.findAttribute(“name”)%&gt;–%&gt;<br>26:             <!-- 寮曞叆header.jsp --><br>27:             &lt;jsp:include page=”/header.jsp”&gt;&lt;/jsp:include&gt;<br>28:<br>29:             <!-- 杞挱鍥� --><br>30:             <div class="container-fluid"><br>Stacktrace:<br>org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:584)<br>    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:466)<br>    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)<br>    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>    Root Cause<br>org.apache.jasper.JasperException: An exception occurred processing JSP page [/header.jsp] at line [20]<br>17:         <li><a href="register.jsp">娉ㄥ唽</a></li><br>18:       &lt;/c:if&gt;<br>19:       &lt;c:if test=”${user != null}”&gt;<br>20:         娆㈣繋鎮�,${user.username }<br>21:       &lt;/c:if&gt;<br>22:       <li><a href="cart.jsp">璐墿杞�</a></li><br>23:       <li><a href="order_list.jsp">鎴戠殑璁㈠崟</a></li><br>Stacktrace:<br>org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:584)<br>    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:481)<br>    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)<br>    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:894)<br>    org.apache.jsp.index_jsp._jspService(index_jsp.java:144)<br>    org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443)<br>    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)<br>    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>    Root Cause<br>javax.el.PropertyNotFoundException: Property [username] not found on type [com.itheima.domain.User]<br>    javax.el.BeanELResolver$BeanProperties.get(BeanELResolver.java:260)<br>    javax.el.BeanELResolver$BeanProperties.access$300(BeanELResolver.java:212)<br>    javax.el.BeanELResolver.property(BeanELResolver.java:347)<br>    javax.el.BeanELResolver.getValue(BeanELResolver.java:92)<br>    org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:110)<br>    org.apache.el.parser.AstValue.getValue(AstValue.java:169)<br>    org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:184)<br>org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:944)<br>    org.apache.jsp.header_jsp._jspx_meth_c_005fif_005f1(header_jsp.java:301)<br>    org.apache.jsp.header_jsp._jspService(header_jsp.java:137)<br>    org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443)<br>    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)<br>    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:894)<br>    org.apache.jsp.index_jsp._jspService(index_jsp.java:144)<br>    org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443)<br>    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)<br>    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>    Note The full stack trace of the root cause is available in the server logs.<br>        </div></pre><br>    </p><br></details><p>在 jstl 语句中使用了 javaBean 不存在的属性</p><hr><h5 id="过滤器解决-post-get-乱码问题"><a href="#过滤器解决-post-get-乱码问题" class="headerlink" title="过滤器解决 post get 乱码问题"></a>过滤器解决 post get 乱码问题</h5><p>在传递 request 之前对 request 的 getParameter 方法进行增强</p><p>装饰者模式（包装）</p><ol><li>增强类与被增强类实现统一接口</li><li>在增强类中传入被增强的类</li><li>需要增强的方法重写，不需要增强的方法调用被增强类的</li></ol><hr><p>filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//前处理</span><br><span class="line">打开session 事务</span><br><span class="line"></span><br><span class="line">chain.dofilter(req,resp);//放行-&gt;去处理 servlet，service，dao，jsp</span><br><span class="line"></span><br><span class="line">//后处理</span><br><span class="line">关闭 session 事务</span><br></pre></td></tr></table></figure><p>此方式可以让 全部范围内的程序 session 处于打开状态</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;监听器-Listener&quot;&gt;&lt;a href=&quot;#监听器-Listener&quot; class=&quot;headerlink&quot; title=&quot;监听器 Listener&quot;&gt;&lt;/a&gt;监听器 Listener&lt;/h4&gt;&lt;h5 id=&quot;监听器概念&quot;&gt;&lt;a href=&quot;#监听器概念&quot; class=&quot;headerlink&quot; title=&quot;监听器概念&quot;&gt;&lt;/a&gt;监听器概念&lt;/h5&gt;&lt;p&gt;监听某个对象的状态变化的组件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件源：被监听的对象 – 三个域对象 request、session、servletContext&lt;/li&gt;
&lt;li&gt;监听器：监听事件源对象 – 事件源对象的状态变化都会触发监听器 – 6+2&lt;/li&gt;
&lt;li&gt;注册监听器：将监听器与事件源进行绑定&lt;/li&gt;
&lt;li&gt;相应行为：监听器监听到事件源的状态变化时所涉及的功能代码 – 需要编写&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;监听器分类&quot;&gt;&lt;a href=&quot;#监听器分类&quot; class=&quot;headerlink&quot; title=&quot;监听器分类&quot;&gt;&lt;/a&gt;监听器分类&lt;/h5&gt;&lt;p&gt;第一维度：按照被监听对象划分：ServletRequest 域、 HttpSession 域、servletContext 域&lt;/p&gt;
&lt;p&gt;第二维度：安装监听的内容分：监听域对象的创建与销毁 监听域对象的属性变化&lt;/p&gt;
&lt;h5 id=&quot;监听三大域对象的创建与销毁的监听器&quot;&gt;&lt;a href=&quot;#监听三大域对象的创建与销毁的监听器&quot; class=&quot;headerlink&quot; title=&quot;监听三大域对象的创建与销毁的监听器&quot;&gt;&lt;/a&gt;监听三大域对象的创建与销毁的监听器&lt;/h5&gt;&lt;p&gt;监听 ServletContext 域的创建与销毁的监听器 ServletContextListener &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;servlet 与的生命周期&lt;/p&gt;
&lt;p&gt;何时创建：服务器启动创建&lt;/p&gt;
&lt;p&gt;何时销毁：服务器关闭销毁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监听器编写步骤（重点）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编写一个监听器类去实现监听器接口 （6+2 中选）&lt;/li&gt;
&lt;li&gt;覆盖监听器的方法&lt;/li&gt;
&lt;li&gt;在 web.xml 中进行配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监听方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;6个监听器 ：ServletContext、HttpSession、ServletRequest 域 + Listener / AttributeListener &lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>javaweb core</title>
    <link href="http://yoursite.com/2018/12/14/web20/"/>
    <id>http://yoursite.com/2018/12/14/web20/</id>
    <published>2018-12-14T08:26:01.000Z</published>
    <updated>2019-02-12T02:49:53.103Z</updated>
    
    <content type="html"><![CDATA[<h4 id="xml-amp-反射"><a href="#xml-amp-反射" class="headerlink" title="xml&amp;反射"></a>xml&amp;反射</h4><p>DTD 文件 document type definition ：文档类型定义</p><p>用于约束（约定/规定）xml 文档的格式</p><p>Scheme 文件，后缀名 .xsd 是 DTD 文件的升级类型，功能比 DTD 文件更多</p><p>DOM:将文档一次加载到内存形成树形结构，进行解析，解析成一个 Document 对象</p><p>SAX：Simple API for XML ：事件驱动的方式，边读边解析</p><h5 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h5><p>JAVA 反射机制指在运行过程中，对于任意一个类，都能知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性</p><p>使用反射可以在运行时 (在内存中操作代码) 对 .class 类文件中的字节码（机器代码）进行修改。在运行时对类 Class 、构造方法 Constructor、普通方法 Method、字段 field 进行操作。</p><details><br>    <summary>反射获得 xml 配置文件中的 Servlet 类，对其进行方法调用（点击详细）</summary><br>    <pre>//1.创建解析器对象<br>            SAXReader saxReader = new SAXReader();<br>            //2.使用解析器加载web.xml文件得到document对象<br>            Document document = saxReader.read(“src/cn/itheima/web/servlet1/web.xml”);<br>            //3.获取根元素节点<br>            Element rootElement = document.getRootElement();<br>            //4.根据元素名称获取子元素节点<br>            Element servletElement = rootElement.element(“servlet”);<br>            //5.根据元素名称获取servlet-class的文本节点<br>            String servletClass = servletElement.element(“servlet-class”).getText();<br>            //System.out.println(servletClass);<br>            //6.通过类全名获取字节码文件<br>            Class clazz = Class.forName(servletClass);<br>            //7.创建实例对象<br>            MyServlet1 my = (MyServlet1) clazz.newInstance();<br>            //8.调用实例对象里面的方法<br>            my.init();<br>            my.service();<br>            my.destory();</pre><br></details><p>读取 src 下文件比较好的方式是用类加载器：</p><p>bean.xml 在 src 下时</p><p>String path = BeanFactory.class.getLorder().getResource(“”).getPath(“xxx.xml”);</p><p>读取 web 应用下最好的方式是用 this.getServletContext.getPath(“xxx”);</p><a id="more"></a><hr><h4 id="MySql-amp-JDBC"><a href="#MySql-amp-JDBC" class="headerlink" title="MySql &amp; JDBC"></a>MySql &amp; JDBC</h4><p>注册驱动：</p><p>用类加载器加载字符串描述的驱动类，将其加载到内存，该静态代码会自动执行</p><p>Class.forName(“com.mysql.jdbc.Driver”);</p><p>Driver 底层有着方法，静态代码块在类一加载就运行：static{java.sql.DriverManager.registerDriver(new Driver());}</p><p>会自动对自己进行注册</p><p>获取连接：</p><p>DriverManeger.getConnection(url,username,password);</p><p>limit 关键词查询</p><p>（limit 2，2）</p><p>第一个参数表示查询起始位置（要查第几页-1）*第二个参数</p><p>第二个参数表示每页显示的查询个数</p><p>例如一共 11条记录，每页3条记录，要查询第四页的内容</p><p>limit（（4-1）*3，3）–&gt;limit（9，3）</p><p>最后显示10与11两条记录</p><ul><li>limit 是左不包含的</li></ul><hr><h5 id="Mysql-语句"><a href="#Mysql-语句" class="headerlink" title="Mysql 语句"></a>Mysql 语句</h5><ol><li>左连接（LEFT JOIN ）</li></ol><p>SELECT M.columnname……,N.* columnname…..</p><p>FROM left_table M LEFT JOIN right_table N ON M.columnname_join=N.columnname_join AND N.columnname=XXX</p><p>WHERE M.columnname=XXX…..</p><p>左连接表示需要查询的数据条件即使不满足左边的表也可以查出左表的所有内容</p><ol start="2"><li>右连接</li></ol><p>SELECT M.columnname……,N.* columnname…..</p><p>FROM left_table M RIGHT JOIN right_table N ON M. columnname_join=N. columnname_join AND M. columnname=XXX</p><p>WHERE M.columnname=XXX…..</p><p>右连接与左连接相反，就算右表中有不符合查询条件的字段，也会出现在查询结果中。</p><ol start="3"><li>内连接</li></ol><p>只是嵌套的查询语句</p><p><a href="https://blog.csdn.net/wyzxg/article/details/7276979" target="_blank" rel="noopener">Mysql 左连接 右连接 等值连接</a></p><hr><h4 id="JDBC连接池-amp-DBUtils"><a href="#JDBC连接池-amp-DBUtils" class="headerlink" title="JDBC连接池&amp;DBUtils"></a>JDBC连接池&amp;DBUtils</h4><p>创建连接池时移除、增加操作多使用 LinkList，查询时使用 ArrayList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br></pre></td></tr></table></figure><p>创建连接池时会自动去寻找 c3p0-config.xml</p><p>DBUtil 是 JDBC 开发简化工具包，封装了 JDBC 操作，可以很多代码</p><h5 id="DBUtils-三个核心功能"><a href="#DBUtils-三个核心功能" class="headerlink" title="DBUtils 三个核心功能"></a>DBUtils 三个核心功能</h5><ol><li><p>QueryRunner：提供对 SQL 语句可操作 API</p><p>QueryRunner(DataSource ds) 提供数据源（连接池），DBUtils 底层自动维护连接 connection</p></li><li><p>update（String sql，Object … param），执行更新程序,参数可以多个</p></li><li><p>query（String sql，ResultSetHandler<t>rsh,Object … param)，执行查询（sql语句，处理结果，obj）参数可以多个</t></p></li></ol><p>ResultSetHandler 结果处理类：</p><p>BeanHandler ：将结果集中第一条记录封装到指定 javaBean</p><p>BeanListHandler : 将结果集中每一条记录封装到指定 javaBean，将这些 javaBean 封装到一个 List 集合</p><p>ScalarHandler : 用于单数据，例如 select count(*) from 表 的操作（返回表中某一条件的记录数）</p><hr><h4 id="会话技术-Cookie-amp-Session"><a href="#会话技术-Cookie-amp-Session" class="headerlink" title="会话技术 Cookie&amp;Session"></a>会话技术 Cookie&amp;Session</h4><p>Http 协议是无状态的，每个客户端访问服务器资源时，服务器并不知道客户端是谁，所以需要会话技术识别客户端</p><p>把无状态客户数据存储到服务器就是 session ，存到客户端本地就是 cookie</p><p>session 域是服务器端为每个客户端创建的私有的内存空间，而 servletContext 服务端只有一个，是公有的</p><p>从打开一个浏览器访问一个站点，到关闭这个浏览器的过程称为一次会话（需要把标签页全部关闭才算关闭浏览器）（面试）</p><p>域中可以存任何东西，包括对象。 cookie 中不能存对象，只能存字符串，而且不能为中文</p><h5 id="设置-Cookie-持久化时间"><a href="#设置-Cookie-持久化时间" class="headerlink" title="设置 Cookie 持久化时间"></a>设置 Cookie 持久化时间</h5><p>cookie.setMaxAge(int seconds) – 秒</p><p>如果不设置 cookie 的持久化时间，cookie 存储在浏览器内存中，浏览器关闭 cookie 信息销毁(会话级别 cookie)</p><p>如果设置持久化时间，cookie 会持久化到浏览器的磁盘文件中</p><h5 id="设置-Cookie-路径"><a href="#设置-Cookie-路径" class="headerlink" title="设置 Cookie 路径"></a>设置 Cookie 路径</h5><p>cookie.setPath(“/“);</p><p>如果不设置携带路径，则该 cookie 信息会在访问 设置该 cookie 的同级目录文件时携带该 cookie 信息（产生该 cookie 的 web 资源所在的路径）</p><h5 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h5><p>如果要 删除  Cookie ，则在同路径下设置一个同名 Cookie（只要 key 相同，value 无所谓） 并设置持久化时间为 0</p><h5 id="获得Cookie"><a href="#获得Cookie" class="headerlink" title="获得Cookie"></a>获得Cookie</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">            <span class="comment">//获得 cookie 名称</span></span><br><span class="line">            String cookieName = cookie.getName();</span><br><span class="line">            <span class="keyword">if</span>(cookie!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cookieName.equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line"><span class="comment">//                如果名称(key)等于 name 则获取其 value 值（zhangsan）</span></span><br><span class="line">                String cookieValue = cookie.getValue();</span><br><span class="line">                System.out.println(cookieValue);</span><br><span class="line">           &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>获取上次登陆时间出现网页报错</p><details><br>    <summary>错误信息 500</summary><br>    <p><br>        <pre><br>HTTP Status 500 – Internal Server Error<br>Type Exception Report<br>    Message An invalid character [32] was present in the Cookie value<br>Description<br>    The server encountered an unexpected condition that prevented it from fulfilling the      request.<br>Exception<br>    java.lang.IllegalArgumentException: An invalid character [32] was present in the Cookie value    org.apache.tomcat.util.http.Rfc6265CookieProcessor.validateCookieValue(Rfc6265CookieProcessor.java:182)<br>org.apache.tomcat.util.http.Rfc6265CookieProcessor.generateHeader(Rfc6265CookieProcessor.java:115)<br>    org.apache.catalina.connector.Response.generateCookieString(Response.java:1019)<br>    org.apache.catalina.connector.Response.addCookie(Response.java:967)<br>    org.apache.catalina.connector.ResponseFacade.addCookie(ResponseFacade.java:386)<br>com.itheima.cookie.ShowLastAccessTimeServlet.doGet(ShowLastAccessTimeServlet.java:60)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:635)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>    Note The full stack trace of the root cause is available in the server logs.<br>        </pre><br>    </p><br></details><p>​    </p><p>错误原因：传入 cookie 的日期设置中出现了空格，An invalid character [32] was present in the Cookie value  </p><p>32 就是空格的编码</p><p>解决：格式化日期时别加入空格</p><p>参考：<a href="https://blog.csdn.net/allan_liu_/article/details/74990162" target="_blank" rel="noopener">https://blog.csdn.net/allan_liu_/article/details/74990162</a></p><h5 id="Session-技术"><a href="#Session-技术" class="headerlink" title="Session 技术"></a>Session 技术</h5><p>session 技术是基于 cookie 技术的，session  有一个存储 session 编号的 JSESSIONID，servlet1 得到这个 JSESSIONID 把它返回给客户端，客户端根据这个编号去访问 servlet2 时传递这个编号，从而服务器可以知道这两个 servlet 访问来自一个客户端。coolkie 可以帮助 session  存储 JSESSIONID</p><p>此方法根据客户端在服务器有无 session，如果没有则创建一个 session，如有则返回该 session 的引用</p><p>HttpSession session = request.getSession();</p><h5 id="Session-对象生命周期（面试题）"><a href="#Session-对象生命周期（面试题）" class="headerlink" title="Session 对象生命周期（面试题）"></a>Session 对象生命周期（面试题）</h5><p>创建：第一次运行 request.getSession() 时</p><p>销毁：</p><ol><li><p>服务器（非正常）关闭（如果正常关闭服务器，session 会被监听器从内存钝化到磁盘上，但是这个 session值仍然存在）</p></li><li><p>session 过期/失效（默认30分钟）</p><p>在 tomcat  web.xml 中配置全局（一般在自己项目的 web.xml 配置，只有自己项目没配才会用 tomcat 的全局设置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;30&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><p>问：从何时开始的 30 分钟 session 算过期？</p><p>从不操作服务器端资源开始 30 分钟</p></li><li><p>手动销毁 session ，session.invalidate();</p></li></ol><p>面试题：浏览器关闭，session 就销毁了吗？</p><p>不对，session 的销毁方式只有 服务器关闭 跟 客户端一段时间不操作过期 才会销毁，跟客户端关闭与否无关</p><p>session 作用范围：默认一次会话中（访问服务器到关闭客户端），如果设置了 session 持久化，则在关闭浏览器后再次打开浏览器访问，还是能根据 JSESESSIONID 访问到原来的 session</p><p>session 一般不建议存放一些一次性信息，如错误提醒等，使用 request 这种销毁快的存放</p><p>登陆后 el 表达式无法获得 session 中的 name 值，页面后台无报错</p><p>解决：数据库查询名 跟 UserBean 的 name 不一致，导致查询后返回的 User username 属性值为空，无法再页面显示；并且 el 表达式获取某个值时，若为空，则显示为空，不会报错。</p><hr><h4 id="Servlet-amp-JSP"><a href="#Servlet-amp-JSP" class="headerlink" title="Servlet&amp;JSP"></a>Servlet&amp;JSP</h4><h5 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h5><p>Servlet: Service + let:</p><p>运行在服务端的 java 小程序，sun 公司提供的一套接口规范（接口），用来处理客户端请求响应给浏览器动态资源，实质就是 java 代码，放在服务器端，别人可以通过 http 协议访问此代码，通过 java API 动态向客户端输出内容。</p><p>servlet 规范三大组件：</p><ol><li>servlet 技术</li><li>filter 技术 – 过滤器</li><li>listener 技术 – 监听器</li></ol><p>实现步骤：</p><ol><li>创建类实现 Servlet 接口</li><li>覆盖尚未实现的方法 – 主要是 service 方法</li><li>在 web.xml 配置 servlet</li></ol><p>Serlvet 的 API(生命周期)</p><ol><li><p>Servlet 接口中的方法</p><p>init （ServletConfig config)</p><p>何时执行：servlet 对象创建时执行</p><p>ServletConfig ：代表该 Servlet 对象的配置信息</p><p>ServletConfig 可以获得 servlet 的 name 、servlet 的初始化参数、servletContext 对象</p></li><li><p>service（ServletRequest request，ServletResponse response）</p><p>何时执行：每次请求都会执行</p><p>ServletRequest:代表请求，内部封装的是 http 请求信息</p><p>ServletResponse 代表响应，认为内部要封装的是响应的信息</p></li><li><p>destory()</p><p>何时执行：servlet 销毁时执行</p></li></ol><p>Servlet 的生命周期（面试题）</p><ol><li><p>Servlet 何时创建</p><p>默认第一次访问 Servlet 时创建（Tomcat 等容器自动创建）</p><p>为什么说默认？</p><p>可以在 <servlet> 中配置 <load-on-start>1-5</load-on-start> 数字表优先级，servlet 对象可以在服务器启动时创建</servlet></p></li><li><p>Servlet 何时销毁</p><p>因为 Servlet 、request、response 等存在服务器内部（内存），服务器关闭 Servlet 就销毁了</p></li><li><p>每次访问必然执行的方法</p><p>service（ServletRequest req，ServletResponse resp） 方法</p></li></ol><p>问题：对 xxxServlet 进行了10次访问，init(),destory(),service(),doGet(),doPost() 一共执行几次？</p><p>request 、response 对象创建几个</p><p>url 配置错误会出现 404 异常，servlet-class 配置错误会出现 500 异常</p><servlet>其中的为 servlet 类的配置</servlet><p><servlet-mapping> 其中为 serlvet 虚拟路径配置</servlet-mapping></p><p><url-pattern> 配置方式</url-pattern></p><ol><li><p>完全匹配 访问资源与配置资源完全相同才能访问到 /xxx</p></li><li><p>目录匹配 /虚拟的目录../<em>         </em>代表任意</p></li><li><p>扩展名匹配 *.xxxx</p><p>目录匹配与扩展名匹配不能混用</p></li></ol><p>缺省的 Servlet</p><p>当服务器所有 servlet 与 访问的资源地址不匹配时，缺省的 servlet 负责处理</p><p>web 应用中所有的资源响应都是 servlet 提供的，包括静态资源</p><p>tomcat 下有一个默认的 缺省 Servlet，当访问静态资源时找不到动态资源，从而去你的 WEB-INF 目录下找静态资源 .html .jsp 等，然后用 wirte（）方法输出页面，如果在自己的 web.xml 配置了缺省 Servlet 则会覆盖 tomcat 的 缺省 Servlet 从而访问不到静态页面，404 异常 </p><p>欢迎页面：tomcat 配置默认 index.html index.htm index.jsp</p><hr><h5 id="ServletContext-对象"><a href="#ServletContext-对象" class="headerlink" title="ServletContext 对象"></a>ServletContext 对象</h5><p>ServletContext 对象代表一个 web 应用的环境（上下文）对象，ServletContext 对象内部封装的是 web 的应用信息</p><p>一个 web 应用有几个 servlet / ServletContext 对象：多个 Servlet，一个 ServletContext</p><p>ServletContext 对象的生命周期？</p><p>创建：该 web 应用被加载（服务器启动 或 服务器启动状态发布 web 引用）</p><p>销毁：web 应用被卸载（服务器关闭，移除该 web 应用）</p><p>怎么获得 Servlet 对象</p><ol><li>Servletconfig.getServletContext();</li><li>this.getServletContext();</li></ol><p>ServletContext 的作用</p><ol><li><p>获得 web 应用全局的 初始化参数</p><p>在 web.xml 中配置初始化参数后，用 context.getInitParameter(“name”) 获得</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.xxx.xxx<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>获得 web 应用中任何资源的绝对路径（重点）</p><p>WEB-INF 下的文件不能通过网址直接访问，可以通过代码访问</p></li></ol><p>   String 绝对路径 = ServletContext.getRealPath(“相对路径”); //此相对路径相对 WEB-INF</p><p>   获取 src（classes）下的资源绝对路径时应使用 tomcat 部署后的 相对路径</p><p>   String path =  ServletContext.getRealPath(“WEB-INF/classes/c.txt”);</p><p>   此外在读取src（classes）下的资源时可以使用类加载器方法</p><p>   String path = ContextServlet.class.getClassLoader().getResource(“c.txt”).getPath();//此相对路径相对于 部署在 tomcat 服务器后的 classes 路径</p><p>idea 下 tomcat java 包 class 文件导出路径：${user.home}/.IntelliJIdea/system/tomcat 可以根据 idea 中配置 tomcat （Project Structure）Artifact 中路径一致，</p><p>war 包专门用来传输服务器项目</p><ul><li>war模式这种可以称之为是发布模式，看名字也知道，这是先打包war包，再发布；</li><li>war exploded模式是直接把文件夹，jsp页面，classes等等移到Tomcat部署文件夹里面，进行加载部署。因此这种方式支持热部署，一般在开发的时候也是用这种方式。</li></ul><blockquote><p>参考：<a href="https://blog.csdn.net/qq_34328582/article/details/77932507" target="_blank" rel="noopener">https://blog.csdn.net/qq_34328582/article/details/77932507</a></p><p>参考：<a href="https://blog.csdn.net/weixin_36210698/article/details/72585429" target="_blank" rel="noopener">https://blog.csdn.net/weixin_36210698/article/details/72585429</a></p></blockquote><ol start="3"><li><p>ServletContext 是一个域对象（重点）</p><p>什么是域对象？什么是域？</p><p>域就是区域</p><p>存储数据的区域就是域对象</p><p>ServletContext 域对象的作用范围：整个 web 应用（所有 web 资源都可以随意向 servletContext 域中存取数据，数据可共享）</p><p>域对象的通用方法：</p><p>setAttribute(String name,Object obj);</p><p>getAttribute(String name);</p><p>removeAttribute(String name);</p></li></ol><hr><h4 id="Linux-下的项目部署："><a href="#Linux-下的项目部署：" class="headerlink" title="Linux 下的项目部署："></a>Linux 下的项目部署：</h4><h5 id="idea-导出-war-包，将-war-包放到-linux-的-tomcat-web-目录下"><a href="#idea-导出-war-包，将-war-包放到-linux-的-tomcat-web-目录下" class="headerlink" title="idea 导出 war 包，将 war 包放到 linux 的 tomcat/web 目录下"></a>idea 导出 war 包，将 war 包放到 linux 的 tomcat/web 目录下</h5><ol><li><p>Shift+Ctrl+Alt+S —&gt; 选择 Artifacts —&gt;</p></li><li><p>选择中间栏的绿色 + 号，选择 WebApplication:Archive /empty（empty 生成的是 war 包，exploded 生成的是 文件夹类型的热部署模式）—&gt;</p></li><li><p>点击右边的绿色 + 号，选择 Directory Content —&gt;上方可 Name 栏修改 war 包名称，OutPut Directory 修改 war包输出路径 —&gt;</p><p>现已完成除 classes 文件夹的 war 包配置 —&gt;</p></li><li><p>选中 war 包，点击上方黄色带红星的文件夹图标 创建 WEB-INF 和其 子目录 classes —&gt;</p></li><li><p>选中 classes 目录，点击上方（右侧）绿色 + 号，选择 Module Output —&gt;</p></li><li><p>全部确定后 在 build 中点击 BuildArtifacts，会将 war 包导出到刚才配置的路径下</p></li></ol><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/xlgen157387/article/details/56498938" target="_blank" rel="noopener">war 和 war exploded（热部署模式）的区别</a></p><p><a href="https://blog.csdn.net/lhp3000/article/details/78994010" target="_blank" rel="noopener">解决 war 包没有 classes 文件问题</a></p><p><a href="https://blog.csdn.net/u011291072/article/details/53232115" target="_blank" rel="noopener">idea 导出 jar 包</a></p></blockquote><h5 id="mysql-导出对应的-SQL-到-linux-的数据库中"><a href="#mysql-导出对应的-SQL-到-linux-的数据库中" class="headerlink" title="mysql 导出对应的 SQL 到 linux 的数据库中"></a>mysql 导出对应的 SQL 到 linux 的数据库中</h5><hr><h4 id="httpServletResponse"><a href="#httpServletResponse" class="headerlink" title="httpServletResponse"></a>httpServletResponse</h4><h5 id="通过-response-设置响应行："><a href="#通过-response-设置响应行：" class="headerlink" title="通过 response 设置响应行："></a>通过 response 设置响应行：</h5><p>response.setStatus(int sc);</p><h5 id="通过-response-设置响应头"><a href="#通过-response-设置响应头" class="headerlink" title="通过 response 设置响应头"></a>通过 response 设置响应头</h5><ol><li>add(set)Header(String name,String value); </li><li>add(set)IntHeader(String name,int value);</li><li>add(set)DateHeader(String name,Date value);</li></ol><p>add 表示添加，set 表示设置（相同 name 的新 value 会覆盖旧的）</p><h5 id="Response-重定向"><a href="#Response-重定向" class="headerlink" title="Response 重定向"></a>Response 重定向</h5><p>重定向状态码：302 </p><p>重定向响应头：location</p><p>重定向指客户端向 Servlet1 请求一个资源，Servlet1 没有这个资源，便告诉客户端去访问 Servlet2 ，然后 Servlet2 返回资源给客户端（客户端地址会发生变化，第一次访问 Servlet1 是客户端主动访问，重定向则是 tomcat 等服务器端自动跳转的）</p><ol><li><p>设置状态码302：response.setStatus(302);</p></li><li><p>设置响应头 location：response.setHeader(“location”,”url”);</p></li></ol><p>以上 2 个方法可以封装成一个重定向方法 response.sendRedirect(“url”);</p><h5 id="延时重定向方法：response-setHeader-“refleash”-”second-url”"><a href="#延时重定向方法：response-setHeader-“refleash”-”second-url”" class="headerlink" title="延时重定向方法：response.setHeader(“refleash”,”second;url”);"></a>延时重定向方法：response.setHeader(“refleash”,”second;url”);</h5><p>response.setHeader(“名称”,”几秒后跳转;地址”)；</p><h5 id="通过-response-设置响应体"><a href="#通过-response-设置响应体" class="headerlink" title="通过 response 设置响应体"></a>通过 response 设置响应体</h5><p>通过 response.getWriter().write(“xxx”); 将数据写入 response 的缓存区，然后 tomcat 的response 从缓存区获得数据，在引擎处将其拼接成 http 响应传给客户端</p><h5 id="response-解决乱码问题"><a href="#response-解决乱码问题" class="headerlink" title="response 解决乱码问题"></a>response 解决乱码问题</h5><ol><li><p>在数据写入 response 缓存区前设置，让其通过 response 查询 utf-8 的码表（设置 response 查询码表）</p><p>response.setCharacterEncoding(“utf-8”);</p></li><li><p>告知客户端用 utf-8 解码（通过一个头 Context-type 告知客户端使用何种码表）</p><p>“text/html”告知客户端文本是 html 类型，charset=utf-8 编码是 uft-8</p><p>response.setHeader(“Content-Type”,”text/html;charset=utf-8”);</p></li></ol><p>以上方法可以封装为 response.setContentType(“text/html;charset=utf-8”);</p><h5 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h5><p>文件下载就是服务器端到客户端的文件拷贝</p><p>什么情况下文件会下载？</p><p>浏览器不能解析的文件会下载</p><p>什么情况下需要编写文件下载代码？</p><p>理论上，浏览器可以解析的文件需要编写下载代码</p><p>实际开发中，只要是下载的文件都编写文件下载代码</p><p>response 获得的流不需要主动关，tomcat 容器会帮助我们关闭</p><p>getWriter() 与 getOutPutStream() 不能同时调用,</p><p>如果同时调用则会报 500 异常:</p><p>getOutPutStream() / getWriter() has been called for this response</p><p>window.onload 的匿名函数内部的函数属于局部私有函数，外部无法访问，所以 onclick 点击事件的函数不能放在 window.onload 内部</p><p>window.onload = function(){</p><p>​    function(){}</p><p>}</p><hr><h4 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h4><p>只有 form 表单提交，并且提交方式为 post 时才是 post 提交，请求体中有数据，其他方式都是 get 提交，请求体为空，数据在请求行</p><h5 id="通过-request-获得请求行"><a href="#通过-request-获得请求行" class="headerlink" title="通过 request 获得请求行"></a>通过 request 获得请求行</h5><p>request.getMethod(); – 获得请求方法 – get、post</p><p>request.getRequestURI(); – 一般指所有路径 – /项目名/应用名</p><p>request.getRequestURL(); – 一般指 web 的路径 – http:localhost:8080/项目名/应用名 – 会带上网络协议,多个主机名和主机端口</p><p>request.getContextPath(); – 指上下文路径（web 应用名称）</p><p>request.getQueryString(); – 获得请求行后的数据字符串，如果为 post 提交则为 null</p><p>request 可以获得客户机（客户端） 的一些信息</p><p>request.getRemoteAddr() – 获得访问客户端的 ip 地址</p><h5 id="通过-request-获得请求头"><a href="#通过-request-获得请求头" class="headerlink" title="通过 request 获得请求头"></a>通过 request 获得请求头</h5><p>request.getHeader(“”);– 获得指定的头</p><p>request.getHeader(“referer”);</p><p>获得请求来源，如 <a href="http://localhost:8080/web/xxx.html" target="_blank" rel="noopener">http://localhost:8080/web/xxx.html</a></p><p>再利用 startWith() 函数判断是否以自己的网站为开头，判断是否盗链</p><h5 id="通过-request-获得请求体"><a href="#通过-request-获得请求体" class="headerlink" title="通过 request 获得请求体"></a>通过 request 获得请求体</h5><p>获得单个表单值</p><p>String  request.getParameter(“”);</p><p>获得多个表单的值</p><p>String [] request.getParameterValues();</p><p>获得所有请求参数名称(没用)</p><p>Enmueration getParameterNames();</p><p>获得所有参数 封装到一个 Map&lt;String,String[]&gt;</p><p>Map&lt;String,String[]&gt; getParameterMap();</p><p>post、get 方式提交，以上方法通用</p><h5 id="request-其他功能"><a href="#request-其他功能" class="headerlink" title="request 其他功能"></a>request 其他功能</h5><p>request 是一个域对象</p><p>请求重定向（response.sendRedirect(); 服务器外部行为，需要客户端二次请求访问不同 servlet，地址会变）</p><p>请求转发</p><p>服务器内部行为，只有一次请求，servlet1 没有资源自己找 servlet2 ,把请求（request）转发给servlet2要资源，servlet2 返回给 客户端，地址不会发生变化</p><p>获得请求转发器， path 是转发地址</p><p>RequestDispatcher getRequestDispatcher(String path)</p><p>请求转发是在一次请求中，总计访问服务器一次，所以地址还会带有 web 根目录，不需要再添加 request.getContextPath()，来补全地址，重定向则需要</p><p>通过转发器对象转发</p><p>requestDispatcher.forward(ServletRequest,ServletResponse)–转发的数据在不同 servlet 就取不到域中的值了</p><p>请求转发是服务器内部行为，整个请求在 web 工程内部，可以直接写 /servlet2 相对路径，不用加工程名（服务器端地址，服务器内部的叫服务器端地址，不用写 web 应用名称）请求转发等</p><p>客户端去访问的叫客户端地址，服务器外部的地址，需要加上 web 应用名称：重定向、直接输入地址等</p><p>request 的域范围在一次请求中，每次访问（请求）都会创建一个新的 request 跟 response</p><p>dispatcher.forward(request,response);</p><p>转发 request 不论多少次都算一个请求（虽然都是不同对象，但是 request 内部的值是相同的）</p><p>转发性能优于重定向，重定向可以访问外部网站，转发只能访问内部的资源</p><p>request 在访问时创建，响应结束销毁，作用域一次请求</p><p>存在域中的数据都是 Object 类型的，getAttribute 获得的数据也是 Object，但若知道原来存进去的数据类型，取出来后可以进行强转</p><p>setAttribute(“string”,”object”);</p><p>Object getAttribute(“string”);</p><h5 id="解决-request-乱码问题"><a href="#解决-request-乱码问题" class="headerlink" title="解决 request 乱码问题"></a>解决 request 乱码问题</h5><p>获得页面数据乱码过程：</p><p>张三 —&gt; 页面进行 utf-8 编码 —&gt; request 获取数据进行 ios8859-1 解码（默认解码方式）—&gt; 乱码</p><p>解决乱码过程：</p><p>乱码 —&gt; 使用 ios8859 编码 —&gt; 使用 utf-8 解码 —&gt; 张三</p><p>编码方式：str.getByte(“ios8859-1”);</p><p>解码方式：new String(bytes,”utf-8”);</p><p>将编码和解码方式合并：new String(str.getByte(“iso8859-1”),”utf-8”);</p><p>以上方式可以解决 get 和 post 方式提交表单，但是需要对一个对象中每个字段进行编解码，如果在 Map 中的数据还需要在 for 循环中编解码。</p><p>但是 post 提交可以用更简便的 request.setCharacterEncoding(“utf-8”); 使用这种方式，只需要写一条，所有的字段都可以解决乱码</p><p>request.getParameter();</p><p>filter 配置 request 解决乱码问题参考：<a href="https://www.cnblogs.com/yyhl/p/9212301.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyhl/p/9212301.html</a></p><p>tomcat 8.5 等服务器 使用了过滤器配置 parameter = new String(parameter.getBytes(“iso8859-1”),”UTF-8”);</p><p>会乱码，因为 parmeter 获取到时已是中文，二次编解码会乱码</p><p>重定向是客户端重新访问一个 servlet ，属于客户端地址，所以重定向地址不应该固定,用 request 获得上下文路径（web 项目的路径）</p><p>response.sendRedirect(request.getContextPath”/web/xxx.jsp”);</p><h5 id="BeanUtils-的方法"><a href="#BeanUtils-的方法" class="headerlink" title="BeanUtils 的方法"></a>BeanUtils 的方法</h5><p>Map&lt;String,String[]&gt; properties = request.getParameterMap();</p><p>User user = new User();</p><p>BeanUtils.populate(user,properties);</p><p>工作原理：将 map 中的数据根据 key 与实体的属性对应关系封装</p><p>只要 key 中的属性与实体的属性名字相同，就自动封装到实体 </p><hr><h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><p> JAVA Server Page：是在 html 页面写入 java 代码，本质是一个 servlet ，作为简化的 servlet 而发明，擅长写页面，不擅长写 java 代码</p><p>在 java 代码中写入 html 页面，擅长写 java 代码，但是写页面比较繁琐，从而诞生了 JSP</p><h5 id="JSP-运行原理"><a href="#JSP-运行原理" class="headerlink" title="JSP 运行原理"></a>JSP 运行原理</h5><p>jsp 在第一次访问时（或被修改后）会被 web 容器（tomcat）翻译成 servlet （helloServlet.jsp–&gt;helloServlet_jsp.java）然后编译运行</p><p>被翻译后的文件在 tomcat 目录的 work 文件夹下</p><hr><h5 id="JSP-的-page-指令"><a href="#JSP-的-page-指令" class="headerlink" title="JSP 的 page 指令"></a>JSP 的 page 指令</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br></pre></td></tr></table></figure><p> <code>language=&quot;java&quot;</code></p><p>设置 JSP 插入语言，可以不写</p><p><code>contentType=&quot;text/html; charset=UTF-8&quot;</code></p><p>JSP 页面上的 contentType 在编译为 servlet  后会变成 response.setContentType(“text/html”;charset=”UTF-8”);</p><p>跟 servlet 中解决网页乱码问题的方法一致，可以用来设置 response 中缓冲区的编码，并知道页面解析时的编码</p><p>可以被包含在 pageEncoding 内</p><p><code>pageEncoding=&quot;UTF-8&quot;</code></p><p>JSP 文件本身的编码格式</p><p>isErrorPage/errorPage:</p><p>用来处理服务器端错误 （500错误），无法处理 400 找不到页面错误</p><p>404 错误用使用 web.xml 下配置应用的全局错误页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP 的 include 指令</p><p><code>&lt;%@ include file=&quot;header.jsp&quot;%&gt;</code></p><p>可以引入其他的 JSP 页面</p><p>开发时可以先写页面头跟尾，在重复引用即可</p><p>JSP 的 taglib 指令</p><p><code>&lt;%@ taglib uri=&quot;&quot; prefix=&quot;c&quot;%&gt;</code></p><p><code>&lt;c:if&gt; &lt;c:if&gt;</code></p><p>prefix:用来标记一个标签库，使用该标签库时就使用该标记</p><p>一般用来引入 jstl 标签库/struts2 标签库</p><hr><h5 id="JSP-九大隐式对象"><a href="#JSP-九大隐式对象" class="headerlink" title="JSP 九大隐式对象"></a>JSP 九大隐式对象</h5><p>4大域：</p><p>page 域 ：pageContext：当前 JSP 页面范围可见（A页面转发到B页面也无法取到）</p><p>request 域 ：一次请求（不包括返回）</p><p>session 域 ：一次会话</p><p>application 域 ：servletContext 的域 （整个 web 应用）</p><p>out：输出类型 JspWriter</p><p>out 作用：向客户端输出内容，out.write();</p><p>直接在 html 页面写数据、使用 <code>&lt;%out.write()%&gt;</code>以及<code>&lt;%=&quot;xxx&quot;&gt;</code>都会在servlet 转换成 out.write(“”);</p><p>并将数据放在 out 的缓冲区，out 缓冲区默认大小 8k 可以在<code>&lt;%@ page buffer=&quot;0kb&quot;%&gt;</code>设置关闭 out 缓冲区，从而使用 response</p><p>使用<code>&lt;%response.getWriter.write()%&gt;</code>则把数据放在 response 缓冲区，tomcat 默认从 response 获取数据，所以加载 response 数据会快一些，之后会将 out 缓冲区数据放到 response 缓冲区</p><p>pageContext：可以向不同域设置内容</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"name"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"sunba"</span>);</span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"lisi"</span>,pageContext.REQUEST_SCOPE);</span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"wangwu"</span>,pageContext.SESSION_SCOPE);</span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"tianqi"</span>,pageContext.APPLICATION_SCOPE);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;%--findAttribute 从小到大搜索域范围中的 name</span><br><span class="line"> 范围从小到大 page域(pageContext 对象)--&gt;request域--&gt;session域--&gt;application域(servletContext)--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=pageContext.findAttribute(<span class="string">"name"</span>)%&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="JSP-标签（动作）"><a href="#JSP-标签（动作）" class="headerlink" title="JSP 标签（动作）"></a>JSP 标签（动作）</h5><p>include1.jsp 与 include2.jsp</p><p>静态包含<code>&lt;%@include file=&quot;&quot;%&gt;</code></p><p>将 include2 的页面拷贝到 include1.jsp，再翻译成 include1_jsp.java</p><p>静态包含最终有一个文件</p><p>动态包含<code>&lt;jsp:include page=&quot;&quot;</code></p><p>将 include1.jsp 翻译成 include1_jsp.java 编译运行后 发现其中的 include(request,response,”include2.jsp”,out,false); 再回去找 include2.jsp</p><p>将 include2.jsp 翻译成 include2_jsp.java 再编译运行</p><p>动态包含有两个文件    </p><p><code>&lt;jsp:forward page=&quot;/forward2.jsp&quot;&gt;&lt;jsp:forward&gt;</code></p><p>请求转发，跟 request.getRequestDispatcher(“/forward2.jsp”).forward(request,response); 一致</p><p>将请求从 forward1.jsp 转发到 forward2.jsp 网址还是 forward1.jsp</p><p>内容显示 forward2.jsp</p><hr><h4 id="el-表达式"><a href="#el-表达式" class="headerlink" title="el 表达式"></a>el 表达式</h4><p>防止 jsp 中嵌入过多 java 代码，从而使用 el 表达式从域中取数据，逻辑判断用 JSTL 从而代替 java 代码</p><p>el 从域中取出数据（最重要的 el 功能）</p><p>全域查找：</p><p>各个域查找：</p><p>${requestScope.key };</p><p>${sessionScope.key };</p><p>${applicationScope.key };</p><p>全域查找：</p><p>${key};</p><p>底层是 application.findAttribute(); 方法，依次从 pageContext 域，request 域，session 域，application 域中获取属性，在某个域中获取到了则不再往后找</p><p>el 表达式没有内置 八大对象，需要用 pageContext 获取</p><p>pageContext 功能跟 jsp 类似，能获取八大对象</p><p>${pageContext.request }</p><p>${pageContext.request.contextPath }</p><p>等于 request.getContextPath(); 常用于重定向 response.sendRedirect(request.getContextPath()+”/product/xxx.jsp”);</p><p>用来获取 web 应用名称，通常用于拼接重定向目录 防止 web 应用名称修改后项目无法使用 如：</p><p>&lt; form action=”${pageContext.request.contextPath }/xxx/xxx.jsp” method=”post”&gt;</p><p>拼接的是访问地址 <a href="http://localhost:8080/admin/home.jsp" target="_blank" rel="noopener">http://localhost:8080/admin/home.jsp</a> 8080 后，/admin 前的这一段地址，在 ieda 修改这段地址的方法是在 tomcat 设置中 Deployment 栏 Application context 栏修改</p><p>客户端地址（一般 src 中获取外部链接，插入外来页、导入 css 包、获取图片等都是客户端地址）需要加上 web 应用名称，这样就是绝对地址</p><hr><h4 id="JSTL-技术"><a href="#JSTL-技术" class="headerlink" title="JSTL 技术"></a>JSTL 技术</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;c:if test=&quot;${1=1} &quot;&gt;&lt;c:if&gt;</code></p><p>当 test 中返回为 true 才会进入体内</p><p>模拟普通 for 循环</p><p>for(i=0;i&lt;5;i++){</p><p>}</p><p><code>&lt;c:forEach begin=&quot;0&quot; end=&quot;5&quot; var=&quot;i&quot;&gt;&lt;c:forEach&gt;</code></p><p>从 0 开始到 5 ，把每次循环的值赋给 i</p><p>模拟增强 for 循环</p><p>for(Product product : productList){</p><p>}</p><p>往 items 中放集合需要借助 el 表达式</p><p><code>&lt;c:forEach items=&quot;${productList }&quot; var=&quot;product&quot;&gt;${product.pname}&lt;c:forEach&gt;</code></p><p>循环取出 productList 集合中每项的 product 的 pname 属性</p><p>var 中的每一个数据都是临时存放在在 page 域中，循环过程中被下一个数据所覆盖</p><p>el 表达式中可以有空格，但表达式与冒号间不能有空格  <del>“${productList} “</del>(错误)</p><p>forEach 中的 varStatus </p><p>count 是从 1 开始循环计数的</p><p>index 从 0 开始</p><p>如果 items 中没有加 ${} 直接取值会报 </p><p>Caused by: javax.el.PropertyNotFoundException: Property [oid] not found on type [java.lang.String]</p><p>异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=&quot;$&#123;orderList &#125;&quot; var=&quot;order&quot; varStatus=&quot;vs&quot;&gt;</span><br><span class="line">$&#123;vs.count&#125;</span><br><span class="line">$&#123;vs.index&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="javaee-开发模式"><a href="#javaee-开发模式" class="headerlink" title="javaee 开发模式"></a>javaee 开发模式</h4><p>1.模式是开发过程中总结出的“套路”，约定俗成的设计模式</p><p>2.javaEE 的模式</p><ol><li><p>model1：jsp+javaBean：随着业务繁琐，导致 jsp 页面混乱</p></li><li><p>model2：jsp+servlet+javaBean：开发中使用各个技术擅长的方面</p><p>mvc：– web开发模式</p><p>M：model-模型：javaBean：封装数据</p><p>V： view-视图：Jsp：单纯页面显示</p><p>C：Controller-控制器：Servlet：获取数据-对数据封装-传递数据数据-指派显示页面</p></li></ol><h5 id="javaEE-的三层架构：–javaEE独有"><a href="#javaEE-的三层架构：–javaEE独有" class="headerlink" title="javaEE 的三层架构：–javaEE独有"></a>javaEE 的三层架构：–javaEE独有</h5><p>web层：与客户端交互：收集页面数据、封装数据、传递数据、指定响应 jsp 页面</p><p>service层：复杂业务处理：逻辑业务代码编写</p><p>dao层：与数据库交互：数据库访问代码</p><p>开发时体现在包结构</p><hr><h5 id="web-层的作用"><a href="#web-层的作用" class="headerlink" title="web 层的作用"></a>web 层的作用</h5><ol><li><p>接受客户端表单数据</p></li><li><p>封装散装数据成实体 bean，发送数据到 service 层</p><p>vo：value object 用来专门传递值，可以专门把 实体 bean 中不存在的判断条件封装一个新的 vo 对象 </p><p>例如condition 条件对象</p></li><li><p>接受 service 层返回的数据，并指定跳转页面</p></li></ol><h5 id="service-层作用"><a href="#service-层作用" class="headerlink" title="service 层作用"></a>service 层作用</h5><ol><li>接受 web 层传来的 bean 对象，并将其传给 dao 层</li><li>接受 dao 层返回的查询数据，将其返回给 web 层</li></ol><h5 id="dao-层作用"><a href="#dao-层作用" class="headerlink" title="dao 层作用"></a>dao 层作用</h5><ol><li>接受 service bean 对象，查询数据库数据</li><li>将查询到的数据返回给 service 层</li></ol><hr><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>一件事情有 n 个组成单元，要不这 n 个组成单元同时成功，要不就同时失败，就是将 n 个组成单元放到一个事务中</p><h5 id="Mysql-事务"><a href="#Mysql-事务" class="headerlink" title="Mysql 事务"></a>Mysql 事务</h5><p>mysql 有默认的事务：一条 sql 语句就是一个事务，默认开启事务并提交事务</p><p>手动 mysql 事务：</p><ol><li>显示开启一个事务： start transaction ：开启事务后所有 sql 语句不修改数据库，但保存在一个日志中，可查询</li><li>事务提交：commit 表示开启事务到事务提交内所有 sql 语句有效，并更新数据库</li><li>事务的回滚：rollback 表示事务回滚，总事务开启到事务回滚，中间所有 sql 操作无效，不更新数据库</li></ol><h5 id="JDBC-事务"><a href="#JDBC-事务" class="headerlink" title="JDBC 事务"></a>JDBC 事务</h5><p>默认自动事务，执行 SQL 语句：executeUpdate（），每执行一次 executeUpdate 代表事务自动提交</p><p>jdbc 开启手动事务：</p><ol><li>开启事务：conn.setAutoCommit(false);</li><li>提交事务：conn.commit();</li><li>回滚事务：conn.rollback();</li></ol><p>控制事务的 connection 必须是同一个，执行 sql 的 connection 与控制事务的 connection 必须是同一个，才能控制事务</p><h5 id="DBUtil-事务操作"><a href="#DBUtil-事务操作" class="headerlink" title="DBUtil 事务操作"></a>DBUtil 事务操作</h5><p>DBUtil 事务控制也是通过 JDBC （进行了封装）</p><p>QueryRunner runner = new QueryRunner(DataSource datasource); DateSource 会自动寻找 xml 中的数据库连接配置，从连接池中随机获取一个 Connection，随机的 conn 无法控制事务</p><p>有参构造将数据源（连接池）作为参数传入 QueryRunner，QueryRunner 会从连接池中获得一个数据库连接资源操作数据库，直接使用无 Connection 参数的方法即可操作数据库</p><p>如果要进行事务控制则使用无参 QueryRunner 构造,从而自己再方法体中获取一个 conn，利用确定的 conn 进行事务控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QueryRunner runner = new QueryRunner(）&#123;</span><br><span class="line">//用 JDBC 的方式获得一个 conn</span><br><span class="line">    Connection conn = DataSource.getConnection();</span><br><span class="line">    //用 conn 开启事务</span><br><span class="line">    conn.setAutoCommit(false);</span><br><span class="line">    </span><br><span class="line">    runner.update(conn,sql);</span><br><span class="line">    //提交事务或回滚</span><br><span class="line">    conn.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用 SQLException 无法 catch 到 1/0 异常，网页会产生如下异常，而且事务也无法控制住会丢失金额</p><details><br>    <summary>错误信息： Type Exception Report（点击详细信息）</summary><br>    <pre><br>    Type Exception Report<br>Message / by zero<br>    Description The server encountered an unexpected condition that prevented it from     fulfilling the request.<br>Exception<br>    java.lang.ArithmeticException: / by zero<br>    com.itheima.service.TransferService.transferMoney(TransferService.java:21)<br>    com.itheima.web.TransferServlet.doGet(TransferServlet.java:24)<br>    com.itheima.web.TransferServlet.doPost(TransferServlet.java:12)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:661)<br>    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>    Note The full stack trace of the root cause is available in the server logs.</pre><br></details><p>代码案例：DBUtilsDemo</p><p>公司接口：根据客户给出的参数从数据库查询出相关信息返回一个集合</p><hr><p>ThreadLocal ：javaEE三层架构间都是一个线程执行方法，ThreadLocal 底层是一个 Map，key 都为 Thread-1，只存储 value，应用：通过线程绑定方式传递参数（Connection）</p><hr><h5 id="事务的特性-面试题-（概念问题）"><a href="#事务的特性-面试题-（概念问题）" class="headerlink" title="事务的特性 面试题 （概念问题）"></a>事务的特性 面试题 （概念问题）</h5><h5 id="缩写（ACID）"><a href="#缩写（ACID）" class="headerlink" title="缩写（ACID）"></a>缩写（ACID）</h5><ol><li>原子性（Atomicity)原子性指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li><li>一致性（Consistency）一个事务中，事务前后的完整性必须保持一致</li><li>隔离性（Isolation）多个事务间的关系，隔离性指多用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要相互隔离（多个用户访问时每个用户都会有一个独立的ThreadLocal，那么每个 ThreadLocal 中存放的 Connection 也是不同的，可以保证每个 conn 控制一个事务）</li><li>持久性（Durability）持久性指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即时数据库发生故障也不会对其有任何影响</li></ol><h5 id="事务并发访问问题（由事务的隔离性引起）"><a href="#事务并发访问问题（由事务的隔离性引起）" class="headerlink" title="事务并发访问问题（由事务的隔离性引起）"></a>事务并发访问问题（由事务的隔离性引起）</h5><ol><li><p>脏读：B 事务读取到了 A 事务尚未提交的数据  –  需要 B 事务读取 A 事务已提交的数据</p><p>例：A 向 B 转账，B 读到了 A 未提交的转账记录，然后 A 将事务回滚，钱仍在 A 处</p></li><li><p>不可重复读：一个事务中 两次读取的事务不一致 – 需求一个事务中多次读取时数据是一致的 –update</p><p>例：在你开启事务后，你读取了自己银行卡的金额，发现有 5000 余额，此时你老婆刷走了 5000 块，你在这个事务中读取金额仍然还是显示 5000 余额，只有你关闭了这个事务，再次开启一个事务查询时才知道你已经是个穷鬼了</p></li><li><p>幻读/虚读：一个事务中 两次读取数据的数量不一致 – 要求在一个事务多次读取数据的数量是一致的 – insert delete</p><p>例：与不可重复读类似，在一次事务中，你读取自己银行卡的交易记录，一共有 4 条，此时你老婆刷了 5000 那一笔钱，你在这个事务中再次查询也无法看到这次消费，需要再开一个事务才能查询到</p></li></ol><h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h5><ol><li>read uncommited：读取尚未提交的数据–无法解决任何问题</li><li>read commited：读取已提交的数据–可以解决脏读 – oracle 默认</li><li>repeatable read：重复读取–可以解决脏读和不可重复读–mysql 默认</li><li>serializable：串行化–可以解决 脏读 不可重复读 和 虚读–相当于锁表，性能过低不使用</li></ol><hr><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>@override</p><p>帮助开发人员检查覆盖父类方法是否正确–给编译器用</p><p>@SuppressWarning(“rawtype”)</p><p>List list = new ArrayList(); </p><p>压制警告（忽略类型安全），压制警告括号内可以为数组，表示压制多个警告，也可以为 “all” 压制所有警告</p><p>@Deprecated</p><p>标注过时方法</p><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><p>修饰注解的注解，在注解类上使用，用来限制定义的注解的特性</p><p>@Target({TYPE,METHOD…,PARAMETER})</p><p>表示该注解可以用于哪些东西上</p><p>TYPE:可以用于类/接口上</p><p>METHOD：可以用于方法上</p><p>FIELD：字段上能用</p><p>java 代码运行过程：</p><p>demo.java(源码级别) —&gt; 经过编译器 —&gt; demo.class(字节码级别) —&gt; 经过类加载器 —&gt;Class(字节码对象，运行时级别)</p><p>@Retention(RetentionPolity.RUNTIME)</p><p>运行可见级别</p><p>SOURCE：源码级别可见</p><p>CLASS：字节码文件级别</p><p>RUNTIME：运行时级别</p><p><a href="https://www.cnblogs.com/wangmingshun/p/6411885.html" target="_blank" rel="noopener">Junit4 idea 测试设置</a></p><hr><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//反射获得方法</span><br><span class="line">Method method = clazz.getMethod(method,req,resp)</span><br><span class="line">xxx方法</span><br><span class="line"></span><br><span class="line">method.invoke()</span><br><span class="line"></span><br><span class="line">xxx方法</span><br></pre></td></tr></table></figure><p>在方法执行前后进行一些操作，就是面向切面编程</p><details><br>    <summary>获得动态代理对象(点击详细)</summary><br><pre><br>       //获得动态的代理对象—-在运行时 在内存中动态的为Target创建一个虚拟的代理对象<br>    //objProxy是代理对象 根据参数确定到底是谁的代理对象<br>TargetInterface objProxy = (TargetInterface) Proxy.newProxyInstance(<br>    Target.class.getClassLoader(), //与目标对象相同的类加载器<br>    new Class[]{TargetInterface.class},<br>    newInvocationHandler() {<br>            //invoke 代表的是执行代理对象的方法<br>            @Override<br>            //method：代表目标对象的方法字节码对象<br>            //args:代表目标对象的响应的方法的参数<br>            public Object invoke(Object proxy, Method method, Object[] args)                     throws Throwable {<br>                System.out.println(“目标方法前的逻辑”);<br>            //执行目标对象的方法<br>            Object invoke = method.invoke(new Target(), args);<br>            System.out.println(“目标方法后的逻辑”);<br>            return invoke;<br>        }<br>    }<br>);<br></pre><br></details><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-servlet-的转发页面空白无显示"><a href="#Q-servlet-的转发页面空白无显示" class="headerlink" title="Q: servlet 的转发页面空白无显示"></a>Q: servlet 的转发页面空白无显示</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"admin/product/list.jsp"</span>).forward(request,response);</span><br></pre></td></tr></table></figure><p>A:</p><p>如把代码写在 doGet 中需要在 doPost 中进行 doGet 覆盖，或把代码写在 doPost 中，在 doGet 进行 doPost 覆盖</p><h5 id="Q-在-servlet-设置断点无法进断点，后台、网页无报错"><a href="#Q-在-servlet-设置断点无法进断点，后台、网页无报错" class="headerlink" title="Q:在 servlet 设置断点无法进断点，后台、网页无报错"></a>Q:在 servlet 设置断点无法进断点，后台、网页无报错</h5><p>A:如果无法进入断点说明问题在于 页面，</p><p>参数无法传递到后台</p><p>可能的错误有：json 参数传递语句错误、JQuery 的 ajax 语句 $.post(); 写成 $post.{}; 等</p><hr><h5 id="Q-java-lang-NoSuchMethodException"><a href="#Q-java-lang-NoSuchMethodException" class="headerlink" title="Q:java.lang.NoSuchMethodException"></a>Q:java.lang.NoSuchMethodException</h5><p>A:</p><p>如果在整合 servlet 时没有将内部方法的 protect 变成 public 则会出现此问题</p><hr><h5 id="Q-java-io-FileNotFoundException-xx-xx-拒绝访问。"><a href="#Q-java-io-FileNotFoundException-xx-xx-拒绝访问。" class="headerlink" title="Q:java.io.FileNotFoundException: .\xx\xx (拒绝访问。)"></a>Q:java.io.FileNotFoundException: .\xx\xx (拒绝访问。)</h5><p>A:</p><p>一般这种情况是访问的是一个文件目录而不是文件</p><p>参考：<a href="https://blog.csdn.net/w405722907/article/details/78610485" target="_blank" rel="noopener">https://blog.csdn.net/w405722907/article/details/78610485</a></p><hr><h5 id="Q-Data-truncation-Incorrect-datetime-value-‘’"><a href="#Q-Data-truncation-Incorrect-datetime-value-‘’" class="headerlink" title="Q:Data truncation: Incorrect datetime value: ‘’"></a>Q:Data truncation: Incorrect datetime value: ‘’</h5><p>A:</p><p>存入的 Date 与数据库 Date 格式不符，setDate() 前先进行 Date 格式化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">//SimpleDateFormat中的format方法可以 </span><br><span class="line">//把Date型的字符串转换成特定格式的String类型</span><br><span class="line">                String format = simpleDateFormat.format(new Date());</span><br><span class="line">                //SimpleDateFormat中的parse方法可以  </span><br><span class="line">//把String型的字符串转换成特定格式的date类型  </span><br><span class="line">                Date parse = simpleDateFormat.parse(format);</span><br><span class="line"></span><br><span class="line">//将转换格式的 Date 存入 product</span><br><span class="line">                product.setPdate(parse);</span><br></pre></td></tr></table></figure><hr><p>Q:表单中 <tr> 循环显示,只显示最后一组 tr 的内容，且标题 tr 项不显示</tr></p><p>A: 标题 tr 项写错内容，与数据的 <tr> 项不一致</tr></p><hr><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><p>一般没有 request 域数据传递使用 重定向 response.sendRedirect(request.getContextPath());（后台地址获取直接 request.getContextPath()）</p><p>有 request 域传递数据的使用 请求转发request.getRequestDispatcher(“admin/product/list.jsp”).forward(request,response+“/admin/product/list.jsp”);</p><hr><p>如果在注解中配置了 urlPatterns 地址跟 重定向 response.sendRedrest(path); 的地址相同，则会出现死循环，网页提示重定向次数过多，如果提交了表单， 数据库会出现多个空白数据，需要进行空表单验证</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取表单数据</span></span><br><span class="line">Map&lt;String, String[]&gt; properties = request.getParameterMap();</span><br><span class="line"><span class="comment">//封装数据</span></span><br><span class="line">Product product = <span class="keyword">new</span> Product（）；</span><br><span class="line">BeanUtils.populate(product,properties);</span><br></pre></td></tr></table></figure><p>此方法会将表单提交的属性根据 name 值 与 Bean 的属性名 对应起来，然后将表单提交的属性封装成一个 Bean</p><hr><p>a 标签有自己内置的点击事件，如果 a 标签有 href 属性，在点击后会自动跳转到页面头</p><p>阻止事件传播：</p><p># 代表本页面</p><p><code>&lt;a href=&quot;#&quot; onclick=&quot;delProduct()&quot;&gt;&lt;a/&gt;</code></p><p>将 href 中内容改为 javascript:void(0);</p><p><code>&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;delProduct()&quot;&gt;&lt;a/&gt;</code></p><p>可以防止点击 a 标签后默认样式的 href 无任何行为 </p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=<span class="string">"cid"</span>&gt;</span><br><span class="line"> &lt;c:forEach items=<span class="string">"$&#123;categoryList &#125;"</span> <span class="keyword">var</span>=<span class="string">"category"</span>&gt;</span><br><span class="line">     </span><br><span class="line">  &lt;option value=<span class="string">"$&#123;category.cid &#125;"</span>&gt;</span><br><span class="line">   $&#123;category.cname &#125;</span><br><span class="line">  &lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> &lt;/</span>c:forEach&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br></pre></td></tr></table></figure><p>items 的值与 servlet 中 setAttribute 的值名相同，var 为循环 items 的值后单个的值</p><hr><p>不让用户看到，但是后台需要某个属性时，使用隐藏域传递数据</p><p><code>&lt;input type=&quot;hidden&quot; name=&quot;pid&quot; value=&quot;${product.pid}&quot;/&gt;</code></p><p>传递 pid 的值到 servlet</p><p><code>Map&lt;String,String[] properties = request.getParameterMap();</code></p><p>将前台的属性全部获取，以便之后进行对象的封装</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enctype=&quot;multipart/form-data</span><br></pre></td></tr></table></figure><p>如果在 form 中有如上代码，页面能跳转，但是修改不回生效</p><hr><p>当 form 使用 enctype=”multipart/form-data” 多表单提交时，getParameter 将无法获取到值，根据 getMethod（） 取值的 BaseServlet 方式抽取 Servlet 会获取不到 method， 需要重新创建继承 HttpServlet 的文件上传</p><hr><p>从数据库查询多表或单表的数据时，可以直接封装 map 而不是对象，以 json 字符串返回前台</p><hr><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><a href="https://github.com/crow-song/crow-song.github.io/tree/master/codeDemos/myWeb_demo/WEB20" target="_blank" rel="noopener">web核心内容</a></p><p><a href="https://github.com/crow-song/crow-song.github.io/tree/master/codeDemos/myWeb_demo/WebShop" target="_blank" rel="noopener">商城小demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;xml-amp-反射&quot;&gt;&lt;a href=&quot;#xml-amp-反射&quot; class=&quot;headerlink&quot; title=&quot;xml&amp;amp;反射&quot;&gt;&lt;/a&gt;xml&amp;amp;反射&lt;/h4&gt;&lt;p&gt;DTD 文件 document type definition ：文档类型定义&lt;/p&gt;
&lt;p&gt;用于约束（约定/规定）xml 文档的格式&lt;/p&gt;
&lt;p&gt;Scheme 文件，后缀名 .xsd 是 DTD 文件的升级类型，功能比 DTD 文件更多&lt;/p&gt;
&lt;p&gt;DOM:将文档一次加载到内存形成树形结构，进行解析，解析成一个 Document 对象&lt;/p&gt;
&lt;p&gt;SAX：Simple API for XML ：事件驱动的方式，边读边解析&lt;/p&gt;
&lt;h5 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h5&gt;&lt;p&gt;JAVA 反射机制指在运行过程中，对于任意一个类，都能知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性&lt;/p&gt;
&lt;p&gt;使用反射可以在运行时 (在内存中操作代码) 对 .class 类文件中的字节码（机器代码）进行修改。在运行时对类 Class 、构造方法 Constructor、普通方法 Method、字段 field 进行操作。&lt;/p&gt;
&lt;details&gt;&lt;br&gt;    &lt;summary&gt;反射获得 xml 配置文件中的 Servlet 类，对其进行方法调用（点击详细）&lt;/summary&gt;&lt;br&gt;    &lt;pre&gt;//1.创建解析器对象&lt;br&gt;            SAXReader saxReader = new SAXReader();&lt;br&gt;            //2.使用解析器加载web.xml文件得到document对象&lt;br&gt;            Document document = saxReader.read(“src/cn/itheima/web/servlet1/web.xml”);&lt;br&gt;            //3.获取根元素节点&lt;br&gt;            Element rootElement = document.getRootElement();&lt;br&gt;            //4.根据元素名称获取子元素节点&lt;br&gt;            Element servletElement = rootElement.element(“servlet”);&lt;br&gt;            //5.根据元素名称获取servlet-class的文本节点&lt;br&gt;            String servletClass = servletElement.element(“servlet-class”).getText();&lt;br&gt;            //System.out.println(servletClass);&lt;br&gt;            //6.通过类全名获取字节码文件&lt;br&gt;            Class clazz = Class.forName(servletClass);&lt;br&gt;            //7.创建实例对象&lt;br&gt;            MyServlet1 my = (MyServlet1) clazz.newInstance();&lt;br&gt;            //8.调用实例对象里面的方法&lt;br&gt;            my.init();&lt;br&gt;            my.service();&lt;br&gt;            my.destory();&lt;/pre&gt;&lt;br&gt;&lt;/details&gt;


&lt;p&gt;读取 src 下文件比较好的方式是用类加载器：&lt;/p&gt;
&lt;p&gt;bean.xml 在 src 下时&lt;/p&gt;
&lt;p&gt;String path = BeanFactory.class.getLorder().getResource(“”).getPath(“xxx.xml”);&lt;/p&gt;
&lt;p&gt;读取 web 应用下最好的方式是用 this.getServletContext.getPath(“xxx”);&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>SomeProblem</title>
    <link href="http://yoursite.com/2018/12/11/SomeProblems/"/>
    <id>http://yoursite.com/2018/12/11/SomeProblems/</id>
    <published>2018-12-11T07:34:58.000Z</published>
    <updated>2018-12-11T07:42:36.357Z</updated>
    
    <content type="html"><![CDATA[<p>serlvet 提交 post 乱码解决方法：</p><p>request.setCharacterEncoding(“UTF-8”); 或者使用先编后解码方式解决</p><p>Jquery post 提交已经自动进行过编解码，不需要再写，如果二次编解码反而会乱码</p><p>get 提交乱码：</p><p>先编码再解码</p><p>JQuery get 中文提交乱码：</p><p>先编码后解码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;serlvet 提交 post 乱码解决方法：&lt;/p&gt;
&lt;p&gt;request.setCharacterEncoding(“UTF-8”); 或者使用先编后解码方式解决&lt;/p&gt;
&lt;p&gt;Jquery post 提交已经自动进行过编解码，不需要再写，如果二次编解码反而会乱码&lt;/p
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>springMVC32</title>
    <link href="http://yoursite.com/2018/10/30/springMVC32/"/>
    <id>http://yoursite.com/2018/10/30/springMVC32/</id>
    <published>2018-10-30T13:25:15.000Z</published>
    <updated>2019-01-02T11:17:21.565Z</updated>
    
    <content type="html"><![CDATA[<h4 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h4><p>流程参考：<a href="https://juejin.im/post/5af15128518825673954af47" target="_blank" rel="noopener">IDEA整合SSM框架：Spring+SpringMVC+Mybatis</a></p><h5 id="入门-Springmvc-流程"><a href="#入门-Springmvc-流程" class="headerlink" title="入门 Springmvc 流程"></a>入门 Springmvc 流程</h5><ol><li><p>Web 工程</p></li><li><p>导入 jar 包</p></li><li><p>web.xml 中配置前端控制器（指定上下文路径 classpath：springmvc.xml） </p><p>拦截规则 </p><ol><li>拦截所有（包括 Jsp）：/*</li><li>拦截除了 JSP 以外部分 : /</li><li><em>.action 或 </em>.do</li></ol></li><li><p>springmvc.xml 配置扫描 @controller 注解</p></li><li><p>Action Controller Handler 处理器    需要写的部分：类上@Controller  方法上 @RequestMapping（Value=请求的路径）.action 可以省略</p><p>Public ModelAndView itemList(){</p><p>​    new ModelAndView </p><p>​    设置数据</p><p>​    设置 JSP 页面路径（跳转路径     /WEB-INF/jsp/xxx.jsp）</p><p>}</p></li></ol><h5 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h5><p>一个中心                            三个基本点</p><p>前端控制器（在 web.xml 中配置）     处理器映射器 处理器适配器 视图解释器        由 Springmvc 提供</p><p>Handler 处理器    JSP 视图（页面，即 html 标签）            由程序员书写</p><h5 id="默认三大组件"><a href="#默认三大组件" class="headerlink" title="默认三大组件"></a>默认三大组件</h5><p>默认三大组件已废弃</p><p>现组件：RequestMappingHandlerMapping (处理器映射器)</p><p>RequestMappingHandlerAdapter (处理器适配器)</p><p>可用 <code>&lt;mvc:anonation-driver/&gt;</code> 代替 处理器映射器 和 处理器适配器的配置</p><p>视图解释器 用来优化 JSP 页面的路径书写 /WEB-INF/jsp/xxx.jsp  可以拼接 xxx 的前后缀</p><h5 id="整合-mybatis"><a href="#整合-mybatis" class="headerlink" title="整合 mybatis"></a>整合 mybatis</h5><ol><li><p>SqlMapConfig.xml 核心配置文件（别名）</p></li><li><p>applicationContent.xml 数据源 druid （替代 JDBC）读取 db.properties   Mybatis 的工厂以及</p><p>Mybaits Mapper 动态代理开发的扫描方式 扫描基本包</p></li><li><p>创建 db.properties 文件</p></li><li><p>事务、扫描@Service     Spring+Mybatis</p></li><li><p>创建 Springmvc.xml 三大组件  扫描基本包（com.itheima  包下 controller 与 Service 全扫描）</p></li><li><p>web.xml 文件中配置监听器读取 applicationContext.xml 上下文  配置前端控制器读取 Spingmvc.xml  </p><p>配置 POST 提交乱码 Fittler 过滤器</p></li></ol><h5 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h5><ol><li><p>默认参数绑定        Request      Response    Session    Model  实现关系 ModelMap</p></li><li><p>简单类型参数绑定   方法的形参上（Integer id String Double double Boolean）</p></li><li><p>POJO 类型 Items items    input name = name      name 与 items 对象中属性名一致</p></li><li><p>包装类型 QueryVo （内含 Items） Query Vo        items.name （传参方式）</p></li><li><p>自定义参数格式 转换日期：在 Springmvc.xml 配置转换器的工厂 Converters list set array<bean class="" 自定义转换器类=""></bean></p><p>创建自定义转换器类 实现 Converter&lt;S,T&gt;</p></li></ol><h5 id="Strus2-与-Springmvc-区别"><a href="#Strus2-与-Springmvc-区别" class="headerlink" title="Strus2 与 Springmvc 区别"></a>Strus2 与 Springmvc 区别</h5><ol><li>入口 Servlet 与 Fittler</li><li>单例 多例</li><li>值    Request域</li></ol><h5 id="controller-返回值"><a href="#controller-返回值" class="headerlink" title="controller 返回值"></a>controller 返回值</h5><ol><li>ModelAndView 万能的   带数据   返回视图路径后结束</li><li>String     只能返回视图路径  需要通过方法传参数 Model model，通过 model 带数据 request.setAttribute(),model.addAttribute(“itemsList”,list);   官方推荐 符合解耦合 数据 视图 分离 MVC</li><li>void     ajax  请求 适合返回 json 格式数据（response 异步请求使用，不用刷页面）</li></ol><h5 id="重定向与内部转发区别"><a href="#重定向与内部转发区别" class="headerlink" title="重定向与内部转发区别"></a>重定向与内部转发区别</h5><p>重定向的页面在提交后会跳转到 重定向的路径（网址）</p><p>内部转发的页面在提交后不会跳转 会在修改页面的路径（网址）</p><p>SpringMVC 三大组件 处理器映射器（HandlerMapping）、视图解析器(ViewResolver) 、处理器适配器(HandlerAdapter)</p><a id="more"></a><p>三大组件的默认配置文件 </p><p>/springmvc32/web/WEB-INF/lib/spring-webmvc-4.1.3.RELEASE.jar!/org/springframework/web/servlet/DispatcherServlet.properties</p><p>在 springmvc 的配置文件中修改默认配置 </p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描 @Controller @Service --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 处理器映射器 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 处理器适配器 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 注解驱动:可以替代以上两个配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 跟 ItemController 的 setViewName 中的内容拼接成完整地址 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ItemServiceImpl 中实现接口，并覆写实现方法</p><p>将方法放到接口 ItemService</p><p>controller 控制层中 @RequestMapping(value=”/网页中的 form 中 action 相对地址”)</p><p>jsp 中 input 的 name 属性中的内容与接受的 Items（bean）的 name 属性一致</p><p>jsp 页面上的 name 属性名的参数绑定与 Controller 中传入的 POJO 形参名无关，而是属性名与 POJO 对象中的成员变量名一致</p><p>​    但是如果将 POJO 进行了包装，将 Items 类封装到 Vo 类中，Vo 类中有着获取、修改 Items 类的方法，则在 jsp 页面的 name 属性名的参数绑定将变为 Items.（Items 类中的成员变量名） 例如：Items.name</p><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q1-idea-编译出现-“文档中根元素后面的标记必须格式正确”-字样错误提示"><a href="#Q1-idea-编译出现-“文档中根元素后面的标记必须格式正确”-字样错误提示" class="headerlink" title="Q1: idea 编译出现 “文档中根元素后面的标记必须格式正确” 字样错误提示"></a>Q1: idea 编译出现 “文档中根元素后面的标记必须格式正确” 字样错误提示</h5><p>A: 这个错误一般是元素未正确结束，或者出现未知元素造成的 . 提示这行不代表就是这行，提示是告诉你这个元素有问题，这个元素下面的任何子元素都可能存在问题</p><p>错误点：未将 <servlet></servlet> 等代码放入<webapp></webapp> 栏</p><h5 id="Q2-运行后网页提示错误："><a href="#Q2-运行后网页提示错误：" class="headerlink" title="Q2: 运行后网页提示错误："></a>Q2: 运行后网页提示错误：</h5><p>​    org.xml.sax.SAXParseException; lineNumber: 10; columnNumber: 9; cvc-complex-type.2.3: 元素 ‘beans’ 必须不含字符 [子级], 因为该类型的内容类型为“仅元素”。</p><p>A: 在 <beans></beans> 标签中多了一个 、</p><h5 id="Q3-debug-报错："><a href="#Q3-debug-报错：" class="headerlink" title="Q3: debug 报错："></a>Q3: debug 报错：</h5><p>​    org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</p><p>A: 在apache-tomcat-8.5.29\conf目录下找到logging.properties文件，对文件进行编辑，在最后一行加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样就不再显示错误信息了。</span><br><span class="line"></span><br><span class="line">http://blog.51cto.com/lavasoft/2087440</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### Q4: Tomcat 8报错 SEVERE: One or more listener failed to start</span><br><span class="line"></span><br><span class="line">​06-Nov-2018 17:26:46.429 信息 [RMI TCP Connection(3)-127.0.0.1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span><br><span class="line">​06-Nov-2018 17:26:46.465 严重 [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start. Full details will be found in the appropriate container log file</span><br><span class="line">​06-Nov-2018 17:26:46.468 严重 [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal Context [] startup failed due to previous errors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A: </span><br><span class="line"></span><br><span class="line">&gt; Full details will be found in the appropriate container log file 意思是让我们在日志文件中查看详细报错信息，那日志文件在哪里呢？这里如果我们是使用idea调试，则日志文件存放在C:\Users\Administrator\.IntelliJIdea2017.1\system\tomcat\Unnamed_SpringMVCDemo\logs</span><br><span class="line"></span><br><span class="line"> 详细问题在 logs 文件夹的几个日志文件中</span><br><span class="line"></span><br><span class="line">参考：https://blog.csdn.net/dkbnull/article/details/81605157 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; If you are using IntelliJ IDEA, and deploy application on Tomcat Server, it says: Under File menu -&gt; select project Structure -&gt; click artifact -&gt; select your jars and right click -&gt; put in WEB\lib -&gt; restart server</span><br><span class="line"></span><br><span class="line">参考：https://stackoverflow.com/questions/6210757/java-lang-classnotfoundexception-org-springframework-web-context-contextloaderl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### Q5: 启动服务后网页报错</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;itemController&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.itheima.springmvc.service.ItemService com.itheima.springmvc.controller.ItemController.itemService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.itheima.springmvc.service.ItemService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&#125;</span><br></pre></td></tr></table></figure><p>A: </p><p>spring在管理创建bean的时候发生了错误，一是检查注解是否正确@Service;二是看看web.xml中配置的 spring容器的 xml 文件是否错误</p><p>未添加 ItemServiceImpl 的 @Service 注释</p><p>参考：<a href="https://blog.csdn.net/zxz9325/article/details/79179444" target="_blank" rel="noopener">https://blog.csdn.net/zxz9325/article/details/79179444</a></p><p>Q6: </p><p>HTTP Status 500 – Internal Server Error</p><p><strong>Type</strong> Exception Report</p><p><strong>Message</strong> Request processing failed; nested exception is java.lang.NumberFormatException: null</p><p><strong>Description</strong> The server encountered an unexpected condition that prevented it from fulfilling the request.</p><p><strong>Exception</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NumberFormatException: null</span><br></pre></td></tr></table></figure><p>A: 应该打开查询网页 <a href="http://localhost:8080/itemEdit.action" target="_blank" rel="noopener">http://localhost:8080/itemEdit.action</a> 而非直接打开 <a href="http://localhost:8080/item/itemEdit.action，无法直接访问，而且没有传" target="_blank" rel="noopener">http://localhost:8080/item/itemEdit.action，无法直接访问，而且没有传</a> id 导致为空</p><h5 id="Q7-运行后显示-404"><a href="#Q7-运行后显示-404" class="headerlink" title="Q7: 运行后显示 404"></a>Q7: 运行后显示 404</h5><p><strong>Type</strong> Status Report</p><p><strong>Description</strong> The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><p>A: <a href="http://blog.csdn.net/DBC_121/article/details/79204340" target="_blank" rel="noopener">http://blog.csdn.net/DBC_121/article/details/79204340</a></p><p>@requestMapping(value=””) 中 value 地址书写错误</p><h5 id="Q8-HTTP-Status-400-–-Bad-Request"><a href="#Q8-HTTP-Status-400-–-Bad-Request" class="headerlink" title="Q8:HTTP Status 400 – Bad Request"></a>Q8:HTTP Status 400 – Bad Request</h5><p><strong>Type</strong> Status Report</p><p><strong>Description</strong> The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).</p><p>A: jsp 页面上的 name 属性名的参数绑定与 Controller 中传入的 POJO 形参名无关，而是属性名与 POJO 对象中的成员变量名一致,如果不一致则在后台获取不到参数</p><h5 id="Q9-jsp-页面-name-属性名应与-POJO-内部成员变量一致"><a href="#Q9-jsp-页面-name-属性名应与-POJO-内部成员变量一致" class="headerlink" title="Q9:jsp 页面 name 属性名应与 POJO 内部成员变量一致"></a>Q9:jsp 页面 name 属性名应与 POJO 内部成员变量一致</h5><p>HTTP Status 500 – Internal Server Error</p><p><strong>Type</strong> Exception Report</p><p><strong>Message</strong> Request processing failed; nested exception is java.lang.NullPointerException</p><p><strong>Description</strong> The server encountered an unexpected condition that prevented it from fulfilling the request.</p><p>A: 将 POJO 进行包装后没有在 jsp 页面进行 name 属性修改</p><p>如果将 POJO 进行了包装，将 Items 类封装到 Vo 类中，Vo 类中有着获取、修改 Items 类的方法，则在 jsp 页面的 name 属性名的参数绑定将变为 Items.（Items 类中的成员变量名） 例如：Items.name</p><h5 id="Q10-自定义异常错误"><a href="#Q10-自定义异常错误" class="headerlink" title="Q10:自定义异常错误"></a>Q10:自定义异常错误</h5><p>HTTP Status 500 – Internal Server Error</p><hr><p><strong>Type</strong> Exception Report</p><p><strong>Message</strong> Request processing failed; nested exception is java.lang.ClassCastException: java.lang.ArithmeticException cannot be cast to com.itheima.springmvc.exception.MessageException</p><p><strong>Description</strong> The server encountered an unexpected condition that prevented it from fulfilling the request.</p><p><strong>Exception</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.ClassCastException: java.lang.ArithmeticException cannot be cast to com.itheima.springmvc.exception.MessageException</span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978)</span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:635)</span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)</span><br><span class="line">org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">org.apache.logging.log4j.core.web.Log4jServletFilter.doFilter(Log4jServletFilter.java:66)</span><br></pre></td></tr></table></figure><p><strong>Root Cause</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.lang.ArithmeticException cannot be cast to com.itheima.springmvc.exception.MessageException</span><br><span class="line">com.itheima.springmvc.exception.CustomExceptionResolver.resolveException(CustomExceptionResolver.java:19)</span><br><span class="line">org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1167)</span><br><span class="line">org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1004)</span><br><span class="line">org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:955)</span><br><span class="line">org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)</span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)</span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:635)</span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)</span><br><span class="line">org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">org.apache.logging.log4j.core.web.Log4jServletFilter.doFilter(Log4jServletFilter.java:66)</span><br></pre></td></tr></table></figure><p><strong>Note</strong> The full stack trace of the root cause is available in the server logs.</p><p>A：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e <span class="keyword">instanceof</span> MessageException)&#123;</span><br><span class="line">    MessageException me = (MessageException)e;</span><br><span class="line">    mav.addObject(<span class="string">"error"</span>,me.getMsg());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    mav.addObject(<span class="string">"error"</span>, <span class="string">"未知异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line">mav.setViewName(<span class="string">"error"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br></pre></td></tr></table></figure><hr><h4 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h4><h5 id="intelj-idea-添加本地-xsd-文件"><a href="#intelj-idea-添加本地-xsd-文件" class="headerlink" title="intelj idea 添加本地 xsd 文件"></a>intelj idea 添加本地 xsd 文件</h5><p>​     <a href="https://blog.csdn.net/u012181236/article/details/44455555" target="_blank" rel="noopener">intellij idea配置外部dtd文件</a></p><p>​    打开file——Settings..(快捷键ctrl+alt+s);</p><p>​    找到Languages&amp;Frameworks——Schemas and DTDs</p><p>​    找到右侧的External Schemas and DTDs窗口中点击添加按钮</p><p>​    在 Explorer 栏找到下载好的外部 dtd 文件</p><p>​    在 URI 栏可以填入从 xml 文件头上找到的相对应约束 URI</p><p>​    </p><h5 id="intelj-idea-jar-包-导入"><a href="#intelj-idea-jar-包-导入" class="headerlink" title="intelj idea jar 包 导入"></a>intelj idea jar 包 导入</h5><p>​    <a href="https://www.jb51.net/article/145327.htm" target="_blank" rel="noopener">导入 jar 包 3种方法</a></p><h5 id="intelj-idea-中的-mybatis-逆向工程"><a href="#intelj-idea-中的-mybatis-逆向工程" class="headerlink" title="intelj idea 中的 mybatis 逆向工程"></a>intelj idea 中的 mybatis 逆向工程</h5><p>​    <a href="https://www.cnblogs.com/ningheshutong/p/6376970.html" target="_blank" rel="noopener">Mybatis在IDEA中使用generator逆向工程生成pojo,mapper</a></p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//servlet 开发</span></span><br><span class="line"><span class="comment">//      String id = request.getParameter("id");</span></span><br><span class="line"><span class="comment">//      Items items = itemService.selectItemsById(Integer.parseInt(id));</span></span><br><span class="line"><span class="comment">//Spring 底层还是使用 request 的 getParameter 方法获取 id 的值的，但是我们不需要自己去写，并且会自动帮我们转换 Int 类型</span></span><br><span class="line">        Items items = itemService.selectItemsById(id);</span><br></pre></td></tr></table></figure><hr><h4 id="Springmvc-与-Strus2-的区别"><a href="#Springmvc-与-Strus2-的区别" class="headerlink" title="Springmvc 与 Strus2 的区别"></a>Springmvc 与 Strus2 的区别</h4><h5 id="参数绑定区别"><a href="#参数绑定区别" class="headerlink" title="参数绑定区别"></a>参数绑定区别</h5><p>​    Strus2 绑定参数在类的属性（ Action 的成员变量上） </p><p>​    Springmvc 从客户端请求 key/value 数据，通过参数绑定，将其绑定在 controller 方法的形参上</p><p>​    <a href="https://blog.csdn.net/eson_15/article/details/51718633" target="_blank" rel="noopener">SpringMVC中的参数绑定总结</a></p><h5 id="存储数据区别"><a href="#存储数据区别" class="headerlink" title="存储数据区别"></a>存储数据区别</h5><p>​    Springmvc 使用 ModelAndView.addObject(“”,””);</p><p>​    底层是 request.setAttribute(“”,””); 存在 request 的域中，没有值栈概念</p><p>​    Strus2 有值栈概念</p><h5 id="入口区别"><a href="#入口区别" class="headerlink" title="入口区别"></a>入口区别</h5><p>​    Springmvc 入口是 servlet 前端控制器</p><p>​    Strus2 是过滤器 filter</p><h5 id="模式区别"><a href="#模式区别" class="headerlink" title="模式区别"></a>模式区别</h5><p>​    Springmvc 是单例模式（以方法为单位，每次请求复制一个方法副本）</p><p>​    Strus2 是多例模式（以类为单位，每个请求创建一个类）</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href="https://github.com/crow-song/crow-song.github.io/tree/master/codeDemos/mySpring_demo/springmvc32" target="_blank" rel="noopener">简易 springmvc 代码</a></p><p><a href="https://github.com/crow-song/crow-song.github.io/tree/master/codeDemos/mySpring_demo/springmvc-mybatis" target="_blank" rel="noopener">Springmvc-mybatis</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;大致流程&quot;&gt;&lt;a href=&quot;#大致流程&quot; class=&quot;headerlink&quot; title=&quot;大致流程&quot;&gt;&lt;/a&gt;大致流程&lt;/h4&gt;&lt;p&gt;流程参考：&lt;a href=&quot;https://juejin.im/post/5af15128518825673954af47&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA整合SSM框架：Spring+SpringMVC+Mybatis&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;入门-Springmvc-流程&quot;&gt;&lt;a href=&quot;#入门-Springmvc-流程&quot; class=&quot;headerlink&quot; title=&quot;入门 Springmvc 流程&quot;&gt;&lt;/a&gt;入门 Springmvc 流程&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Web 工程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导入 jar 包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web.xml 中配置前端控制器（指定上下文路径 classpath：springmvc.xml） &lt;/p&gt;
&lt;p&gt;拦截规则 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拦截所有（包括 Jsp）：/*&lt;/li&gt;
&lt;li&gt;拦截除了 JSP 以外部分 : /&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.action 或 &lt;/em&gt;.do&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;springmvc.xml 配置扫描 @controller 注解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Action Controller Handler 处理器    需要写的部分：类上@Controller  方法上 @RequestMapping（Value=请求的路径）.action 可以省略&lt;/p&gt;
&lt;p&gt;Public ModelAndView itemList(){&lt;/p&gt;
&lt;p&gt;​    new ModelAndView &lt;/p&gt;
&lt;p&gt;​    设置数据&lt;/p&gt;
&lt;p&gt;​    设置 JSP 页面路径（跳转路径     /WEB-INF/jsp/xxx.jsp）&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;架构分析&quot;&gt;&lt;a href=&quot;#架构分析&quot; class=&quot;headerlink&quot; title=&quot;架构分析&quot;&gt;&lt;/a&gt;架构分析&lt;/h5&gt;&lt;p&gt;一个中心                            三个基本点&lt;/p&gt;
&lt;p&gt;前端控制器（在 web.xml 中配置）     处理器映射器 处理器适配器 视图解释器        由 Springmvc 提供&lt;/p&gt;
&lt;p&gt;Handler 处理器    JSP 视图（页面，即 html 标签）            由程序员书写&lt;/p&gt;
&lt;h5 id=&quot;默认三大组件&quot;&gt;&lt;a href=&quot;#默认三大组件&quot; class=&quot;headerlink&quot; title=&quot;默认三大组件&quot;&gt;&lt;/a&gt;默认三大组件&lt;/h5&gt;&lt;p&gt;默认三大组件已废弃&lt;/p&gt;
&lt;p&gt;现组件：RequestMappingHandlerMapping (处理器映射器)&lt;/p&gt;
&lt;p&gt;RequestMappingHandlerAdapter (处理器适配器)&lt;/p&gt;
&lt;p&gt;可用 &lt;code&gt;&amp;lt;mvc:anonation-driver/&amp;gt;&lt;/code&gt; 代替 处理器映射器 和 处理器适配器的配置&lt;/p&gt;
&lt;p&gt;视图解释器 用来优化 JSP 页面的路径书写 /WEB-INF/jsp/xxx.jsp  可以拼接 xxx 的前后缀&lt;/p&gt;
&lt;h5 id=&quot;整合-mybatis&quot;&gt;&lt;a href=&quot;#整合-mybatis&quot; class=&quot;headerlink&quot; title=&quot;整合 mybatis&quot;&gt;&lt;/a&gt;整合 mybatis&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SqlMapConfig.xml 核心配置文件（别名）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;applicationContent.xml 数据源 druid （替代 JDBC）读取 db.properties   Mybatis 的工厂以及&lt;/p&gt;
&lt;p&gt;Mybaits Mapper 动态代理开发的扫描方式 扫描基本包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 db.properties 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事务、扫描@Service     Spring+Mybatis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 Springmvc.xml 三大组件  扫描基本包（com.itheima  包下 controller 与 Service 全扫描）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web.xml 文件中配置监听器读取 applicationContext.xml 上下文  配置前端控制器读取 Spingmvc.xml  &lt;/p&gt;
&lt;p&gt;配置 POST 提交乱码 Fittler 过滤器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;参数绑定&quot;&gt;&lt;a href=&quot;#参数绑定&quot; class=&quot;headerlink&quot; title=&quot;参数绑定&quot;&gt;&lt;/a&gt;参数绑定&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;默认参数绑定        Request      Response    Session    Model  实现关系 ModelMap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单类型参数绑定   方法的形参上（Integer id String Double double Boolean）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POJO 类型 Items items    input name = name      name 与 items 对象中属性名一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包装类型 QueryVo （内含 Items） Query Vo        items.name （传参方式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义参数格式 转换日期：在 Springmvc.xml 配置转换器的工厂 Converters list set array&lt;bean class=&quot;&quot; 自定义转换器类=&quot;&quot;&gt;&lt;/bean&gt;&lt;/p&gt;
&lt;p&gt;创建自定义转换器类 实现 Converter&amp;lt;S,T&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;Strus2-与-Springmvc-区别&quot;&gt;&lt;a href=&quot;#Strus2-与-Springmvc-区别&quot; class=&quot;headerlink&quot; title=&quot;Strus2 与 Springmvc 区别&quot;&gt;&lt;/a&gt;Strus2 与 Springmvc 区别&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;入口 Servlet 与 Fittler&lt;/li&gt;
&lt;li&gt;单例 多例&lt;/li&gt;
&lt;li&gt;值    Request域&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;controller-返回值&quot;&gt;&lt;a href=&quot;#controller-返回值&quot; class=&quot;headerlink&quot; title=&quot;controller 返回值&quot;&gt;&lt;/a&gt;controller 返回值&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;ModelAndView 万能的   带数据   返回视图路径后结束&lt;/li&gt;
&lt;li&gt;String     只能返回视图路径  需要通过方法传参数 Model model，通过 model 带数据 request.setAttribute(),model.addAttribute(“itemsList”,list);   官方推荐 符合解耦合 数据 视图 分离 MVC&lt;/li&gt;
&lt;li&gt;void     ajax  请求 适合返回 json 格式数据（response 异步请求使用，不用刷页面）&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;重定向与内部转发区别&quot;&gt;&lt;a href=&quot;#重定向与内部转发区别&quot; class=&quot;headerlink&quot; title=&quot;重定向与内部转发区别&quot;&gt;&lt;/a&gt;重定向与内部转发区别&lt;/h5&gt;&lt;p&gt;重定向的页面在提交后会跳转到 重定向的路径（网址）&lt;/p&gt;
&lt;p&gt;内部转发的页面在提交后不会跳转 会在修改页面的路径（网址）&lt;/p&gt;
&lt;p&gt;SpringMVC 三大组件 处理器映射器（HandlerMapping）、视图解析器(ViewResolver) 、处理器适配器(HandlerAdapter)&lt;/p&gt;
    
    </summary>
    
      <category term="SpringMvc" scheme="http://yoursite.com/categories/SpringMvc/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springmvc" scheme="http://yoursite.com/tags/springmvc/"/>
    
      <category term="mybatis Maven" scheme="http://yoursite.com/tags/mybatis-Maven/"/>
    
  </entry>
  
  <entry>
    <title>linuxInstall</title>
    <link href="http://yoursite.com/2018/09/12/linuxInstall/"/>
    <id>http://yoursite.com/2018/09/12/linuxInstall/</id>
    <published>2018-09-12T07:19:14.000Z</published>
    <updated>2019-01-15T03:08:06.344Z</updated>
    
    <content type="html"><![CDATA[<p>linux 无法使用 ifconfig <a href="https://www.cnblogs.com/dunitian/p/4974761.html" target="_blank" rel="noopener">https://www.cnblogs.com/dunitian/p/4974761.html</a>  ：使用新指令 ip</p><p>没有 ifcfg-eth0 ，可能为 ifcfg-ens33 或其他</p><p><a href="https://hk.saowen.com/a/227c3c22a44418b6927076afcd72c05d41291f7d0e9dc7fa60031b591d9bedbc" target="_blank" rel="noopener">https://hk.saowen.com/a/227c3c22a44418b6927076afcd72c05d41291f7d0e9dc7fa60031b591d9bedbc</a></p><p><a href="https://blog.csdn.net/houqd2012/article/details/8111738" target="_blank" rel="noopener">Centos 下安装与设置VIM编辑器</a></p><h5 id="查找已安装的myslq-版本："><a href="#查找已安装的myslq-版本：" class="headerlink" title="查找已安装的myslq 版本："></a>查找已安装的myslq 版本：</h5><p>​     #rpm  -qa | grep  mysql （注意大小写，如果mysql 不行就换MySQL） </p><a id="more"></a><h5 id="Linux-下-mysql-安装："><a href="#Linux-下-mysql-安装：" class="headerlink" title="Linux 下 mysql 安装："></a>Linux 下 mysql 安装：</h5><p>遇到该错误哪个被需要 yum 哪个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用yum命令安装依赖,多个依赖用空格隔开,命令如下:</span><br><span class="line">    yum -y install libaio.so.1 libc.so.6 libcrypt.so.1 libdl.so.2 libm.so.6 net-tools</span><br></pre></td></tr></table></figure><details><br>    <summary>点击详细错误：依赖检测失败</summary><br>    <p><br>        <pre><br>        libaio.so.1 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libaio.so.1(LIBAIO_0.1) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libaio.so.1(LIBAIO_0.4) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.0) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.1) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.1.2) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.1.3) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.10) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.2) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.2.3) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.3) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.3.3) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.3.4) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.4) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.7) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libc.so.6(GLIBC_2.8) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libcrypt.so.1 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libcrypt.so.1(GLIBC_2.0) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libdl.so.2 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libdl.so.2(GLIBC_2.0) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libdl.so.2(GLIBC_2.1) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libgcc_s.so.1 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libgcc_s.so.1(GCC_3.0) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libgcc_s.so.1(GLIBC_2.0) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libm.so.6 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libm.so.6(GLIBC_2.0) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libm.so.6(GLIBC_2.1) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libpthread.so.0 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libpthread.so.0(GLIBC_2.0) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libpthread.so.0(GLIBC_2.1) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libpthread.so.0(GLIBC_2.2) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libpthread.so.0(GLIBC_2.3.2) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        librt.so.1 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        librt.so.1(GLIBC_2.2) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libstdc++.so.6 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libstdc++.so.6(CXXABI_1.3) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libstdc++.so.6(GLIBCXX_3.4) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libstdc++.so.6(GLIBCXX_3.4.11) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        libstdc++.so.6(GLIBCXX_3.4.9) 被 MySQL-server-5.6.22-1.el6.i686 需要<br>        net-tools 被 MySQL-server-5.6.22-1.el6.i686 需要<br>[root@localhost mysql]# yum install libaio.so.1<br>已加载插件：fastestmirror<br>Loading mirror speeds from cached hostfile<br>- base: mirrors.njupt.edu.cn<br>- extras: mirrors.163.com<br>- updates: mirrors.163.com<br>正在解决依赖关系<br>–&gt; 正在检查事务<br>—&gt; 软件包 libaio.i686.0.0.3.109-13.el7 将被 安装<br>–&gt; 解决依赖关系完成<br>依赖关系解决<br>===============================================================================<br> Package          架构           版本                     源              大小<br>正在安装:<br> libaio           i686           0.3.109-13.el7           base            24 k<br>事务概要<br>安装  1 软件包<br>总下载量：24 k<br>安装大小：37 k<br>Is this ok [y/d/N]: y<br>Downloading packages:<br>libaio-0.3.109-13.el7.i686.rpm                            |  24 kB   00:00<br>Running transaction check<br>Running transaction test<br>Transaction test succeeded<br>Running transaction<br>警告：RPM 数据库已被非 yum 程序修改。<br>** 发现 41 个已存在的 RPM 数据库问题， ‘yum check’ 输出如下：<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libaio.so.1<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libaio.so.1(LIBAIO_0.1)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libaio.so.1(LIBAIO_0.4)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.0)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.1)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.1.2)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.1.3)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.10)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.2)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.2.3)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.3)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.3.3)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.3.4)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.4)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.7)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libc.so.6(GLIBC_2.8)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libcrypt.so.1<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libcrypt.so.1(GLIBC_2.0)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libdl.so.2<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libdl.so.2(GLIBC_2.0)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libdl.so.2(GLIBC_2.1)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libgcc_s.so.1<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libgcc_s.so.1(GCC_3.0)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libgcc_s.so.1(GLIBC_2.0)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libm.so.6<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libm.so.6(GLIBC_2.0)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libm.so.6(GLIBC_2.1)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libpthread.so.0<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libpthread.so.0(GLIBC_2.0)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libpthread.so.0(GLIBC_2.1)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libpthread.so.0(GLIBC_2.2)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libpthread.so.0(GLIBC_2.3.2)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 librt.so.1<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 librt.so.1(GLIBC_2.2)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libstdc++.so.6<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libstdc++.so.6(CXXABI_1.3)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libstdc++.so.6(GLIBCXX_3.4)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libstdc++.so.6(GLIBCXX_3.4.11)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 libstdc++.so.6(GLIBCXX_3.4.9)<br>MySQL-server-5.6.22-1.el6.i686 有缺少的需求 net-tools<br>  正在安装    : libaio-0.3.109-13.el7.i686                                 1/1<br>  验证中      : libaio-0.3.109-13.el7.i686                                 1/1<br>已安装:<br>  libaio.i686 0:0.3.109-13.el7<br>完毕！<br>      </pre><br>    </p><br></details><hr><p>然后 继续安装 mysql 包出现问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">        libgcc_s.so.1 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br><span class="line">        libgcc_s.so.1(GCC_3.0) 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br><span class="line">        libgcc_s.so.1(GLIBC_2.0) 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br><span class="line">        libstdc++.so.6 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br><span class="line">        libstdc++.so.6(CXXABI_1.3) 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br><span class="line">        libstdc++.so.6(GLIBCXX_3.4) 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br><span class="line">        libstdc++.so.6(GLIBCXX_3.4.11) 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br><span class="line">        libstdc++.so.6(GLIBCXX_3.4.9) 被 MySQL-server-5.6.22-1.el6.i686 需要</span><br></pre></td></tr></table></figure><p>选择  <code>yum -y install libgcc_s.so.1 libstdc++.so.6</code>出现新问题</p><details><br>    <summary>点击显示详细错误：已加载插件…</summary><br>    <p><br>        <pre><br>        已加载插件：fastestmirror<br>Loading mirror speeds from cached hostfile<br> <em> base: mirrors.njupt.edu.cn </em> extras: mirrors.163.com<br> * updates: mirrors.163.com<br>正在解决依赖关系<br>–&gt; 正在检查事务<br>—&gt; 软件包 libgcc.i686.0.4.8.5-36.el7 将被 安装<br>–&gt; 解决依赖关系完成<br>错误： Multilib version problems found. This often means that the root<br>      cause is something else and multilib version checking is just<br>      pointing out that there is a problem. Eg.:<br>        1. You have an upgrade for libgcc which is missing some<br>           dependency that another package requires. Yum is trying to<br>           solve this by installing an older version of libgcc of the<br>           different architecture. If you exclude the bad architecture<br>           yum will tell you what the root cause is (which package<br>           requires what). You can try redoing the upgrade with<br>           –exclude libgcc.otherarch … this should give you an error<br>           message showing the root cause of the problem.<br>        2. You have multiple architectures of libgcc installed, but<br>           yum can only see an upgrade for one of those architectures.<br>           If you don’t want/need both architectures anymore then you<br>           can remove the one with the missing update and everything<br>           will work.<br>        3. You have duplicate versions of libgcc installed already.<br>           You can use “yum check” to get yum show these errors.<br>      …you can also use –setopt=protected_multilib=false to remove<br>      this checking, however this is almost never the correct thing to<br>      do as something else is very likely to go wrong (often causing<br>      much more problems).<br>      </pre><br>    </p><br></details><p> 错误：保护多库版本：libgcc-4.8.5-36.el7.i686 != libgcc-4.8.5-28.el7.x86_64</p><p>此时哪个出现 ‘保护多版本库’ 升级哪个 <code>yum update libstdc++-4.8.5-28.el7.x86_64</code></p><p>全部解决后即可安装 mysql</p><blockquote><p>参考：<a href="https://blog.csdn.net/Wuhaotian1996/article/details/80689009" target="_blank" rel="noopener">https://blog.csdn.net/Wuhaotian1996/article/details/80689009</a></p><p><a href="https://blog.csdn.net/qq_40208605/article/details/80679020" target="_blank" rel="noopener">https://blog.csdn.net/qq_40208605/article/details/80679020</a></p></blockquote><hr><details><br>    <summary>点击详情：安装mysql异常</summary><br>    <p><br>        <pre><br>        [root@localhost mysql]# rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm<br>准备中…                             ################################# [100%]<br>        file /usr/share/mysql/charsets/README from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/czech/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/danish/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/dutch/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/english/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/estonian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/french/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/german/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/greek/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/hungarian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/italian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/japanese/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/korean/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/norwegian-ny/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/norwegian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/polish/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/portuguese/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/romanian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/russian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/serbian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/slovak/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/spanish/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/swedish/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/ukrainian/errmsg.sys from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/Index.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/armscii8.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/ascii.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/cp1250.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/cp1251.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/cp1256.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/cp1257.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/cp850.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/cp852.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/cp866.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/dec8.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/geostd8.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/greek.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/hebrew.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/hp8.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/keybcs2.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/koi8r.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/koi8u.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/latin1.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/latin2.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/latin5.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/latin7.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/macce.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/macroman.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        file /usr/share/mysql/charsets/swe7.xml from install of MySQL-server-5.6.22-1.el6.i686 conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_64<br>        </pre><br>    </p><br></details><p>经网上查找是起了冲突 ‘conflicts’</p><blockquote><p>看到“conflicts”，是产生冲突了，文件“/usr/share/mysql/charsets/*”需要MySQL-server-5.6.22-1.el6.i686 版本的，而系统已经存在mariadb-libs-1:5.5.56-2.el7.x86_64版本的</p></blockquote><p>删除冲突文件 mariadb-libs-1:5.5.56-2*</p><p>yum -y remove mariadb-libs-1:5.5.56-2*</p><p>然后就可以安装自己的 mysql 了</p><p>参考：<a href="https://blog.csdn.net/testcs_dn/article/details/39026213" target="_blank" rel="noopener">https://blog.csdn.net/testcs_dn/article/details/39026213</a></p><hr><h5 id="tomcat-安装后，启动找不到安装的-jdk"><a href="#tomcat-安装后，启动找不到安装的-jdk" class="headerlink" title="tomcat 安装后，启动找不到安装的 jdk"></a>tomcat 安装后，启动找不到安装的 jdk</h5><p>解决方法：将jdk 目录手动配置到 catalina.sh 文件下</p><ol><li>配置jdk环境变量，打开/etc/profile配置文件，将下面配置拷贝进去</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#set java environment</span><br><span class="line"></span><br><span class="line">   JAVA_HOME=/usr/local/jdk1.8.0_191</span><br><span class="line"></span><br><span class="line">   CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line"></span><br><span class="line">   PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">   export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure><ol start="2"><li>重新加载 /etc/profile 配置文件 source /etc/profile</li></ol><hr><h5 id="永久写入防火墙配置"><a href="#永久写入防火墙配置" class="headerlink" title="永久写入防火墙配置"></a>永久写入防火墙配置</h5><p>因为是 CentOS Linux 7 的内核，不能直接用 6 内核的方法</p><p>先删除 7.0 系统自带防火墙，，安装旧版</p><p>开放 xxx 端口</p><p>/sbin/iptables -I INPUT -p tcp –dport 80 -j ACCEPT </p><p>永久保存</p><p>service iptables save</p><p>或 /usr/libexec/iptables/iptables.init save</p><p>参考：<a href="https://www.cnblogs.com/zhangzhibin/p/6231870.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangzhibin/p/6231870.html</a></p><p><a href="https://blog.csdn.net/guoyf123321/article/details/52416328" target="_blank" rel="noopener">https://blog.csdn.net/guoyf123321/article/details/52416328</a></p><hr><h5 id="mysql-安装后没有密码文件"><a href="#mysql-安装后没有密码文件" class="headerlink" title="mysql 安装后没有密码文件"></a>mysql 安装后没有密码文件</h5><p>重设 mysql 密码</p><blockquote><p>解决方案如下：</p><p>#service mysqld stop<br>#mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;</p><p>#mysql -u root mysql</p><p>mysql&gt; UPDATE user SET Password=PASSWORD(‘newpassword’) where USER=’root’;<br>mysql&gt; FLUSH PRIVILEGES;<br>mysql&gt; quit</p><p>service mysqld restart</p><p># mysql -uroot -p<br>Enter password: &lt;输入新设的密码newpassword&gt;</p></blockquote><p>mysql&gt; UPDATE user SET Password=PASSWORD(‘newpassword’) where USER=’root’;</p><p>这句中的 newpassword 指需要新设置的密码</p><p> 参考：<a href="https://onekeyes.iteye.com/blog/2316794" target="_blank" rel="noopener">https://onekeyes.iteye.com/blog/2316794</a></p><hr><h5 id="Linux-tomcat-部署-war-文件后无法访问-tomcat-只显示-tomcat-主页"><a href="#Linux-tomcat-部署-war-文件后无法访问-tomcat-只显示-tomcat-主页" class="headerlink" title="Linux tomcat 部署 war 文件后无法访问 tomcat 只显示 tomcat 主页"></a>Linux tomcat 部署 war 文件后无法访问 tomcat 只显示 tomcat 主页</h5><p>可能是 idea 的 tomcat 和 jdk 版本跟 Linux 下的不同，将 linux 的 tomcat 和 jdk 升级成 idea 一样。</p><hr><p>idea 使用 Junit 自动生成测试类<a href="https://www.cnblogs.com/libingbin/p/6007203.html" target="_blank" rel="noopener">https://www.cnblogs.com/libingbin/p/6007203.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux 无法使用 ifconfig &lt;a href=&quot;https://www.cnblogs.com/dunitian/p/4974761.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/dunitian/p/4974761.html&lt;/a&gt;  ：使用新指令 ip&lt;/p&gt;
&lt;p&gt;没有 ifcfg-eth0 ，可能为 ifcfg-ens33 或其他&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hk.saowen.com/a/227c3c22a44418b6927076afcd72c05d41291f7d0e9dc7fa60031b591d9bedbc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hk.saowen.com/a/227c3c22a44418b6927076afcd72c05d41291f7d0e9dc7fa60031b591d9bedbc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/houqd2012/article/details/8111738&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Centos 下安装与设置VIM编辑器&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;查找已安装的myslq-版本：&quot;&gt;&lt;a href=&quot;#查找已安装的myslq-版本：&quot; class=&quot;headerlink&quot; title=&quot;查找已安装的myslq 版本：&quot;&gt;&lt;/a&gt;查找已安装的myslq 版本：&lt;/h5&gt;&lt;p&gt;​     #rpm  -qa | grep  mysql （注意大小写，如果mysql 不行就换MySQL） &lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>黑马 Spring</title>
    <link href="http://yoursite.com/2018/09/03/HMSpring/"/>
    <id>http://yoursite.com/2018/09/03/HMSpring/</id>
    <published>2018-09-03T13:55:31.000Z</published>
    <updated>2018-09-04T15:19:18.618Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://gavin-chen.iteye.com/blog/240424" target="_blank" rel="noopener"><em>maven dependency 机制</em></a></p><p>idea 无法导入 jdbcjdbcDaosupport</p><p>解决 Project Structure－&gt;Facets 配置。添加spring配置文件的模块 </p><p>参考： <a href="https://blog.csdn.net/tiantiandjava/article/details/41204607" target="_blank" rel="noopener">https://blog.csdn.net/tiantiandjava/article/details/41204607</a> </p><p>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘accountService’ defined in class path resource [applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type ‘com.mchange.v2.c3p0.ComboPooledDataSource’ to required type ‘cn.itcast.dao.AccountDao’ for property ‘ad’; nested exception is java.lang.IllegalStateException: Cannot convert value of type ‘com.mchange.v2.c3p0.ComboPooledDataSource’ to required type ‘cn.itcast.dao.AccountDao’ for property ‘ad’: no matching editors or conversion strategy found</p><p>xml 配置中需要将 accountDao 注入到 accountService ，</p><p>将 dataSource（连接池） 注入到 accountDao</p><p>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘transactionManager’ defined in class path resource [applicationContext.xml]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0’: Cannot resolve reference to bean ‘txPc’ while setting bean property ‘pointcut’; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘txPc’: Lookup method resolution failed; nested exception is java.lang.IllegalStateException: <strong>Failed to introspect Class [org.springframework.aop.aspectj.AspectJExpressionPointcut]</strong> from ClassLoader [sun.misc.Launcher$AppClassLoader@b4aac2]</p><p>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0’: Cannot resolve reference to bean ‘txPc’ while setting bean property ‘pointcut’; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘txPc’: Lookup method resolution failed; nested exception is java.lang.IllegalStateException: <strong>Failed to introspect Class [org.springframework.aop.aspectj.AspectJExpressionPointcut</strong>] from ClassLoader [sun.misc.Launcher$AppClassLoader@b4aac2]</p><p>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘txPc’: Lookup method resolution failed; nested exception is java.lang.IllegalStateException: <strong>Failed to introspect Class [org.springframework.aop.aspectj.AspectJExpressionPointcut</strong>] from ClassLoader [sun.misc.Launcher$AppClassLoader@b4aac2]</p><p>加粗语句表示缺少 jar 包 aspectjweaver.jar 下载导入此 jar 包即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://gavin-chen.iteye.com/blog/240424&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;maven dependency 机制&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;idea 无法导入 jdbcjd
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>idea_create_web</title>
    <link href="http://yoursite.com/2018/08/31/idea-create-web/"/>
    <id>http://yoursite.com/2018/08/31/idea-create-web/</id>
    <published>2018-08-31T07:13:07.000Z</published>
    <updated>2019-01-07T01:37:16.055Z</updated>
    
    <content type="html"><![CDATA[<h4 id="流程参考：https-www-cnblogs-com-xuange306-p-7012341-html"><a href="#流程参考：https-www-cnblogs-com-xuange306-p-7012341-html" class="headerlink" title="流程参考：https://www.cnblogs.com/xuange306/p/7012341.html"></a>流程参考：<a href="https://www.cnblogs.com/xuange306/p/7012341.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuange306/p/7012341.html</a></h4><a id="more"></a><h4 id="遇见的小问题："><a href="#遇见的小问题：" class="headerlink" title="遇见的小问题："></a>遇见的小问题：</h4><p>没有 javax.servlet.* 的 jar 包</p><blockquote><p><del>在 Project Structure 中选择 libraries 点击左侧加号选择 java 添加 tomcat 文件夹下 lib 文件夹中的 servlet-api.jar</del> </p><p><del>同时也可添加常用 jar 包 tomcat-api 与 jsp-api</del></p><p>可以使用 ctrl+shift+alt+s 打开 Project Structure 选择 Modules 点击右侧 + 号，选择 libraries ，选择 Project Libraries 下的 tomcat 添加即可</p><p>普通 jar 包添加可选方法：在 WEB-INF 下创建 lib 目录，把 jar 包复制到 lib 目录下，ctrl+shift+alt+s 打开 Project Structure 选择左侧 libraries ，点击左侧加号 选择 java，选择 创建的 lib 目录添加，选择左侧 Modules 栏，勾选 lib </p><p><a href="https://my.oschina.net/fdblog/blog/161305" target="_blank" rel="noopener">https://my.oschina.net/fdblog/blog/161305</a></p></blockquote><h6 id="创建Web项目后没有WEB-INF文件夹及web-xml"><a href="#创建Web项目后没有WEB-INF文件夹及web-xml" class="headerlink" title="创建Web项目后没有WEB-INF文件夹及web.xml"></a>创建Web项目后没有WEB-INF文件夹及web.xml</h6><blockquote><p>最简单的方法：idea 创建 web 项目时用 xml 2.5</p><p>或：</p><p>shift+ctrl+alt+s进入Project Structure<br>打开Project Structure，在facets中选中次级的web或者在Modules中选中web，在deployment Descriptors面板里，点击 +号选择web.xml以及版本号。然后在弹出的对话框中修改xml默认的目录，加上web就可以了</p></blockquote><h6 id="Q-IntelliJ-IDEA-Tomcal启动报错："><a href="#Q-IntelliJ-IDEA-Tomcal启动报错：" class="headerlink" title="Q: IntelliJ IDEA  Tomcal启动报错："></a>Q: IntelliJ IDEA  Tomcal启动报错：</h6><blockquote><p>org.apache.catalina.core.AprLifecycleListener.init The APR based Apache Tomcat Native library failed to load. The error reported was [C:\tomcat\bin\tcnative-1.dll: Can’t load AMD 64-bit .dll on a IA 32-bit platform]  java.lang.UnsatisfiedLinkError: C:\tomcat\bin\tcnative-1.dll: Can’t load AMD 64-bit .dll on a IA 32-bit platform</p></blockquote><h6 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h6><blockquote><p>主要是在64位的系统下安装的虚拟机是64位的，而WTK的sublime.dll不能在64位的平台下加载64位的虚拟机，只能加载32位的。由于WTK在安装的时候加载的64虚拟机的地址，它找到的是64位的虚拟机，所以它提示不能加载32位的虚拟机（在目录下没有32的虚拟机）</p></blockquote><blockquote><p>解决办法<br>下载 the 32bit from <a href="http://www.apache.org/dist/tomcat/tomcat-connectors/native/" target="_blank" rel="noopener">http://www.apache.org/dist/tomcat/tomcat-connectors/native/</a><br>找到最近的版本，我的是 tomcat-native-1.2.16-win32-bin.zip<br>下载后解压，找到<br>tomcat-native-1.2.16-win32-bin.zip\bin\tcnative-1.dll (不是64X文件夹中的)<br>替换到tomcat根目录下<br>tomcat\bin</p></blockquote><blockquote><p>idea tomcat警告参考：<a href="http://blog.51cto.com/13765598/2120489" target="_blank" rel="noopener">http://blog.51cto.com/13765598/2120489</a></p></blockquote><h6 id="Q-intellj-idea启动tomcat服务器后无法访问localhost-8080（白屏）"><a href="#Q-intellj-idea启动tomcat服务器后无法访问localhost-8080（白屏）" class="headerlink" title="Q: intellj idea启动tomcat服务器后无法访问localhost:8080（白屏）"></a>Q: intellj idea启动tomcat服务器后无法访问localhost:8080（白屏）</h6><h6 id="A-1"><a href="#A-1" class="headerlink" title="A:"></a>A:</h6><blockquote><p>原因：没有将tomcat主页的工程部署到intellj idea的虚拟tomcat路径，可在Run/Debug Configurations中Deployment选项中点击右边的绿色加号，选择External Source，然后添加Tomcat安装目录tomcat/webapps/Root目录即可；<br>参考资料：<a href="https://blog.csdn.net/qq_22708467/article/details/79070973" target="_blank" rel="noopener">https://blog.csdn.net/qq_22708467/article/details/79070973</a></p></blockquote><h4 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h4><p>在部署 tomcat 服务器时，点击右上角 edit configurations 选择Deployment 添加了 Artifact 后，右边的Application context中的 / 代表项目部署的虚拟路径（网址访问主页面路径）:</p><blockquote><ul><li>若 index.jsp 在 aaa/web 目录下，虚拟路径为 /<br>则访问 index.jsp 地址为 localhost/8080 或 localhost/8080/index.jsp . </li><li>若虚拟路径设为 /aaa 则访问 index.jsp 的地址为 localhost/8080/aaa/index.jsp 或 localhost/8080/aaa<br>-request.getContextPath(); 得到的值为虚拟路径</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;流程参考：https-www-cnblogs-com-xuange306-p-7012341-html&quot;&gt;&lt;a href=&quot;#流程参考：https-www-cnblogs-com-xuange306-p-7012341-html&quot; class=&quot;headerlink&quot; title=&quot;流程参考：https://www.cnblogs.com/xuange306/p/7012341.html&quot;&gt;&lt;/a&gt;流程参考：&lt;a href=&quot;https://www.cnblogs.com/xuange306/p/7012341.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xuange306/p/7012341.html&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="idea" scheme="http://yoursite.com/categories/idea/"/>
    
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
      <category term="intelj" scheme="http://yoursite.com/tags/intelj/"/>
    
  </entry>
  
  <entry>
    <title>单例设计模式</title>
    <link href="http://yoursite.com/2018/08/20/SingleDemo/"/>
    <id>http://yoursite.com/2018/08/20/SingleDemo/</id>
    <published>2018-08-20T02:07:53.000Z</published>
    <updated>2018-08-31T07:25:08.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例设计模式：解决一个类中只存在一个对象"><a href="#单例设计模式：解决一个类中只存在一个对象" class="headerlink" title="单例设计模式：解决一个类中只存在一个对象"></a>单例设计模式：解决一个类中只存在一个对象</h3><h4 id="单例设计模式特性："><a href="#单例设计模式特性：" class="headerlink" title="单例设计模式特性："></a>单例设计模式特性：</h4><h5 id="保证对象在内存中的唯一性："><a href="#保证对象在内存中的唯一性：" class="headerlink" title="保证对象在内存中的唯一性："></a>保证对象在内存中的唯一性：</h5><ul><li>为了避免其他程序创建过多对象，先禁止其他程序创建该类对象</li><li>为了让其他类访问到该对象，在本类中自定义一个对象</li><li>方便其他对象对自定义对象的访问，可以对外提供一些访问方式</li></ul><h5 id="用代码的方式实现对象在内存中唯一性："><a href="#用代码的方式实现对象在内存中唯一性：" class="headerlink" title="用代码的方式实现对象在内存中唯一性："></a>用代码的方式实现对象在内存中唯一性：</h5><ul><li>将构造函数私有化</li><li>在类中创建一个本类对象</li><li>提供一个方法可以获取到该对象</li></ul><h5 id="单例模式使用方式："><a href="#单例模式使用方式：" class="headerlink" title="单例模式使用方式："></a>单例模式使用方式：</h5><p>按平时的描述方式描述事物，加上 单例模式 的 3 步方式即可</p><a id="more"></a><h4 id="单例设计模式饿汉式-java-代码实现："><a href="#单例设计模式饿汉式-java-代码实现：" class="headerlink" title="单例设计模式饿汉式 java 代码实现："></a>单例设计模式饿汉式 java 代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//内置成员变化需要私有化</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    方法被调用的方法只有两种：对象、类名</span></span><br><span class="line"><span class="comment">    因为该对象被私有化了，无法外部创建该方法，所以用类名调用</span></span><br><span class="line"><span class="comment">    类名调用需要设置静态方法</span></span><br><span class="line"><span class="comment">    静态方法只能访问静态成员，所以成员也需要静态</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Single ss = Single.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈中加载 main 函数 和 ss</p><p>方法区中有了 Single 的空间、静态的 s 变量、getInstance() 方法</p><p>堆中有了一个 new Single() 地址假设为 0x0015</p><p>方法区的 s 变量指向了 堆中 new Single() 的地址 0x0015</p><p>return s</p><p>Single ss = Single.getInstance();</p><p>使得 ss 也指向 0x0015</p><h4 id="普通方式创建多个对象："><a href="#普通方式创建多个对象：" class="headerlink" title="普通方式创建多个对象："></a>普通方式创建多个对象：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不设置私有化，可外部创建该对象</span></span><br><span class="line">    Single()&#123;&#125;;</span><br><span class="line">    <span class="comment">//单例模式下设置私有化，不可外部创建该对象</span></span><br><span class="line">    <span class="comment">//private Single()&#123;&#125;;</span></span><br><span class="line">    </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建 2 个 Single 对象</span></span><br><span class="line">        Single s1 = <span class="keyword">new</span> Single();</span><br><span class="line">        Single s2 = <span class="keyword">new</span> Single();</span><br><span class="line">        <span class="comment">//设置值为 30</span></span><br><span class="line">        s1.setNum(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">/**输出值为默认值 0</span></span><br><span class="line"><span class="comment">        创建了两个对象，修改其中一个值跟另一个无关</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(s2.getNum());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ss2 的值为 23，表明 ss1 与 ss2 是同一个对象</span></span><br><span class="line"><span class="comment">        单例模式内存中一个一个对象在执行，该对象有 3 个引用：</span></span><br><span class="line"><span class="comment">        SingleDemo 的 ss1、ss2 和 Single 中的 s</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//Single ss1 = Single.getInstance();</span></span><br><span class="line">        <span class="comment">//Single ss2 = Single.getInstance();</span></span><br><span class="line">        <span class="comment">//ss1.setNum(15);</span></span><br><span class="line">        <span class="comment">//System.out.println(ss2);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例设计模式-懒汉式-java-代码"><a href="#单例设计模式-懒汉式-java-代码" class="headerlink" title="单例设计模式 懒汉式 java 代码"></a>单例设计模式 懒汉式 java 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先初始化对象：称为 饿汉式</span></span><br><span class="line"><span class="comment">Single 类一进内存，就已经创建好了对象</span></span><br><span class="line"><span class="comment">class Single&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    private Single()&#123;&#125;;</span></span><br><span class="line"><span class="comment"> private static Single s = new Single();</span></span><br><span class="line"><span class="comment">    private Single getInstance()&#123;</span></span><br><span class="line"><span class="comment">        return s;</span></span><br><span class="line"><span class="comment">    &#125;  </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//对象在方法被调用时才初始化，也叫作对象的延时加载 称为 懒汉式</span></span><br><span class="line"><span class="comment">//Single 类进内存，对象还没有存在，只有调用 getInstance() 方法时，才建立对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s = <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Single ss = Single.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式：Single 类 加载进内存时，方法区就有 s，堆中就有对象，对象的地址值赋给 s</p><p>懒汉式：Single 类 加载进内存时，方法区 s 为空，当调用 getInstance() 方法时，才在内存中建立建立对象，将堆内存中的地址赋给 s，替换空值</p><h4 id="懒汉式防止多个用户创建多个对象"><a href="#懒汉式防止多个用户创建多个对象" class="headerlink" title="懒汉式防止多个用户创建多个对象"></a>懒汉式防止多个用户创建多个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//锁加载判断内部，提升效率</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//加锁，防止创建多个对象</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Single.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    s = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单例设计模式：解决一个类中只存在一个对象&quot;&gt;&lt;a href=&quot;#单例设计模式：解决一个类中只存在一个对象&quot; class=&quot;headerlink&quot; title=&quot;单例设计模式：解决一个类中只存在一个对象&quot;&gt;&lt;/a&gt;单例设计模式：解决一个类中只存在一个对象&lt;/h3&gt;&lt;h4 id=&quot;单例设计模式特性：&quot;&gt;&lt;a href=&quot;#单例设计模式特性：&quot; class=&quot;headerlink&quot; title=&quot;单例设计模式特性：&quot;&gt;&lt;/a&gt;单例设计模式特性：&lt;/h4&gt;&lt;h5 id=&quot;保证对象在内存中的唯一性：&quot;&gt;&lt;a href=&quot;#保证对象在内存中的唯一性：&quot; class=&quot;headerlink&quot; title=&quot;保证对象在内存中的唯一性：&quot;&gt;&lt;/a&gt;保证对象在内存中的唯一性：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;为了避免其他程序创建过多对象，先禁止其他程序创建该类对象&lt;/li&gt;
&lt;li&gt;为了让其他类访问到该对象，在本类中自定义一个对象&lt;/li&gt;
&lt;li&gt;方便其他对象对自定义对象的访问，可以对外提供一些访问方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;用代码的方式实现对象在内存中唯一性：&quot;&gt;&lt;a href=&quot;#用代码的方式实现对象在内存中唯一性：&quot; class=&quot;headerlink&quot; title=&quot;用代码的方式实现对象在内存中唯一性：&quot;&gt;&lt;/a&gt;用代码的方式实现对象在内存中唯一性：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;将构造函数私有化&lt;/li&gt;
&lt;li&gt;在类中创建一个本类对象&lt;/li&gt;
&lt;li&gt;提供一个方法可以获取到该对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;单例模式使用方式：&quot;&gt;&lt;a href=&quot;#单例模式使用方式：&quot; class=&quot;headerlink&quot; title=&quot;单例模式使用方式：&quot;&gt;&lt;/a&gt;单例模式使用方式：&lt;/h5&gt;&lt;p&gt;按平时的描述方式描述事物，加上 单例模式 的 3 步方式即可&lt;/p&gt;
    
    </summary>
    
      <category term="Design Patterns" scheme="http://yoursite.com/categories/Design-Patterns/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Singleton Pattern" scheme="http://yoursite.com/tags/Singleton-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Spring4x_2</title>
    <link href="http://yoursite.com/2018/08/14/Spring4x-2/"/>
    <id>http://yoursite.com/2018/08/14/Spring4x-2/</id>
    <published>2018-08-14T09:26:42.000Z</published>
    <updated>2018-08-31T07:25:33.244Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring-名词参考"><a href="#Spring-名词参考" class="headerlink" title="Spring 名词参考"></a>Spring 名词参考</h4><p>POJO：POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称 </p><p>使用POJO名称是为了避免和<a href="https://baike.baidu.com/item/EJB" target="_blank" rel="noopener">EJB</a>混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,没有业务逻辑，有时可以作为<a href="https://baike.baidu.com/item/VO" target="_blank" rel="noopener">VO</a>(value -object)或<a href="https://baike.baidu.com/item/dto/16016821" target="_blank" rel="noopener">dto</a>(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是可以的,但不允许有业务方法,也不能携带有connection之类的方法。 </p><p><a href="https://blog.csdn.net/wyqwxx86/article/details/80088769" target="_blank" rel="noopener">教程参考</a></p><p><a href="https://blog.csdn.net/theNightSoCold/article/details/72081963" target="_blank" rel="noopener">idea 创建 log4j 文件</a></p><a id="more"></a><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q1"><a href="#Q1" class="headerlink" title="Q1:"></a>Q1:</h5><p>application context not configured for this file</p><p>A:</p><p><a href="https://blog.csdn.net/YangJiaJun0506/article/details/79302364" target="_blank" rel="noopener">application context not configured for this file于spring框架使用中的原因</a></p><h5 id="Q2"><a href="#Q2" class="headerlink" title="Q2:"></a>Q2:</h5><p> cvc-complex-type.2.4.c: 通配符的匹配很全面, 但无法找到元素 ‘tx:Advisor’ 的声明。</p><p>A:</p><p>在 smart-context.xml 中加入 Spring 引用</p><h5 id="Q3"><a href="#Q3" class="headerlink" title="Q3:"></a>Q3:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.sql.SQLException: Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)</span><br></pre></td></tr></table></figure><p>A:</p><p>smart-context.xml 配置 数据库的用户密码错误    </p><h5 id="Q4"><a href="#Q4" class="headerlink" title="Q4:"></a>Q4:</h5><p>c:if 与 c:url 标签无效</p><p>A:</p><p>accepted</p><p>First add this to the top of your “.jsp” file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span><br></pre></td></tr></table></figure><p>It will still give syntax error but you can fix that by adding “javax.servlet:jstl:1.2” (without quotes) as a module dependency. To do that, follow these steps:</p><ol><li>Click your project name and press <strong>“F4”</strong> to bring up the module settings dialog.</li><li>Then go to the “dependencies” tab in the “modules” section.</li><li>Click the green “+” icon –&gt; library –&gt; <strong>new library</strong> –&gt; From Maven.</li><li>Search for <code>javax.servlet:jstl:1.2</code> in the search bar and press OK and it will download and add the above mentioned library as a module.</li><li>Now you should not have any kind of syntax error.</li></ol><p><a href="https://stackoverflow.com/questions/31043869/intellij-and-jsp-jstl-cannot-resolve-taglib-for-jstl-in-tomcat7" target="_blank" rel="noopener">c:if标签 Cannot resolve symbol</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Spring-名词参考&quot;&gt;&lt;a href=&quot;#Spring-名词参考&quot; class=&quot;headerlink&quot; title=&quot;Spring 名词参考&quot;&gt;&lt;/a&gt;Spring 名词参考&lt;/h4&gt;&lt;p&gt;POJO：POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称 &lt;/p&gt;
&lt;p&gt;使用POJO名称是为了避免和&lt;a href=&quot;https://baike.baidu.com/item/EJB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EJB&lt;/a&gt;混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,没有业务逻辑，有时可以作为&lt;a href=&quot;https://baike.baidu.com/item/VO&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VO&lt;/a&gt;(value -object)或&lt;a href=&quot;https://baike.baidu.com/item/dto/16016821&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dto&lt;/a&gt;(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是可以的,但不允许有业务方法,也不能携带有connection之类的方法。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wyqwxx86/article/details/80088769&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教程参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/theNightSoCold/article/details/72081963&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;idea 创建 log4j 文件&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>springAutoAssembly</title>
    <link href="http://yoursite.com/2018/08/10/springAutoAssembly/"/>
    <id>http://yoursite.com/2018/08/10/springAutoAssembly/</id>
    <published>2018-08-10T06:19:16.000Z</published>
    <updated>2018-08-16T16:03:04.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过-Java-代码装配-bean"><a href="#通过-Java-代码装配-bean" class="headerlink" title="通过 Java 代码装配 bean"></a>通过 Java 代码装配 bean</h2><p>通常组件扫描和自动化装配实现 Spring 的自动化配置，但是有时候例如要将第三方库中的组件装配到你的应用中，这种情况下没办法在它的类上添加 @Component 和 @Autowired 注解，就不能使用自动化配置了。</p><p>需要进行显示装配方式：java/XML</p><p>java(javaConfig) 是比较好的方案，它更强大、类型安全、对重构友好，它是 java 代码，但是 JavaConfig 是配置代码，不应该包含任何业务逻辑，会将其放在单独的包中与其他应用程序逻辑分离开。</p><a id="more"></a><h4 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h4><p>如果去掉 CDPlayerConfig 的 @ComponentScan 注解，再次运行 CDPlayerTest 的话，测试会失败，出现异常。测试期望被注入CDPlayer 和 CompactDisc，但是这些 bean 没有被创建，组件扫描不会发现它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.soundsystem;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">//@ComponentScan</span><br><span class="line">public class CDPlayerConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明简单的-bean"><a href="#声明简单的-bean" class="headerlink" title="声明简单的 bean"></a>声明简单的 bean</h4><p>在 <code>JavaConfig</code> 中声明 <code>bean</code> ，编写一个创建所需类型的实例的方法，给这个方法添加 <code>@Bean</code> 注解。</p><p>声明 <code>CompactDisc bean</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Bean 注解告诉 Spring 这个方法返回一个对象，该对象要注册为 Spring 应用上下文中的 <code>bean</code> ，方法体中包含了最终产生 <code>bean</code> 实例的逻辑。</p><p>默认情况下，<code>bean</code> 的 id 跟带有<code>@bean</code>注解的方法名一样，本例中为 <code>sgtPeppers</code>，如果要重新设置可以通过<code>name</code>属性指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"lonelyHeartsClubBand"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法体返回了一个新的 SgtPeppers 实例，因为是<code>java</code>代码所以可以使用<code>java</code>提供的全部功能，只要最终能生成<code>CompactDisc</code>实例就行。</p><p>可以用 <code>java</code>的功能在一组 CD 中随机选择一个 <code>CompactDisc</code> 播放：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">randomBeatlesCD</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice = (<span class="keyword">int</span>)Math.floor(Math.random()*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WhiteAlbum();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HardDaysNight();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">enw <span class="title">Revolver</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://www.cnblogs.com/bossen/p/5824067.html" target="_blank" rel="noopener">Spring中Bean及@Bean的理解</a></p><p>java 是面相对象，对象有方法和属性，需要对象实例来调用方法和属性（实例化），有方法或属性的类都需要实例化才能具象化地去使用这些方法和属性。bean 是类的代理，这样它就能代表类拥有该拥有的东西了。</p><h6 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h6><blockquote><p>使用 bean:  即是把已经在xml文件中配置好的Bean拿来用，完成属性、方法的组装；比如@Autowired , @Resource，可以通过byTYPE（@Autowired）、byNAME（@Resource）的方式获取Bean； </p></blockquote><blockquote><p>注册Bean:  @Component , @Repository , @ Controller , @Service , @Configration这些注解都是把你要实例化的对象转化成一个Bean，放在IoC容器中，等你要用的时候，它会和上面的@Autowired , @Resource配合到一起，把对象、属性、方法完美组装。 </p></blockquote><blockquote><p>@bean:  意思是@Bean明确地指示了一种方法，什么方法呢——产生一个bean的方法，并且交给Spring容器管理；从这我们就明白了为啥@Bean是放在方法的注释上了，因为它很明确地告诉被注释的方法，你给我产生一个Bean，然后交给Spring容器，剩下的你就别管了 </p></blockquote><ul><li><p>Spring 注入：</p><p>IOC 容器加载时会扫描 xml 文件中 bean 的配置，对这些 bean 进行实例化（初始化）。注入指在初始化一个实例的时候对这个实例的成员变量进行赋值。</p></li></ul><h4 id="借助-JavaConfig-实现注入"><a href="#借助-JavaConfig-实现注入" class="headerlink" title="借助 JavaConfig 实现注入"></a>借助 JavaConfig 实现注入</h4><p>当需要声明一个依赖于 CompactDisc 的 CDPlayer bean 时，可用如下方法在 JavaConfig 中进行装配：</p><ol><li><p>引用创建 bean 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(sgtPeppers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的 bean ID 为 cdPlayer，与方法名相同。cdPlayer() 方法没有使用默认的构造器构建实例，而是调用了需要传入 CompactDisc 对象的构造器来创建 CDPlayer 实例，但是它并不是通过调用 sgtPeppers() 方法得到的，sgtPeppers() 方法上添加了 @Bean 注解，所以 Spring 将会拦截所有对它的条用，会直接返回该方法所创建的 bean</p></li><li><p>cdPlayer() 方法请求一个 CompactDisc 作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactdisc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管 CompactDisc 使用什么方式创建出来的，Spring 都会将其传入到配置方法中，并用来创建 CDPlayer bean。以上构造器和下面的 Setter 方法只是 @Bean 的其中一些方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">CDPlayer cdPlayer = <span class="keyword">new</span> CDPlayer(compactDisc);</span><br><span class="line">cdPlayer.setCompactDisc(compactDisc)</span><br><span class="line">    <span class="keyword">return</span> cdPlayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="声明一个简单的"><a href="#声明一个简单的" class="headerlink" title="声明一个简单的 "></a>声明一个简单的 <bean></bean></h4><h5 id="属性注入（设值注入）"><a href="#属性注入（设值注入）" class="headerlink" title="属性注入（设值注入）"></a>属性注入（设值注入）</h5><p><bean> 元素类似于 JavaConfig 的 @Bean 注解。</bean></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"compactDisc"</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"compactDisc"</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id 为 cdPlayer 的 CDPlayer 类，其中有一个名称为 compactDisc 的成员变量。 </p><p><property> 元素为属性的 Setter 方法所提供的功能与 <constructor-arg> 元素为构造器所提供的功能相同。</constructor-arg></property></p><p>通过 ref 属性，引用了 ID 为 compactDisc 的 bean，用 setCompactDisc() 方法将其注入到 compactDisc 属性中。所以 CDPlayer 中必须有 setCompactDisc() 的方法，由 IOC 容器自动调用方法进行赋值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通过-Java-代码装配-bean&quot;&gt;&lt;a href=&quot;#通过-Java-代码装配-bean&quot; class=&quot;headerlink&quot; title=&quot;通过 Java 代码装配 bean&quot;&gt;&lt;/a&gt;通过 Java 代码装配 bean&lt;/h2&gt;&lt;p&gt;通常组件扫描和自动化装配实现 Spring 的自动化配置，但是有时候例如要将第三方库中的组件装配到你的应用中，这种情况下没办法在它的类上添加 @Component 和 @Autowired 注解，就不能使用自动化配置了。&lt;/p&gt;
&lt;p&gt;需要进行显示装配方式：java/XML&lt;/p&gt;
&lt;p&gt;java(javaConfig) 是比较好的方案，它更强大、类型安全、对重构友好，它是 java 代码，但是 JavaConfig 是配置代码，不应该包含任何业务逻辑，会将其放在单独的包中与其他应用程序逻辑分离开。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="autoAssembly" scheme="http://yoursite.com/tags/autoAssembly/"/>
    
  </entry>
  
  <entry>
    <title>spring 框架基础</title>
    <link href="http://yoursite.com/2018/08/02/spring/"/>
    <id>http://yoursite.com/2018/08/02/spring/</id>
    <published>2018-08-02T01:48:20.000Z</published>
    <updated>2019-01-28T15:16:05.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-框架基础"><a href="#Spring-框架基础" class="headerlink" title="Spring 框架基础"></a>Spring 框架基础</h2><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">面向对象编程</a>中的一种设计原则，可以用来减低计算机代码之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6" target="_blank" rel="noopener">耦合度</a>。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 </p><p>IOC 是一种设计模式，原来创建对象的主动权和时间是由自己控制的，现在把需要使用的对象的创建，销毁的控制权交给别人（IOC容器），使用时直接获取，这种对象可以单例或多例。IOC 有利于降低耦合度。</p><p><a href="http://www.360doc.com/content/18/0125/09/27831725_724899826.shtml" rel="noopener" target="_blank">依赖注入和控制反转的理解</a></p><p>AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335" target="_blank" rel="noopener">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。 </p><a id="more"></a><h4 id="idea-的简单-Spring-文件创建及测试"><a href="#idea-的简单-Spring-文件创建及测试" class="headerlink" title="idea 的简单 Spring 文件创建及测试"></a>idea 的简单 Spring 文件创建及测试</h4><ol><li>创建一个 project 勾选 Spring 及 web Application</li><li>创建 interface、实现接口类、配置类以及测试类</li></ol><p>idea 创建测试类方法：</p><p>在 bean 同目录下创建一个 test 测试文件夹，同时按住 ctrl+shift+alt+s 调出 project structure 窗口，选择modules 栏中的 Sources 栏，选中创建 test 文件夹，在 Mark as 栏选择 Tests，将 Tests 文件夹作为 Test 文件创建的目录。</p><p>在 实现接口类的类名上 alt+enter 选择 create test，在 TestLibrary 选择 JUnit4， 如果出现 JUnit4 Library notfound in the module ，点击 fix 选择 Use ‘JUnit4’ from idea distribution 点 ok，在下方 Member 栏将方法选中，可创建该类方法的测试方法</p><img src="/2018/08/02/spring/1533293101268.png" title="演示"><p>在测试类文件中类的上方添加注释 @RunWith(SpringJUnit4ClassRunner.class) 以便在测试开始的时候自动创建 Spring 的应用上下文</p><p>添加注解 @ContextConfiguration(classes=CDPlayerConfig.class) 表示需要在 CDPlayerConfig 中加载配置，因为 CDPlayerConfig 类中包含了 @ComponentScan ，则最终引用上下文也会包含 CompactiDisc 的bean</p><p>在类中添加 注释 表示将 bean 注入到测试代码之中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private CompactDisc cd;</span><br></pre></td></tr></table></figure><p>一个简单的测试方法，断言测试 cd 属性不为 null ，表示 spring 能够发现 CompactDisc 类，能自动在 Spring 上下文中创建 bean 并将其注入到测试代码中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void cdShouldNotBeNull()&#123;</span><br><span class="line">    assertNotNull(cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果运行测试类报错 org.junit 不存在</p><p>导入com.springsource.org.junit-4.7.0.jar 包</p><p>如果不行则继续下面操作：</p><p>ctrl + shift + alt + s 进入 project structure 窗口 ，在 Library 窗口 </p><p>点击左边绿色的加号 -&gt; Java -&gt; 找到 IDEA 安装路径下的 Lib 中的junit-4.12 -&gt; 确定 </p><hr><p>ctrl + shift + t 在 测试 文件与 被测试 文件间切换</p><p>在类名上 alt + enter，选择 Create test，第一栏选择 Juint4 ，如果有提示 Juint 4 library not found in the module，点击右边的 fix ，选择默认的 Use ‘Juint4’ from Intellj IDEA distribution ，ok，下面选择需要创建的Before 或 After 测试方法，以及需要创建的自己的方法。</p><p>如果需要更换 test 测试类的文件存放位置，可以在 Project Structure（ctrl+alt+shift+s）中选择 module 中的 source ，选择一个文件夹作为 test 文件的存放位置。</p><p><a href="https://www.youtube.com/watch?v=Bld3644bIAo" rel="noopener" target="_blank">idea 使用 Junit4 测试教程（需科学上网）</a></p><p><a href="https://blog.csdn.net/fighting_wzc/article/details/78960045" target="_blank" rel="noopener">idea 打开显示 Spring Configure check 解决方法</a></p><p>​    打开 Project Structure－&gt;Facets 配置。左侧 + 号，选择 Spring (添加 spring 配置文件的模块)</p><p>​    右侧 + 号，勾选项目，会选中项目及其下的 xml 文件 (设置添加没有被映射的Spring配置文件)，点击应用即可</p><hr><h4 id="为组件扫描的-bean-命名"><a href="#为组件扫描的-bean-命名" class="headerlink" title="为组件扫描的 bean 命名"></a>为组件扫描的 bean 命名</h4><p>Spring 应用上下文所有的 bean 一般都会根据类名指定一个 ID，将类名的第一个字母变为小写（SgtPeppers 设置为 sgtPeppers），如果要自己设置不同的 ID，则在 SgtPeppers 类注解 @Component 中配置 ID 名，如</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"lonelyHeartsClub"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  或者使用 @Named 注解也可以，但是通常使用 @Component</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Named</span>(<span class="string">"lonelyHeartsClub"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置组件扫描基础包"><a href="#设置组件扫描基础包" class="headerlink" title="设置组件扫描基础包"></a>设置组件扫描基础包</h4><p>如果没有为 @ComponentScan 设置任何属性，它会以配置类所在的包作为基础包（base package）来扫描组件（扫描）。如果想将装配类放在单独的包中跟其他的应用代码进行区分，那么默认基础包将不能满足要求。</p><p>为了指定不同的基础包，可以在 @ComponentScan 的 value 属性中指明包的名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"soundsystem)</span></span><br><span class="line"><span class="string">public class CDPlayerConfig &#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>如果为了更清楚地表明设置的是基础包，可以通过 basePackages 属性进行配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"soundsystem"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要设置多个基础包，可以将 basePackages 属性设置为需要扫描包的数组即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"soundsystem"</span>,<span class="string">"video"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上用 String 类型表示的基础包设置是类型不安全的(not type-safe)，如果重构代码的话，所指定的基础包可能会出错。</p><p>此时应用 @ComponentScan 指定包中所包含的类或接口,为 basePackageClasses 属性所设置的数组中包含了类，这些类所在的的包会作为组件扫描的基础包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackageClasses=(CDPlayer.class,DVDPlayer.class))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为-bean-添加注解实现自动装配"><a href="#为-bean-添加注解实现自动装配" class="headerlink" title="为 bean 添加注解实现自动装配"></a>为 bean 添加注解实现自动装配</h4><p>  CDPlayer 类中，给构造器添加 @Autowired 注解，表明当 Spring 创建 CDPlayer bean 时，会通过这个构造器来进行实例化，并且传入一个可设置给 CompactDisc 类型的 bean。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd = cd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  该注解可用在构造器，也可用在属性的 Setter 方法上，CDPlayer 有一个 setCompactDisc() 方法，可以采用如下的注解装配：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.cd = cd;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>  在 Spring 初始化 bean 后，它会尽可能满足 bean 的依赖，本例中的依赖是通过带有 @Autowired 注解声明的，@Autowired 能在构造器、Setter 方法，或者其他方法上发挥同样的作用，Spring 都会去满足方法参数上所声明的依赖。</p><p>  如果有且只有一个 bean 匹配依赖需求的话，那么这个 bean 会被装配进来。但没有匹配 bean 的情况下，在应用上下文创建的时候，Spring 会抛出一个异常，为了避免异常出现可以将 @Autowired 的 required 属性设置为 false，同时代码中需进行 null 检查。</p><p>  如果有多个 bean 满足依赖关系 Spring 会抛出一个异常。</p><p>  Autowired 是 Spring 特有注解，可以选择 @Inject 注解（源自 Java 依赖注入规范）代替。</p><h4 id="验证自动装配"><a href="#验证自动装配" class="headerlink" title="验证自动装配"></a>验证自动装配</h4><p>  <a href="http://mvnrepository.com/artifact/com.github.stefanbirkner/system-rules" rel="noopener" target="_blank">System Rules 库 </a></p><p>  <a href="https://yanbin.blog/java-unit-test-assert-console-output/#more-7504&quot; rel=&quot;external nofollow" target="_blank" rel="noopener">Java 单元测试如何断言(检查)控制台输出</a></p><p>  注入 CompactDisc ，注入 CDPlayer bean 到测试代码的 player 成员变量之中（为更通用的 MediaPlayer 类型），在 play 测试方法中，可以调用 CDPlayer 的 player() 方法，断言其行为与你的预期一致</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.contrib.java.lang.system.StandardOutputStreamLog;</span><br><span class="line"><span class="keyword">import</span> org.junit.contrib.java.lang.system.SystemOutRule;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes=CDPlayerConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> SystemOutRule log = <span class="keyword">new</span> SystemOutRule();</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MediaPlayer player;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    <span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertNotNull(cd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.play();</span><br><span class="line">        assertEquals(</span><br><span class="line">                <span class="string">"playing Sgt. Pepper's Lonely Hearts Club Band"</span> +</span><br><span class="line">                        <span class="string">"by The Beatles\n"</span>,</span><br><span class="line">                log.getLog();</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-框架基础&quot;&gt;&lt;a href=&quot;#Spring-框架基础&quot; class=&quot;headerlink&quot; title=&quot;Spring 框架基础&quot;&gt;&lt;/a&gt;Spring 框架基础&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;控制反转&lt;/strong&gt;（Inversion of Control，缩写为&lt;strong&gt;IoC&lt;/strong&gt;），是&lt;a href=&quot;https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向对象编程&lt;/a&gt;中的一种设计原则，可以用来减低计算机代码之间的&lt;a href=&quot;https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;耦合度&lt;/a&gt;。其中最常见的方式叫做&lt;strong&gt;依赖注入&lt;/strong&gt;（Dependency Injection，简称&lt;strong&gt;DI&lt;/strong&gt;），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 &lt;/p&gt;
&lt;p&gt;IOC 是一种设计模式，原来创建对象的主动权和时间是由自己控制的，现在把需要使用的对象的创建，销毁的控制权交给别人（IOC容器），使用时直接获取，这种对象可以单例或多例。IOC 有利于降低耦合度。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/18/0125/09/27831725_724899826.shtml&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;依赖注入和控制反转的理解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AOP为Aspect Oriented Programming的缩写，意为：&lt;a href=&quot;https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向切面编程&lt;/a&gt;，通过&lt;a href=&quot;https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;预编译&lt;/a&gt;方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是&lt;a href=&quot;https://baike.baidu.com/item/OOP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OOP&lt;/a&gt;的延续，是软件开发中的一个热点，也是&lt;a href=&quot;https://baike.baidu.com/item/Spring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring&lt;/a&gt;框架中的一个重要内容，是&lt;a href=&quot;https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数式编程&lt;/a&gt;的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的&lt;a href=&quot;https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;耦合度&lt;/a&gt;降低，提高程序的可重用性，同时提高了开发的效率。 &lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="IOC" scheme="http://yoursite.com/tags/IOC/"/>
    
      <category term="依赖" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96/"/>
    
      <category term="注入" scheme="http://yoursite.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis_Reply 微信自动回复</title>
    <link href="http://yoursite.com/2018/07/30/MyBatis-Reply/"/>
    <id>http://yoursite.com/2018/07/30/MyBatis-Reply/</id>
    <published>2018-07-30T07:48:55.000Z</published>
    <updated>2018-08-10T10:09:26.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现输入关键字微信自动回复的功能"><a href="#实现输入关键字微信自动回复的功能" class="headerlink" title="实现输入关键字微信自动回复的功能"></a>实现输入关键字微信自动回复的功能</h2><h4 id="添加一对多关系配置"><a href="#添加一对多关系配置" class="headerlink" title="添加一对多关系配置"></a>添加一对多关系配置</h4><p>创建 command 与关联数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table command(id int primary key , name varchar(16) , description varchar(16));</span><br><span class="line">create table command_content (id int primary key , content varchar(2048) , command_id int, foreign key(command_id) references command(id) on delete cascade on update cascade);</span><br></pre></td></tr></table></figure><p>查询主表的实体，将查询 sql 语句放在主表对应的 xml 文件中，将查询出的数据填充到主表对应的属性中，同时填充子表的列表</p><p>left join COMMAND_CONTENT 关联附表</p><p>COMMAND a       COMMAND_CONTENT b  给表取别名，主表为 a ；附表为 b</p><p>a.ID C_ID 给 a 表 ID 取别名为 C_ID</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ID C_ID,a.NAME,a.DESCRIPTION,b.Id,b.CONTENT,b.COMMAND_ID from COMMAND a left join COMMAND_CONTENT b on a.ID=b.COMMAND_ID</span><br></pre></td></tr></table></figure><p>mybatis 取属性名时，用的是 ResultSet 的 getMetaData().getColumnName(column); 方法</p><p>不会取到 a.ID 的 a 前缀</p><p>如果创建了不存在的 主表 id 对应 command_id 则无法再创建新的 column</p><img src="/2018/07/30/MyBatis-Reply/1533039910534.png" title="error"><p>空语句可以产生提示，有了内容就无法发送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">HTTP Status 500 – Internal Server Error</span><br><span class="line">Type Exception Report</span><br><span class="line"></span><br><span class="line">Description The server encountered an unexpected condition that prevented it from fulfilling the request.</span><br><span class="line"></span><br><span class="line">Exception</span><br><span class="line"></span><br><span class="line">org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: java.lang.IllegalArgumentException: Result Maps collection does not contain value for CommandContent.Content</span><br><span class="line">### The error may exist in com/imooc/config/sqlxml/Command.xml</span><br><span class="line">### The error may involve Command.queryCommandList</span><br><span class="line">### The error occurred while handling results</span><br><span class="line">### SQL: select a.ID C_ID,a.NAME,a.DESCRIPTION,b.Id,b.CONTENT,b.COMMAND_ID     from COMMAND a left join COMMAND_CONTENT b     on a.ID=b.COMMAND_ID</span><br><span class="line">### Cause: java.lang.IllegalArgumentException: Result Maps collection does not contain value for CommandContent.Content</span><br><span class="line">org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:150)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)</span><br><span class="line">com.imooc.dao.CommandDao.queryCommandList(CommandDao.java:34)</span><br><span class="line">com.imooc.service.QueryService.queryByCommand(QueryService.java:53)</span><br><span class="line">com.imooc.servlet.AutoReplyServlet.doGet(AutoReplyServlet.java:18)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:635)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">Root Cause</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: Result Maps collection does not contain value for CommandContent.Content</span><br><span class="line">org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:888)</span><br><span class="line">org.apache.ibatis.session.Configuration.getResultMap(Configuration.java:640)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getNestedResultMap(DefaultResultSetHandler.java:1011)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyNestedResultMappings(DefaultResultSetHandler.java:945)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:918)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForNestedResultMap(DefaultResultSetHandler.java:881)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:303)</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:196)</span><br><span class="line">org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)</span><br><span class="line">org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)</span><br><span class="line">org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)</span><br><span class="line">org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)</span><br><span class="line">org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)</span><br><span class="line">org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)</span><br><span class="line">org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)</span><br><span class="line">com.imooc.dao.CommandDao.queryCommandList(CommandDao.java:34)</span><br><span class="line">com.imooc.service.QueryService.queryByCommand(QueryService.java:53)</span><br><span class="line">com.imooc.servlet.AutoReplyServlet.doGet(AutoReplyServlet.java:18)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:635)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">Note The full stack trace of the root cause is available in the server logs.</span><br><span class="line"></span><br><span class="line">Apache Tomcat/8.5.29</span><br></pre></td></tr></table></figure><p>原因：在 Command.xml 中的 collention 属性的 ResultMap 引用 CommandContent.xml 下的 id ,引用名错误</p><p>方法：(CommandContent.ResultMap).id=”Content”</p><p>(Command.Collection)ResultMap=”CommandContent.Content”</p><p>如果没有在 Configuration.xml 文件中引入 CommandContent.xml 与 Command.xml 也会产生该错误</p><h4 id="mybatis-一对多关系的配置"><a href="#mybatis-一对多关系的配置" class="headerlink" title="mybatis 一对多关系的配置"></a>mybatis 一对多关系的配置</h4><p>数据库子表内含“段子”关键词的多个内容，对应主表的“段子”的 id 。每次用户发送”段子“时，取出其中的所有内容，拼接进查询服务 QueryService 中创建的 (List)contentList 集合中，再创建随机数返回其中一条内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--类似于 java package 的用法，用来区分不同项目,namespace 必须添加--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--作为子表包含具体多个内容对应主表的一个 id 然后被主表所引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"CommandContent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.imooc.bean.CommandContent"</span> <span class="attr">id</span>=<span class="string">"Content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CONTENT"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"COMMAND_ID"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"commandId"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--类似于 java package 的用法，用来区分不同项目,namespace 必须添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Command"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要反应一个一对多关系，需要用到在主表中引用子表列表的集合,引用CommandContent.xml 中的 Content 属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.imooc.bean.Command"</span> <span class="attr">id</span>=<span class="string">"Command"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"C_ID"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"NAME"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"DESCRIPTION"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"contentList"</span> <span class="attr">resultMap</span>=<span class="string">"CommandContent.Content"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--查询主表同时关联子表--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryCommandList"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.bean.Command"</span> <span class="attr">resultMap</span>=<span class="string">"Command"</span>&gt;</span></span><br><span class="line">    select a.ID C_ID,a.NAME,a.DESCRIPTION,b.Id,b.CONTENT,b.COMMAND_ID</span><br><span class="line">    from COMMAND a left join COMMAND_CONTENT b</span><br><span class="line">    on a.ID=b.COMMAND_ID</span><br><span class="line">      <span class="comment">&lt;!--where 关键字指，在其中的 if 语句都不满足条件则不输出 where 关键字，反之，有一个 if 满足则输出 where + if 中语句--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--where 还能将 if 拼接的 sql 语句最前端的 and 去掉，防止语句不准确--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(name.trim()) "</span>&gt;</span></span><br><span class="line">     and a.NAME=#&#123;name&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">     and a.DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上两个 xml 要引入到 Configuration.xml 中</p><h4 id="将原来的单条信息查询改为一对多的数据查询"><a href="#将原来的单条信息查询改为一对多的数据查询" class="headerlink" title="将原来的单条信息查询改为一对多的数据查询"></a>将原来的单条信息查询改为一对多的数据查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Command;</span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.CommandContent;</span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.CommandDao;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"><span class="keyword">import</span> com.imooc.util.Iconst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command, String description)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="keyword">return</span> messageDao.queryMessageList(command,description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过指令查询自动回复内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryByCommand</span><span class="params">(String command)</span></span>&#123;</span><br><span class="line"><span class="comment">//        MessageDao messageDao = new MessageDao();</span></span><br><span class="line">        CommandDao commandDao = <span class="keyword">new</span> CommandDao();</span><br><span class="line"><span class="comment">//        List&lt;Message&gt; messageList;</span></span><br><span class="line">        List&lt;Command&gt; commandList;</span><br><span class="line">        <span class="keyword">if</span>(Iconst.HELP_COMMAND.equals(command))&#123;</span><br><span class="line"><span class="comment">//            如果指令是帮助，则将所有指令查出来并拼接；</span></span><br><span class="line"><span class="comment">//            messageList = messageDao.queryMessageList(null, null);</span></span><br><span class="line">            commandList = commandDao.queryCommandList(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//            for(int i= 0;i &lt; messageList.size();i++)&#123;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i &lt; commandList.size();i++)&#123;</span><br><span class="line">                <span class="comment">//如果不是第一行则添加换行</span></span><br><span class="line">                <span class="keyword">if</span>(i !=<span class="number">0</span>)&#123;</span><br><span class="line">                    result.append(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                拼接所有查询出来的指令及描述</span></span><br><span class="line"><span class="comment">//                result.append("回复[" + messageList.get(i).getCommand() + "]可以查看"</span></span><br><span class="line"><span class="comment">//                        + messageList.get(i).getDescription());</span></span><br><span class="line">                result.append(<span class="string">"回复["</span> + commandList.get(i).getName() + <span class="string">"]可以查看"</span></span><br><span class="line">                        + commandList.get(i).getDescription());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只需要通过指令，不需要描述来查询自动回复,如果为 null 则不进入 if 判断语句，不会添加 and sql 语句</span></span><br><span class="line"><span class="comment">//        messageList = messageDao.queryMessageList(command, null);</span></span><br><span class="line"><span class="comment">//        if(messageList.size() &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">//            return messageList.get(0).getContent();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        commandList = commandDao.queryCommandList(command, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span>(commandList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//取得第一条查询语句的 子表集合内容/列表信息</span></span><br><span class="line">            List&lt;CommandContent&gt; contentList = commandList.get(<span class="number">0</span>).getContentList();</span><br><span class="line">            <span class="comment">//取得列表信息其中一条返回</span></span><br><span class="line">            <span class="comment">//取 [0,size()) 的随机数</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="keyword">new</span> Random().nextInt(contentList.size());</span><br><span class="line"><span class="comment">//            取得随机的 commandContent 的对象，然后从对象中取得内容</span></span><br><span class="line">            <span class="keyword">return</span> contentList.get(i).getContent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当指令没有匹配的回复内容时，用此内容替代</span></span><br><span class="line">        <span class="keyword">return</span> Iconst.NO_MATCHING_CONTENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动回复 servlet 将跳转功能转换为 写查询返回语句的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.service.QueryService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoReplyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        QueryService queryService = <span class="keyword">new</span> QueryService();</span><br><span class="line">        out.write(queryService.queryByCommand(req.getParameter(<span class="string">"content"</span>)));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><ol><li><p>where 标签</p><p>where标签 在其中的 if 语句都不满足条件则不输出 where 关键字，反之，有一个 if 满足则输出 where + if 中语句<br>where 还能将 if 拼接的 sql 语句最前端的 and 去掉，防止语句不准确</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">   and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去掉 where 1=1 ，但是加上 where 标签即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">   and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>include 引用标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE</span><br></pre></td></tr></table></figure></li></ol><p>语句能用以下语法代替</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"columns"</span>/&gt;</span> from MESSAGE</span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"columns"</span>&gt;</span>ID,COMMAND,DESCRIPTION,CONTENT<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>set 标签</li></ol><p>修改升级数据库的功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update MESSAGE set COMMAND=#&#123;command&#125;,DESCRIPTION=#&#123;description&#125;</span><br></pre></td></tr></table></figure><p>update 标签</p><p>为了使 sql 语句结尾的 ‘,’ 不多余加入了 set 标签，效果跟 where 去 and 类似，能去掉语句最后多余的 ‘,’</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">update MESSAGE set </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span></span><br><span class="line">        COMMAND=#&#123;command&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">     and DESCRIPTION=#&#123;description&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    COMMAND=#&#123;command&#125;,DESCRIPTION=#&#123;description&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>trim标签</li></ol><blockquote><p>trim 标签中的 prefix 属性，表示前缀，可以等于 where/set…（可自定义）如果各种判断结束有字符串输出就加入 where/set…</p></blockquote><blockquote><p>trim 标签中的 suffix 属性，表示后面，可以加 test 或自定义 ，如果 if 中有内容输出就在最后加一个 test</p></blockquote><blockquote><p>trim 标签的 prefixOverride 属性，表示删除前面内容，例如 prefixOverride=”and/or” 如果在前面出现了and 与 or 则切掉，同理 suffixOverride=”,” 可以去除结尾的 ‘,’</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当 prefix 值为 where 且能去掉首部的 and/or，该 trim 能替换 where 标签</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverride</span>=<span class="string">"and/or"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">同理当 prefix 值为 set 且去掉尾部的 ','，该 trim 能替换 set 标签</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverride</span>=<span class="string">","</span>&gt;</span><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>choose 标签</li></ol><p>chosse when 相当于 java 中的 else if，又或者是 switch case</p><p>choose otherwise 相当于 else，或者是 default</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">   and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>association 标签</li></ol><p>需要根据子表内容查询相关联的主表内容，association 与 collection 标签相似 。 property 为 bean 中主表实体的引用，resultMap 指向主表的 nameSpace.(resultMap 的 id)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"command"</span> <span class="attr">resultMap</span>=<span class="string">"Command.Command"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="标签总结"><a href="#标签总结" class="headerlink" title="标签总结"></a>标签总结</h4><ol><li>定义 sql 语句</li></ol><p>insert，delete，update，select</p><ol start="2"><li>配置 java 对象属性与查询结果集中列名的对应关系（列名不是数据库表中的列名，而是查询结果集的列名）</li></ol><p>resultMap</p><ol start="3"><li>动态拼接 sql 语句</li></ol><p>foreach，if，choose</p><ol start="4"><li>格式化输出（动态拼接 sql 语句不符合 sql 语法，对该语法进行格式化）</li></ol><p>where，set，trim</p><ol start="5"><li>配置关联关系（一对多，多对一）</li></ol><p>collention，association</p><ol start="6"><li>常量标签（可在需要地方引用他）</li></ol><p>sql </p><ol start="7"><li>引用标签（引用常量标签）</li></ol><p>include</p><p>resultMap 使用标签配置对应关系，结果集列名与 java 类属性名可以不相同，有 typeHandler 可以配置字符集</p><p>resultType 不需要进行配置，但是结果集中的列名与 java 类中的属性名相同</p><p>parameterType 与 ognl 表达式相关联  #{}</p><p>parameterMap 与 resultMap 相似，需要指向 ParameterMap 标签配置的映射关系的 id 。表示参数中的属性与数据库列的对应关系。</p><p>以 Map 结尾表示映射，需要配置映射关系</p><p>Type 结尾表示类型，resultType 与 parameterType 原名 resultClass 与 parameterClass，与 java 类类似</p><p>#{} 被 mybatis 解析为 ？，然后被 preparedStatement 赋值为 ‘段子’，有预编译效果，一半采用该方法</p><p>${} 直接被 mybatis 拼接 字符串 （String）段子，没有引号，需要自己添加单引号 ‘${command}’</p><p> ${} 一般用于取直接从页面上传过来的列名进行操作</p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ul><li><p>sql 语法错误：使用 log4j 查看拼接后的 sql 语句，将其复制到 nativeMysql 中，将值赋给 ？的占位符，进行 sql 语句的判断</p></li><li><p>注解型 sql 比 配置型 sql 方便，但是有局限性</p></li><li><p>编码问题 ：文件本身编码、jsp 设置编码、servlet 接受页面传值，用来转换的编码、用 get 方式提交中文时，tomcat 也要配置编码</p><p>网页乱码 :</p><p>在talk.jsp上方加上 </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span>    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>  prefix=<span class="string">"c"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ul><p>  若以上全部配置好，而与数据库交互出现乱码，则在 Configuration.xml 写连接数据库的 url 时，就需要加上编码方式、建立数据库与建表时的编码也需要注意获取自增主键值：</p><ul><li><p>useGeneratedKeys : 表示插入到这张表时采用生成的主键,而不是自己指定一个主键，Command 这个类的其他属性值来自于页面，而 id 是自增的，所以页面中没有 id 值</p></li><li><p>keyProperty : mybatis 会取到新增数据的主键，keyProperty 用来告诉 mybatis 将主键存到 Command 对象的哪一个属性中，这里的主键应该是 id.</p></li><li><p>在 Command 对象传入 xml 时，id 是没有值的，在 sqlSession 调用配置中 sql 语句执行完后，id 就有值了</p></li></ul><p>在talk.jsp上方加上 </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span>    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>  prefix=<span class="string">"c"</span> %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">userGeneratedKeys</span>=<span class="string">"ture"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.bran.Command"</span>&gt;</span></span><br><span class="line">insert into COMMAND(NAME,DESCRIPTION) value(#&#123;name&#125;,#&#123;description&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>向 js 文件中传地址：</li></ul><p>添加一个隐藏块，通过 id 与 value 向 js 中传入 basePath 的值</p><ul><li>idea rename 一个类：</li></ul><p>在一个类上右键 refactor → rename → 修改类名 → 取消 Search in Comments and strings (在评论和字符串中搜索) 跟 Search for textoccurrences (搜索文本事件) → 选择 variable name 点击 ok 即可</p><ol><li>如果不取消 2 个勾选，rename 会无效。 </li><li>选择 variable name 会使得子类重命名在调用该类对象的对象名</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实现输入关键字微信自动回复的功能&quot;&gt;&lt;a href=&quot;#实现输入关键字微信自动回复的功能&quot; class=&quot;headerlink&quot; title=&quot;实现输入关键字微信自动回复的功能&quot;&gt;&lt;/a&gt;实现输入关键字微信自动回复的功能&lt;/h2&gt;&lt;h4 id=&quot;添加一对多关系配置&quot;&gt;&lt;a href=&quot;#添加一对多关系配置&quot; class=&quot;headerlink&quot; title=&quot;添加一对多关系配置&quot;&gt;&lt;/a&gt;添加一对多关系配置&lt;/h4&gt;&lt;p&gt;创建 command 与关联数据库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create table command(id int primary key , name varchar(16) , description varchar(16));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create table command_content (id int primary key , content varchar(2048) , command_id int, foreign key(command_id) references command(id) on delete cascade on update cascade);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查询主表的实体，将查询 sql 语句放在主表对应的 xml 文件中，将查询出的数据填充到主表对应的属性中，同时填充子表的列表&lt;/p&gt;
&lt;p&gt;left join COMMAND_CONTENT 关联附表&lt;/p&gt;
&lt;p&gt;COMMAND a       COMMAND_CONTENT b  给表取别名，主表为 a ；附表为 b&lt;/p&gt;
&lt;p&gt;a.ID C_ID 给 a 表 ID 取别名为 C_ID&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="autoReply" scheme="http://yoursite.com/tags/autoReply/"/>
    
      <category term="weChat" scheme="http://yoursite.com/tags/weChat/"/>
    
  </entry>
  
  <entry>
    <title>jdbcToMyBatis</title>
    <link href="http://yoursite.com/2018/07/25/jdbcToMyBatis/"/>
    <id>http://yoursite.com/2018/07/25/jdbcToMyBatis/</id>
    <published>2018-07-25T09:32:40.000Z</published>
    <updated>2018-08-10T08:36:38.065Z</updated>
    
    <content type="html"><![CDATA[<p>css 设置不显示问题：</p><p>将 resources 放入了 WEB-INF 文件夹中（这文件夹中的内容只能根据内部跳转或重定向等网页操作才能访问，不能直接访问）</p><p>request.getContextPath() 获取的是上下文路径。是你的web项目的根路径，就是 webContent (MyEclipse中是webRoot) 或者 idea 中的 web 路径</p><p><a href="https://www.cnblogs.com/qq3111901846/p/6242096.html" rel="noopener" target="_blank">拼装当前网页相对路径</a></p><p><a href="https://blog.csdn.net/cos_sin_tan/article/details/45311793" rel="noopener" target="_blank">url-pattern 配置</a></p><p>此文为 jdbc 版，如已了解直接转至 <a href="https://crow-song.github.io/2018/07/23/MyBatis/" rel="noopener" target="_blank">mybatis版</a></p><a id="more"></a><ul><li>第一版大体框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;%--拼接当前网页相对路径--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span>content=<span class="string">"IE=9; IE=8; IE=7; IE=EDGE"</span> /&gt;</span><br><span class="line">&lt;title&gt;内容列表页面&lt;/title&gt;</span><br><span class="line">&lt;%--css 文件的相对路径--%&gt;</span><br><span class="line">&lt;link href=<span class="string">"resources/css/all.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=<span class="string">"background: #e1e9eb;"</span>&gt;</span><br><span class="line"> &lt;form action=<span class="string">""</span> id=<span class="string">"mainForm"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"current"</span>&gt;当前位置：&lt;br/&gt;</span><br><span class="line">        &lt;a href=<span class="string">"javascript:void(0)"</span> style=<span class="string">"color:#6E6E6E;"</span>&gt;</span><br><span class="line">            内容管理</span><br><span class="line">        &lt;/a&gt; &amp;gt; 内容列表</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"rightCont"</span>&gt;</span><br><span class="line">        &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"g_title fix"</span>&gt;内容列表 </span><br><span class="line">            &lt;a class="btn03" href="#"&gt;新 增&lt;/a&gt;</span><br><span class="line">            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;a class="btn03" href="#"&gt;删 除&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab1"</span>&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width="90" align="right"&gt;演示字段1：&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td width="90" align="right"&gt;演示字段2：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td width=<span class="string">"85"</span> align=<span class="string">"right"</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"submit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tabSub"</span> value=<span class="string">"查 询"</span> /&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"zixun fix"</span>&gt;</span><br><span class="line">        &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab2"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;&lt;input type="checkbox" id="all" onclick="#"/&gt;&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;演示字段1&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;演示字段2&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr style=<span class="string">"background-color:#ECF6EE;"</span>&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr style=<span class="string">"background-color:#ECF6EE;"</span>&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;4&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值1&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;演示值2&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'page fix'</span>&gt;</span><br><span class="line">            共 &lt;b&gt;4&lt;/b&gt; 条</span><br><span class="line">            &lt;a href='###' class='first'&gt;首页&lt;/a&gt;</span><br><span class="line">            &lt;a href='###' class='pre'&gt;上一页&lt;/a&gt;</span><br><span class="line">            当前第&lt;span&gt;1/1&lt;/span&gt;页</span><br><span class="line">            &lt;a href='###' class='next'&gt;下一页&lt;/a&gt;</span><br><span class="line">            &lt;a href='###' class='last'&gt;末页&lt;/a&gt;</span><br><span class="line">            跳至&amp;nbsp;&lt;input type=<span class="string">'text'</span> value=<span class="string">'1'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'allInput w28'</span> /&gt;&amp;nbsp;页&amp;nbsp;</span><br><span class="line">            &lt;a href='###' class='go'&gt;GO&lt;/a&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">       </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line">         version=<span class="string">"3.1"</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;welcome-file-list&gt;</span><br><span class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;/welcome-file-list&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此处可用 servlet 中的注释代替</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    &lt;!--&lt;servlet&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;servlet-name&gt;ListServlet&lt;/servlet-name&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">imooc</span>.<span class="title">servlet</span>.<span class="title">ListServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;--&gt;</span></span><br><span class="line"><span class="class">    &lt;!--&lt;/<span class="title">servlet</span>&gt;--&gt;</span></span><br><span class="line"><span class="class">    &lt;!--&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;--&gt;</span></span><br><span class="line"><span class="class">        &lt;!--&lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">ListServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;--&gt;</span></span><br><span class="line">         &lt;!--访问 http://localhost:8080/List.action 后跳转到 list.jsp 页面--&gt;   </span><br><span class="line">        &lt;!--&lt;url-pattern&gt;/List.action&lt;/url-pattern&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/servlet-mapping&gt;--&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指令名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String command;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>第一版完善</li></ul><p>完善 list.jsp 及 ListSerlvet.java 的相关部分</p><p>sql 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sql preparedstatement 语句</span></span><br><span class="line"><span class="comment">// ? 占位符</span></span><br><span class="line"><span class="comment">// 用缺省值的方式，使用 List 在后面遍历填充字段信息比较方便</span></span><br><span class="line">stringsql = <span class="string">"select * from people p where p.id = ? and p.name = ?"</span>;</span><br><span class="line">preparedstatement ps = connection.preparestatement(sql);</span><br><span class="line"><span class="comment">//设置缺省值的值</span></span><br><span class="line"><span class="comment">//index 的值从 1 开始</span></span><br><span class="line">ps.setint(<span class="number">1</span>,id);</span><br><span class="line">ps.setstring(<span class="number">2</span>,name);</span><br><span class="line"><span class="comment">//执行 sql 语句</span></span><br><span class="line">resultset rs = ps.executequery();</span><br></pre></td></tr></table></figure><p>list.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;%--使用 jstl--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%--拼接当前网页相对路径--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span>content=<span class="string">"IE=9; IE=8; IE=7; IE=EDGE"</span> /&gt;</span><br><span class="line">&lt;title&gt;内容列表页面&lt;/title&gt;</span><br><span class="line">&lt;%--css 文件的相对路径--%&gt;</span><br><span class="line">&lt;link href=<span class="string">"&lt;%=basePath%&gt;/resources/css/all.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=<span class="string">"background: #e1e9eb;"</span>&gt;</span><br><span class="line">&lt;%--提交到 ListServlet 上进行初始化与查询--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"&lt;%=basePath%&gt;/List.action"</span> id=<span class="string">"mainForm"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">&lt;div class="current"&gt;当前位置：&lt;a href="javascript:void(0)" style="color:#6E6E6E;"&gt;内容管理&lt;/a&gt; &amp;gt; 内容列表&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"rightCont"</span>&gt;</span><br><span class="line">&lt;p class="g_title fix"&gt;内容列表 &lt;a class="btn03" href="#"&gt;新 增&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a class="btn03" href="#"&gt;删 除&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab1"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;指令名称：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"command"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;command&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;描述：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"description"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;description&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">                            &lt;td width="85" align="right"&gt;&lt;input type="submit" class="tabSub" value="查 询" /&gt;&lt;/td&gt;</span><br><span class="line">       &lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"zixun fix"</span>&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab2"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;th&gt;&lt;input type="checkbox" id="all" onclick="#"/&gt;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段1&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段2&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;messageList&#125;"</span> var=<span class="string">"message"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;tr &lt;c:if test="$&#123;status.index % 2 != 0&#125;"&gt;style='background-color:#ECF6EE;'&lt;/c:if&gt;&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" /&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;status.index + 1&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.command&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.description&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;a href="#"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'page fix'</span>&gt;</span><br><span class="line">共 &lt;b&gt;4&lt;/b&gt; 条</span><br><span class="line">&lt;a href='###' class='first'&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='pre'&gt;上一页&lt;/a&gt;</span><br><span class="line">当前第&lt;span&gt;1/1&lt;/span&gt;页</span><br><span class="line">&lt;a href='###' class='next'&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='last'&gt;末页&lt;/a&gt;</span><br><span class="line">跳至&amp;nbsp;&lt;input type=<span class="string">'text'</span> value=<span class="string">'1'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'allInput w28'</span> /&gt;&amp;nbsp;页&amp;nbsp;</span><br><span class="line">&lt;a href='###' class='go'&gt;GO&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ListServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到表单文本框提交的数据</span></span><br><span class="line">            req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            String command = req.getParameter(<span class="string">"command"</span>);</span><br><span class="line">            String description = req.getParameter(<span class="string">"description"</span>);</span><br><span class="line">            <span class="comment">//将查询完的值保留在查询栏中</span></span><br><span class="line">            req.setAttribute(<span class="string">"command"</span>,command);</span><br><span class="line">            req.setAttribute(<span class="string">"description"</span>,description);</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/micro_message"</span>,</span><br><span class="line">                    <span class="string">"root"</span>,<span class="string">"dfwhj43815"</span>);</span><br><span class="line">            StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1"</span>);</span><br><span class="line">            <span class="comment">//创建一个 List 将需要拼接的 sql 语句查询内容装进去，最后用 for 循环取出，set 到 PreparedStatement 后执行</span></span><br><span class="line">            List&lt;String&gt; paramList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="comment">//.trim() 方法返回一个 String 的副本，用来去除首尾的空格</span></span><br><span class="line">            <span class="keyword">if</span>(command != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(command.trim()))&#123;</span><br><span class="line">            <span class="comment">//查询sql语句拼接不用sql.append(" and command = '"+command+"'")  因为容易被SQL注入攻击</span></span><br><span class="line">                sql.append(<span class="string">" and COMMAND=?"</span>);</span><br><span class="line">                paramList.add(command);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(description != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(description.trim()))&#123;</span><br><span class="line">                sql.append(<span class="string">" and DESCRIPTION like '%' ? '%'"</span>);</span><br><span class="line">                paramList.add(description);</span><br><span class="line">            &#125;</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql.toString());</span><br><span class="line">            <span class="comment">//在 sql 语句执行前，将参数加进去</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramList.size(); i++) &#123;</span><br><span class="line">                ps.setString(i + <span class="number">1</span>,paramList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            List&lt;Message&gt;messageList = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                <span class="comment">//添加到容器中的不是对象本身，此时操作对象仍可以改变在容器中的内容。</span></span><br><span class="line">                <span class="comment">//也可以将对象在最后添加到容器</span></span><br><span class="line">                message.setId(rs.getString(<span class="string">"ID"</span>));</span><br><span class="line">                message.setCommand(rs.getString(<span class="string">"COMMAND"</span>));</span><br><span class="line">                message.setDescription(rs.getString(<span class="string">"DESCRIPTION"</span>));</span><br><span class="line">                message.setContent(rs.getString(<span class="string">"CONTENT"</span>));</span><br><span class="line">                messageList.add(message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将容器添加到 request 的 attribute 可以在页面上显示出来</span></span><br><span class="line">            req.setAttribute(<span class="string">"messageList"</span>,messageList);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u013806366/article/details/51979930" rel="noopener" target="_blank">idea 引入 c 标签</a></p><p>网页有框架没有数据，提示找不到 jdbc，没有正确导入 Driver 包；</p><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘message’ at line 1</p><p>​    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)<br>    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)<br>    at java.lang.reflect.Constructor.newInstance(Unknown Source)</p><p>Sql 语句有语法错误：from 写成了 form</p><hr><ul><li><p>第一版代码重构</p><p>将原来 servlet 的功能分出去</p></li></ul><ol><li><p>servlet 的功能</p><p>设置编码</p><p>接受页面的值</p><p>向页面传值</p></li><li><p>dao 层的功能</p><p>根据查询条件查询消息列表，跟表 Message 相关的所有操作都在这层</p></li><li><p>service 层的功能</p><p>调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</p></li></ol><p><img src="D:\hexo\source\_posts\jdbcToMyBatis\1532415686359.png" alt="项目目录"></p><p>ListSerlvet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.service.ListService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//接受页面的值</span></span><br><span class="line">        String command = req.getParameter(<span class="string">"command"</span>);</span><br><span class="line">        String description = req.getParameter(<span class="string">"description"</span>);</span><br><span class="line">        <span class="comment">//向页面传值</span></span><br><span class="line">        req.setAttribute(<span class="string">"command"</span>,command);</span><br><span class="line">        req.setAttribute(<span class="string">"description"</span>,description);</span><br><span class="line">        <span class="comment">//查询消息列表并传给页面。调用 ListService 的函数，将查询的结果放到 req 中</span></span><br><span class="line">        ListService listService = <span class="keyword">new</span> ListService();</span><br><span class="line">        req.setAttribute(<span class="string">"messageList"</span>,listService.queryMessageList(command,description));</span><br><span class="line">        <span class="comment">//向页面跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao 层跟表相关，此 dao 包含跟 message 表相关的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据查询条件查询消息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command,String description)</span></span>&#123;</span><br><span class="line">        List&lt;Message&gt;messageList = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/micro_message"</span>,</span><br><span class="line">                    <span class="string">"root"</span>,<span class="string">"dfwhj43815"</span>);</span><br><span class="line">            StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1"</span>);</span><br><span class="line">            <span class="comment">//创建一个 List 将需要拼接的 sql 语句查询内容装进去，最后用 for 循环取出，set 到 PreparedStatement 后执行</span></span><br><span class="line">            List&lt;String&gt; paramList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="comment">//.trim() 方法返回一个 String 的副本，用来去除首尾的空格</span></span><br><span class="line">            <span class="keyword">if</span>(command != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(command.trim()))&#123;</span><br><span class="line">                <span class="comment">//查询sql语句拼接不用sql.append(" and command = '"+command+"'")  因为容易被SQL注入攻击</span></span><br><span class="line">                sql.append(<span class="string">" and COMMAND=?"</span>);</span><br><span class="line">                paramList.add(command);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(description != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(description.trim()))&#123;</span><br><span class="line">                sql.append(<span class="string">" and DESCRIPTION like '%' ? '%'"</span>);</span><br><span class="line">                paramList.add(description);</span><br><span class="line">            &#125;</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql.toString());</span><br><span class="line">            <span class="comment">//在 sql 语句执行前，将参数加进去</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramList.size(); i++) &#123;</span><br><span class="line">                ps.setString(i + <span class="number">1</span>,paramList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                <span class="comment">//添加到容器中的不是对象本身，此时操作对象仍可以改变在容器中的内容。</span></span><br><span class="line">                <span class="comment">//也可以将对象在最后添加到容器</span></span><br><span class="line">                message.setId(rs.getString(<span class="string">"ID"</span>));</span><br><span class="line">                message.setCommand(rs.getString(<span class="string">"COMMAND"</span>));</span><br><span class="line">                message.setDescription(rs.getString(<span class="string">"DESCRIPTION"</span>));</span><br><span class="line">                message.setContent(rs.getString(<span class="string">"CONTENT"</span>));</span><br><span class="line">                messageList.add(message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> messageList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command, String description)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="keyword">return</span> messageDao.queryMessageList(command,description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css 设置不显示问题：&lt;/p&gt;
&lt;p&gt;将 resources 放入了 WEB-INF 文件夹中（这文件夹中的内容只能根据内部跳转或重定向等网页操作才能访问，不能直接访问）&lt;/p&gt;
&lt;p&gt;request.getContextPath() 获取的是上下文路径。是你的web项目的根路径，就是 webContent (MyEclipse中是webRoot) 或者 idea 中的 web 路径&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/qq3111901846/p/6242096.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;拼装当前网页相对路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/cos_sin_tan/article/details/45311793&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;url-pattern 配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此文为 jdbc 版，如已了解直接转至 &lt;a href=&quot;https://crow-song.github.io/2018/07/23/MyBatis/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mybatis版&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="jdbc" scheme="http://yoursite.com/tags/jdbc/"/>
    
      <category term="myBatis" scheme="http://yoursite.com/tags/myBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="http://yoursite.com/2018/07/23/MyBatis/"/>
    <id>http://yoursite.com/2018/07/23/MyBatis/</id>
    <published>2018-07-23T07:00:11.000Z</published>
    <updated>2018-11-05T09:40:59.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用-mybatis-替代-jdbc"><a href="#用-mybatis-替代-jdbc" class="headerlink" title="用 mybatis 替代 jdbc"></a>用 mybatis 替代 jdbc</h2><p><a href="https://github.com/mybatis/mybatis-3/releases" rel="noopener" target="_blank">mybatis 下载地址</a></p><p><a href="https://crow-song.github.io/2018/07/25/jdbcToMyBatis/" rel="noopener" target="_blank">jdbc 版跳转此处</a></p><h4 id="dao-层、mybatis-及-SqlSession-作用"><a href="#dao-层、mybatis-及-SqlSession-作用" class="headerlink" title="dao 层、mybatis 及 SqlSession 作用"></a>dao 层、mybatis 及 SqlSession 作用</h4><p>dao (data access objection 数据访问对象)层需求 ：</p><ol><li>能与数据库交互</li><li>能执行 sql 语句</li></ol><p>mybatis ：向 dao 层提供对象 SqlSession</p><p>SqlSession 作用：</p><ol><li>向 sql 语句传入参数</li><li>执行 sql 语句</li><li>获取执行 sql 语句的结果</li><li>事务的控制</li></ol><p>如何得到 SqlSession：</p><ol><li>通过配置文件获取数据库连接的相关信息</li><li>通过配置信息构建 SqlSessionFactory</li><li>通过 SqlSessionFactory 打开 数据库会话（SqlSession）</li></ol><a id="more"></a><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指令名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String command;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Copyright 2009-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">       you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">       You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">       distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">       See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">       limitations under the License.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--类似于 java package 的用法，用来区分不同项目,namespace 必须添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Message"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--对应 jdbc 的 message.setId(rs.getString("ID")); 等方法--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--type 表示的是数据库字段对应 java 中哪个类的对象；id 随意取名；--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果在数据库中为主键，则配 id colum,否则配 result colum 标签；--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--colum 对应数据库列的属性名；property 是数据库对应 java bean对象中的属性名--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbcType 对应数据库中属性的类型 Int、varchar 等--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.imooc.bean.Message"</span> <span class="attr">id</span>=<span class="string">"MessageResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"COMMAND"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"command"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"DESCRIPTION"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CONTENT"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select id 必须是唯一的，但与 resultMap 中的 id 可以重名--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--parameterType 是传入 sqlSession 的参数的属性--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--resultMap 指向 resultMap 标签的 id--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--OGNL 表达式 如果是自定义类型就直接写自定义属性的属性名（command）--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--可以从 java 对象中调用属性值 而且可以直接调用 java 对象的方法--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--但是 与符号 &amp;&amp; 需要转义成 &amp;amp;&amp;amp  或者用 OGNl 的 and 操作符--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--双引号 "" 需要转义成 &amp;quot;&amp;quot;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--占位符 ? 需要用 #&#123;command&#125; 来替换，表示用 command 值来填充 ? 这是 mybatis 的解析规则--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis 配置中 sql 语句前后不需要留空格，会自动拼接--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--模糊查询 like 跟 '%' 保留，问号 ? 替换，问号两边依旧保留空格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryMessageList"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.bean.Message"</span> <span class="attr">resultMap</span>=<span class="string">"MessageResult"</span>&gt;</span></span><br><span class="line">    select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"command != null &amp;amp;&amp;amp; !&amp;quot;&amp;quot;.equals(command.trim()) "</span>&gt;</span> and COMMAND=#&#123;command&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null and !&amp;quot;&amp;quot;.equals(description.trim()) "</span>&gt;</span></span><br><span class="line">     and DESCRIPTION like '%' #&#123;description&#125; '%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单个删除--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--#&#123;&#125; 中的取值写法可以视为与 OGNL 相同：当参数为 String 与基本数据类型时，标签属性为 _parameter,</span></span><br><span class="line"><span class="comment"> 若为自定义类型则写自定义类型属性名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOne"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from MESSAGE where ID = #&#123;_parameter&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--批量删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatch"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">        delete from MESSAGE where ID in (</span><br><span class="line">          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">              #&#123;item&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Copyright 2009-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">       you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">       You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">       distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">       See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">       limitations under the License.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;settings&gt;</span></span><br><span class="line"><span class="comment">      &lt;setting name="useGeneratedKeys" value="false"/&gt;</span></span><br><span class="line"><span class="comment">      &lt;setting name="useColumnLabel" value="true"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/settings&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;typeAliases&gt;</span></span><br><span class="line"><span class="comment">      &lt;typeAlias alias="UserAlias" type="org.apache.ibatis.submitted.complex_property.User"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAliases&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/micro_message"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"dfwhj43815"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用来引入 sqlxml 配置文件的内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper 可以多个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/imooc/config/sqlxml/Message.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.db.DBAccess;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao 层跟表相关，此 dao 包含跟 message 表相关的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybytis 根据查询条件查询消息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command,String description)</span></span>&#123;</span><br><span class="line">        DBAccess dbAccess = <span class="keyword">new</span> DBAccess();</span><br><span class="line">        <span class="comment">//要在 final 中关闭此会话，所以放在外面</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建 List 将查询语句内容放进 List 中</span></span><br><span class="line">        List&lt;Message&gt;messageList = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">        <span class="comment">//捕获 DBAccess 抛出的异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = dbAccess.getSqlSession();</span><br><span class="line">            <span class="comment">//新建一个对象，将 command description 对象封装到对象中</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message();</span><br><span class="line">            message.setCommand(command);</span><br><span class="line">            message.setDescription(description);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过 sqlSession 执行 查找sql 语句；值为 namespace.resultMap</span></span><br><span class="line">            messageList = sqlSession.selectList(<span class="string">"Message.queryMessageList"</span>,message);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sqlSession!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                sqlSession.close();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> messageList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 单条删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        DBAccess dbAccess = <span class="keyword">new</span> DBAccess();</span><br><span class="line">        <span class="comment">//要在 final 中关闭此会话，所以放在外面</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//捕获 DBAccess 抛出的异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = dbAccess.getSqlSession();</span><br><span class="line">            <span class="comment">//通过 sqlSession 执行 删除sql 语句；值为 Message.mapper 的 namespace.resultMap</span></span><br><span class="line">            sqlSession.delete(<span class="string">"Message.deleteOne"</span>,id);</span><br><span class="line">            <span class="comment">//使用 mybatis 时对 commit 进行了封装，需要手动进行提交</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Connection conn;</span></span><br><span class="line"><span class="comment">             * 下面两条sql语句是自动提交互不影响的</span></span><br><span class="line"><span class="comment">             * 但是将 conn.setAutoCommit(false) 设定后，下面的 sql 语句将处于一个事物中</span></span><br><span class="line"><span class="comment">             * 需要进行 conn.commit(); 或 conn.roolback(); 才能一次性手动提交</span></span><br><span class="line"><span class="comment">             * conn.prepareStatement("sql").execute();</span></span><br><span class="line"><span class="comment">             * conn.prepareStetement("sql").execute();</span></span><br><span class="line"><span class="comment">             * conn.commit();</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 如下的 sqlSession.commit()；实际上就是 conn.commmit();</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sqlSession!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                sqlSession.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBatch</span><span class="params">(List&lt;Integer&gt; ids)</span></span>&#123;</span><br><span class="line">        DBAccess dbaccess = <span class="keyword">new</span> DBAccess();</span><br><span class="line">        SqlSession sqlsession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlsession = dbaccess.getSqlSession();</span><br><span class="line">            <span class="comment">//执行删除语句</span></span><br><span class="line">            sqlsession.delete(<span class="string">"Message.deleteBatch"</span>,ids);</span><br><span class="line">            sqlsession.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        MessageDao messageDao = new MessageDao();</span></span><br><span class="line"><span class="comment">//        messageDao.queryMessageList("","");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问数据库类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBAccess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//通过配置文件获取数据库连接信息</span></span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"com/imooc/config/Configuration.xml"</span>);</span><br><span class="line">        <span class="comment">//通过配置信息构建一个 SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        <span class="comment">//通过 sqlSessionFactory 打开一个数据库会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用 MessageDao 进行数据操作，再由 ListServlet 调用。将值返回给 ListServlet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">queryMessageList</span><span class="params">(String command, String description)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="keyword">return</span> messageDao.queryMessageList(command,description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.dao.MessageDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 维护 Service</span></span><br><span class="line"><span class="comment"> * 维护相关业务的功能</span></span><br><span class="line"><span class="comment"> * 页面的一个动作对应了一个 Servlet ；而 Service 不应该同时增加</span></span><br><span class="line"><span class="comment"> * 把相似的功能（修改，新增，删除，批量删除等）放在一个维护 Service 中</span></span><br><span class="line"><span class="comment"> * 以后可以一直添加新功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 将取值的转型及判断是否为空 都放在 Service 中进行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaintainService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单条删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断 id 是否为空，或 空字符串</span></span><br><span class="line">        <span class="keyword">if</span>(id != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(id.trim())) &#123;</span><br><span class="line">            MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">            <span class="comment">//将 id 从 String 转型为 int 并作为参数传入 deleteOne 函数</span></span><br><span class="line">            messageDao.deleteOne(Integer.valueOf(id));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBatch</span><span class="params">(String [] ids)</span></span>&#123;</span><br><span class="line">        MessageDao messageDao = <span class="keyword">new</span> MessageDao();</span><br><span class="line">        <span class="comment">//创建 id 的 List</span></span><br><span class="line">        List&lt;Integer&gt; idList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String id : ids) &#123;</span><br><span class="line">            <span class="comment">//转型为 Integer 再传入 List</span></span><br><span class="line">            <span class="keyword">if</span>(id!=<span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(id.trim())) &#123;</span><br><span class="line">                idList.add(Integer.valueOf(id));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用 messageDao 的 deleteBatch 方法</span></span><br><span class="line">        messageDao.deleteBatch(idList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.bean.Message;</span><br><span class="line"><span class="keyword">import</span> com.imooc.service.ListService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表页面初始化控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"ListServlet"</span> ,urlPatterns = <span class="string">"/List.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//接受页面的值</span></span><br><span class="line">        String command = req.getParameter(<span class="string">"command"</span>);</span><br><span class="line">        String description = req.getParameter(<span class="string">"description"</span>);</span><br><span class="line">        <span class="comment">//向页面传值</span></span><br><span class="line">        req.setAttribute(<span class="string">"command"</span>,command);</span><br><span class="line">        req.setAttribute(<span class="string">"description"</span>,description);</span><br><span class="line">        <span class="comment">//查询消息列表并传给页面。调用 ListService 的函数，将查询的结果放到 req 中</span></span><br><span class="line">        ListService listService = <span class="keyword">new</span> ListService();</span><br><span class="line">        req.setAttribute(<span class="string">"messageList"</span>,listService.queryMessageList(command,description));</span><br><span class="line">        <span class="comment">//向页面跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/back/list.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.service.ListService;</span><br><span class="line"><span class="keyword">import</span> com.imooc.service.MaintainService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单条删除控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteOneServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//接受页面的值</span></span><br><span class="line">        String id = req.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        MaintainService maintainService = <span class="keyword">new</span> MaintainService();</span><br><span class="line">        <span class="comment">//需要接受的参数为 int 但是判断接受的值是否为空以及转型应该在 Service 中进行</span></span><br><span class="line">        maintainService.deleteOne(id);</span><br><span class="line">        <span class="comment">//向页面跳转 直接跳转到 list.jsp 会使得列表全部消失；列表初始化需要 listServlet 进行一些操作</span></span><br><span class="line">        <span class="comment">//所以应该先跳到 listServlet</span></span><br><span class="line"><span class="comment">//        req.getRequestDispatcher("/WEB-INF/jsp/back/list.jsp").forward(req,resp);</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/List.action"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.service.MaintainService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteBatchServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        MaintainService maintainService = <span class="keyword">new</span> MaintainService();</span><br><span class="line">        String[] ids = req.getParameterValues(<span class="string">"id"</span>);</span><br><span class="line">        maintainService.deleteBatch(ids);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//页面跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/List.action"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;%--使用 jstl--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%--拼接当前网页相对路径--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span>content=<span class="string">"IE=9; IE=8; IE=7; IE=EDGE"</span> /&gt;</span><br><span class="line">&lt;title&gt;内容列表页面&lt;/title&gt;</span><br><span class="line">&lt;link href=<span class="string">"&lt;%=basePath%&gt;/resources/css/all.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;script src="&lt;%=basePath %&gt;/resources/js/common/jquery-1.8.0.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="&lt;%=basePath %&gt;/resources/js/back/list.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      <span class="function">function <span class="title">deleteOne</span><span class="params">(path,id)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(confirm(<span class="string">"确定要删除吗？"</span>))&#123;</span><br><span class="line">              document.getElementById(<span class="string">"id"</span>).value=id;</span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).action = path+<span class="string">"/DeleteOneServlet.action"</span>;</span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).submit();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=<span class="string">"background: #e1e9eb;"</span>&gt;</span><br><span class="line">&lt;%--提交到 ListServlet 上进行初始化与查询--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"&lt;%=basePath%&gt;/List.action"</span> id=<span class="string">"mainForm"</span> method=<span class="string">"post"</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">&lt;div class="current"&gt;当前位置：&lt;a href="javascript:void(0)" style="color:#6E6E6E;"&gt;内容管理&lt;/a&gt; &amp;gt; 内容列表&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"rightCont"</span>&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"g_title fix"</span>&gt;</span><br><span class="line">                        内容列表 </span><br><span class="line">                        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn03"</span> href=<span class="string">"#"</span>&gt;</span><br><span class="line">                        新 增</span><br><span class="line">                        &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn03"</span> href=<span class="string">"javascript:deleteBatch('&lt;%=basePath%&gt;');"</span>&gt;</span><br><span class="line">                        删 除</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                      &lt;/p&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab1"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;指令名称：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"command"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;command&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td width="90" align="right"&gt;描述：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input name=<span class="string">"description"</span> type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"allInput"</span> value=<span class="string">"$&#123;description&#125;"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">                            &lt;td width="85" align="right"&gt;&lt;input type="submit" class="tabSub" value="查 询" /&gt;&lt;/td&gt;</span><br><span class="line">       &lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"zixun fix"</span>&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab2"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;th&gt;&lt;input type="checkbox" id="all" onclick="#"/&gt;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段1&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;演示字段2&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> id=<span class="string">"id"</span> name=<span class="string">"id"</span> /&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;messageList&#125;"</span> var=<span class="string">"message"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;tr &lt;c:if test="$&#123;status.index % 2 != 0&#125;"&gt;style='background-color:#ECF6EE;'&lt;/c:if&gt;&gt;</span><br><span class="line">&lt;%--value 值与下面的 id 表达式相同--%&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="id" value="$&#123;message.id&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;status.index + 1&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.command&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;message.description&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;a href="#"&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;%--使用 get 方法提交，不适合隐私信息及中文信息提交--%&gt;</span><br><span class="line">&lt;%--&lt;a href="$&#123;basePath&#125;/DeleteOneServlet.action?id=$&#123;message.id&#125;"&gt;删除&lt;/a&gt;--%&gt;</span><br><span class="line">&lt;%--&lt;a href=<span class="string">"$&#123;basePath&#125;/DeleteOneServlet.action?id=$&#123;message.id&#125;"</span>--%&gt;</span><br><span class="line"> &lt;%--onclick="return confirm('确定要删除这条信息吗？');"&gt;删除&lt;/a&gt;--%&gt;</span><br><span class="line">&lt;a href="#" onclick="deleteOne('$&#123;pageContext.request.contextPath&#125;',$&#123;message.id&#125;)"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'page fix'</span>&gt;</span><br><span class="line">共 &lt;b&gt;4&lt;/b&gt; 条</span><br><span class="line">&lt;a href='###' class='first'&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='pre'&gt;上一页&lt;/a&gt;</span><br><span class="line">当前第&lt;span&gt;1/1&lt;/span&gt;页</span><br><span class="line">&lt;a href='###' class='next'&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href='###' class='last'&gt;末页&lt;/a&gt;</span><br><span class="line">跳至&amp;nbsp;&lt;input type=<span class="string">'text'</span> value=<span class="string">'1'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'allInput w28'</span> /&gt;&amp;nbsp;页&amp;nbsp;</span><br><span class="line">&lt;a href='###' class='go'&gt;GO&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">程序未报错，但 tomcat 连接后直接停止：</span><br><span class="line"></span><br><span class="line">Connected to the target VM, address: &apos;127.0.0.1:10605&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:10605&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解决方法：把 main 测试函数注释掉，通过 tomcat 发布文件</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      <span class="function">function <span class="title">deleteOne</span><span class="params">(path,id)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(confirm(<span class="string">"确定要删除吗？"</span>))&#123;</span><br><span class="line">              document.getElementById(<span class="string">"id"</span>).value=id;</span><br><span class="line">              <span class="comment">//将路径首字母小写会使函数失效，这里对应的是web.xml 配置的 url     //"/deleteOneServlet.action"</span></span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).action = path+<span class="string">"/DeleteOneServlet.action"</span>;</span><br><span class="line">              document.getElementById(<span class="string">"mainForm"</span>).submit();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2018/07/23/MyBatis/1532700163605.png" title="项目目录1"><img src="/2018/07/23/MyBatis/1532700189052.png" title="项目目录2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">idea 未报错，点击删除，批量删除无效，网页前台控制台报错：</span><br><span class="line">Uncaught ReferenceError: deleteBatch is not defined</span><br><span class="line">    at &lt;anonymous&gt;:1:1</span><br><span class="line">    </span><br><span class="line">解决：DeleteBatchServlet 后忘记加 .action  应将其提交到 web.xml 配置的 url 上</span><br><span class="line">$(&quot;#mainForm&quot;).attr(&quot;action&quot;,basePath+&quot;/DeleteBatchServlet.action&quot;);</span><br><span class="line"></span><br><span class="line">//此处 name = &quot;id&quot; 而不是 id = &quot;id&quot;,而且不加 value 时，checkbox 选中时返回的值是 on</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;id&quot; value=&quot;$&#123;message.id&#125;&quot;/&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">网页报错：</span><br><span class="line">Type Exception Report</span><br><span class="line"></span><br><span class="line">Message For input string: &quot;&quot;</span><br><span class="line"></span><br><span class="line">Description The server encountered an unexpected condition that prevented it from fulfilling the request.</span><br><span class="line"></span><br><span class="line">Exception</span><br><span class="line"></span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;&quot;</span><br><span class="line">java.lang.NumberFormatException.forInputString(Unknown Source)</span><br><span class="line">java.lang.Integer.parseInt(Unknown Source)</span><br><span class="line">java.lang.Integer.valueOf(Unknown Source)</span><br><span class="line">com.imooc.service.MaintainService.deleteBatch(MaintainService.java:41)</span><br><span class="line">com.imooc.servlet.DeleteBatchServlet.doGet(DeleteBatchServlet.java:17)</span><br><span class="line">com.imooc.servlet.DeleteBatchServlet.doPost(DeleteBatchServlet.java:25)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:661)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">Note The full stack trace of the root cause is available in the server logs.</span><br><span class="line"></span><br><span class="line">问题：ids 在接受值时 String[] ids = req.getParameterValues(&quot;id&quot;);</span><br><span class="line">会多出一个 index[0] = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">解决： 在 service 中判断是否为空</span><br><span class="line">if(id!=null &amp;&amp; !&quot;&quot;.equals(id.trim())) &#123;</span><br><span class="line">                idList.add(Integer.valueOf(id));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">点击删除后，页面跳转到 http://localhost:8080/DeleteBatchServlet.action</span><br><span class="line">但是没有删除所选中的几条值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">日志：</span><br><span class="line">2018-07-27 12:54:52,186 [http-nio-8080-exec-3] DEBUG [Message.deleteBatch] - ==&gt;  Preparing: delete from MESSAGE where ID in( ? , ? ) </span><br><span class="line">2018-07-27 12:54:52,187 [http-nio-8080-exec-3] DEBUG [Message.deleteBatch] - ==&gt; Parameters: 5(Integer), 6(Integer)</span><br><span class="line">2018-07-27 12:54:52,188 [http-nio-8080-exec-3] DEBUG [Message.deleteBatch] - &lt;==    Updates: 2</span><br><span class="line">2018-07-27 12:54:52,226 [http-nio-8080-exec-3] DEBUG [Message.queryMessageList] - ==&gt;  Preparing: select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1 </span><br><span class="line">2018-07-27 12:54:52,227 [http-nio-8080-exec-3] DEBUG [Message.queryMessageList] - ==&gt; Parameters: </span><br><span class="line">2018-07-27 12:54:52,229 [http-nio-8080-exec-3] DEBUG [Message.queryMessageList] - &lt;==      Total: 3</span><br><span class="line"></span><br><span class="line">解决：messageDao 中传入的参数类型错误，应该为 List&lt;Integer&gt;ids</span><br><span class="line">public void deleteBatch(List&lt;Integer&gt; ids)</span><br></pre></td></tr></table></figure><h4 id="idea-导入本地-jar-包源码的方法"><a href="#idea-导入本地-jar-包源码的方法" class="headerlink" title="idea 导入本地 jar 包源码的方法"></a>idea 导入本地 jar 包源码的方法</h4><p><a href="https://blog.csdn.net/u011439289/article/details/51828978" rel="noopener" target="_blank">idea 导入本地 jar 包源码</a></p><h4 id="log4j-中的代码意义"><a href="#log4j-中的代码意义" class="headerlink" title="log4j 中的代码意义"></a>log4j 中的代码意义</h4><p>log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n  </p><p> %d 日志生成的时间</p><p> %t 是产生日志所处的线程名称</p><p> %p 输出日志的级别，%-5p 将占5位字符，不足5位用空格填补，- 指的是在右边补空</p><p>%c 你输出日志的包以及类的全名</p><p>%m 是你附加的信息 </p><p> %n 换行 </p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href="https://github.com/crow-song/crow-song.github.io/tree/master/codeDemos/myJsp_demo/MicroMessage" target="_blank" rel="noopener">demo 源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用-mybatis-替代-jdbc&quot;&gt;&lt;a href=&quot;#用-mybatis-替代-jdbc&quot; class=&quot;headerlink&quot; title=&quot;用 mybatis 替代 jdbc&quot;&gt;&lt;/a&gt;用 mybatis 替代 jdbc&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mybatis/mybatis-3/releases&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mybatis 下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://crow-song.github.io/2018/07/25/jdbcToMyBatis/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;jdbc 版跳转此处&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;dao-层、mybatis-及-SqlSession-作用&quot;&gt;&lt;a href=&quot;#dao-层、mybatis-及-SqlSession-作用&quot; class=&quot;headerlink&quot; title=&quot;dao 层、mybatis 及 SqlSession 作用&quot;&gt;&lt;/a&gt;dao 层、mybatis 及 SqlSession 作用&lt;/h4&gt;&lt;p&gt;dao (data access objection 数据访问对象)层需求 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能与数据库交互&lt;/li&gt;
&lt;li&gt;能执行 sql 语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;mybatis ：向 dao 层提供对象 SqlSession&lt;/p&gt;
&lt;p&gt;SqlSession 作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向 sql 语句传入参数&lt;/li&gt;
&lt;li&gt;执行 sql 语句&lt;/li&gt;
&lt;li&gt;获取执行 sql 语句的结果&lt;/li&gt;
&lt;li&gt;事务的控制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何得到 SqlSession：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过配置文件获取数据库连接的相关信息&lt;/li&gt;
&lt;li&gt;通过配置信息构建 SqlSessionFactory&lt;/li&gt;
&lt;li&gt;通过 SqlSessionFactory 打开 数据库会话（SqlSession）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>AnnTest java 注解</title>
    <link href="http://yoursite.com/2018/07/18/AnnTest/"/>
    <id>http://yoursite.com/2018/07/18/AnnTest/</id>
    <published>2018-07-18T03:23:02.000Z</published>
    <updated>2018-08-10T08:35:22.056Z</updated>
    
    <content type="html"><![CDATA[<h4 id="运行机制划分注解"><a href="#运行机制划分注解" class="headerlink" title="运行机制划分注解"></a>运行机制划分注解</h4><ol><li><p>源码注解：只在源码中存在，编译成 .class 文件就不存在了。</p></li><li><p>编译时注解：注解在源码和 .class 文件中都存在</p><p>@Override  @Deprecated  @Suppvisewarning</p><p>@Override ：表示覆写了某一个方法</p><p>@Deprecated ：表示一个方法已经过期，可用 @Suppvisewarning 忽略警告</p></li><li><p>运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解。</p><p>@Autowired</p></li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="comment">//忽略方法中的方法过期警告，也可以放在类外，忽略整个类的过期警告</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">        p.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//提示方法已过期</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元注解RetentionPolicy，表明注解的生命周期：</span><br><span class="line">1、SOURCE：在原文件中有效，被编译器丢弃。 </span><br><span class="line">2、CLASS：在class文件有效，可能会被虚拟机忽略。 </span><br><span class="line">3、RUNTIME：在运行时有效。</span><br></pre></td></tr></table></figure><blockquote><p>  @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。  如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。     注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，     方法并不从它所重载的方法继承annotation。  </p></blockquote><p>@Inherited 对接口没作用，只会继承类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//自定义注解，在 Child 中使用</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Description &#123;</span><br><span class="line">    <span class="function">String  <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"><span class="meta">@Description</span>(<span class="string">"i am class annotation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Description</span>(<span class="string">"i am method annotation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ann.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">//只能取到运行时加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PraseAnn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用类加载器加载类</span></span><br><span class="line">            Class c = Class.forName(<span class="string">"com.ann.test.Child"</span>);</span><br><span class="line">            <span class="comment">//找到类上的注解</span></span><br><span class="line">            <span class="keyword">boolean</span> isExist = c.isAnnotationPresent(Description.class);</span><br><span class="line">            <span class="keyword">if</span>(isExist)&#123;</span><br><span class="line">                <span class="comment">//拿到注解实例</span></span><br><span class="line">                Description d = (Description) c.getAnnotation(Description.class);</span><br><span class="line">                System.out.println(d.value());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到方法上的注解</span></span><br><span class="line">            Method[] ms = c.getMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isMExist = m.isAnnotationPresent(Description.class);</span><br><span class="line">                <span class="keyword">if</span>(isMExist)&#123;</span><br><span class="line">                    Description d =  m.getAnnotation(Description.class);</span><br><span class="line">                    System.out.println(d.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//另一种解析方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                Annotation[]as = m.getAnnotations();</span><br><span class="line">                <span class="keyword">for</span> (Annotation a : as) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Description)&#123;</span><br><span class="line">                        Description d = (Description) a;</span><br><span class="line">                        System.out.println(d.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 PraseAnn 输出结果</p><p><code>i am class annotation</code><br><code>i am method annotation</code><br><code>i am method annotation</code></p><p><a href="https://blog.csdn.net/sw5131899/article/details/54947192" rel="noopener" target="_blank">java 注解  Element</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     Column column = field.getAnnotation(Column.class);得到的是字段上注解内容，然后通过</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     String columnName = column.value();得到就是此注解下的字段名，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     <span class="doctag">@Column</span>("id") （好比上面的 column，不过只是比如column是一个注解对象）</span></span><br><span class="line"><span class="comment">     private int id;  （columnName 就得到的是  id  ）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     <span class="doctag">@Table</span>("数据库中的表名")</span></span><br><span class="line"><span class="comment">     <span class="doctag">@Column</span>("数据库中的列名/字段名:id/user_name...")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"user_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"nick_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"city"</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"mobile"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">//作用域：类或接口</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="comment">//生命周期：运行时</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line">    <span class="comment">//使用值只有一个：表名 user</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">//作用域：字段、枚举的常量</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="comment">//生命周期：运行时有效</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Filter f1 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f1.setId(<span class="number">10</span>);<span class="comment">//查询 id 为 10 的用户</span></span><br><span class="line"></span><br><span class="line">        Filter f2 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f2.setUserName(<span class="string">"lucy"</span>);<span class="comment">//查询用户名为 lucy 的用户</span></span><br><span class="line"></span><br><span class="line">        Filter f3 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f3.setEmail(<span class="string">"liu@sina.com,zh@163.com,77777@qq.com"</span>);<span class="comment">//查询邮箱为其中任意一个用户</span></span><br><span class="line"></span><br><span class="line">        String sql1 = query(f1);</span><br><span class="line">        String sql2 = query(f2);</span><br><span class="line">        String sql3 = query(f3);</span><br><span class="line"></span><br><span class="line">        System.out.println(sql1);</span><br><span class="line">        System.out.println(sql2);</span><br><span class="line">        System.out.println(sql3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">query</span><span class="params">(Filter f)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 class</span></span><br><span class="line">        Class c = f.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 table 的名字</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = c.isAnnotationPresent(Table.class);</span><br><span class="line">        <span class="keyword">if</span>(!exists)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Table t = (Table) c.getAnnotation(Table.class);</span><br><span class="line">        String tableName = t.value();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  例如为不定数量的查询条件，我们在后台写查询的时候，</span></span><br><span class="line"><span class="comment">         类似于这样的语句 string sql ="select * from table where"</span></span><br><span class="line"><span class="comment">         为了使语句通顺不报错，加上 where 1=1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sb.append(<span class="string">"select * form"</span>).append(tableName).append(<span class="string">"where 1=1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的字段</span></span><br><span class="line">        Field[] fArray = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fArray) &#123;</span><br><span class="line">            <span class="comment">//处理每个字段对应的 sql</span></span><br><span class="line">            <span class="comment">//拿到字段名</span></span><br><span class="line">            <span class="keyword">boolean</span> fExists = field.isAnnotationPresent(Column.class);</span><br><span class="line">            <span class="keyword">if</span>(!fExists)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Column column = field.getAnnotation(Column.class);</span><br><span class="line">            String columnName = column.value();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿到字段值</span></span><br><span class="line">            String filedName = field.getName();</span><br><span class="line">            String getMethodName = <span class="string">"get"</span> + filedName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+filedName.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//通过反射取得 method</span></span><br><span class="line">            System.out.println(getMethodName);</span><br><span class="line">            Object fieldValue = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method getMethod = c.getMethod(getMethodName);</span><br><span class="line">                fieldValue = getMethod.invoke(f);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//拼装 sql</span></span><br><span class="line">            <span class="keyword">if</span>(fieldValue==<span class="keyword">null</span> ||(fieldValue <span class="keyword">instanceof</span> Integer &amp;&amp; (Integer)fieldValue==<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">" and "</span>).append(filedName);</span><br><span class="line">            <span class="keyword">if</span>(fieldValue <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                sb.append(<span class="string">"="</span>).append(<span class="string">"'"</span>).append(columnName).append(<span class="string">"'"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fieldValue <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                sb.append(<span class="string">"="</span>).append(columnName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;运行机制划分注解&quot;&gt;&lt;a href=&quot;#运行机制划分注解&quot; class=&quot;headerlink&quot; title=&quot;运行机制划分注解&quot;&gt;&lt;/a&gt;运行机制划分注解&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;源码注解：只在源码中存在，编译成 .class 文件就不存在了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译时注解：注解在源码和 .class 文件中都存在&lt;/p&gt;
&lt;p&gt;@Override  @Deprecated  @Suppvisewarning&lt;/p&gt;
&lt;p&gt;@Override ：表示覆写了某一个方法&lt;/p&gt;
&lt;p&gt;@Deprecated ：表示一个方法已经过期，可用 @Suppvisewarning 忽略警告&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解。&lt;/p&gt;
&lt;p&gt;@Autowired&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Annotation" scheme="http://yoursite.com/categories/Annotation/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="imooc" scheme="http://yoursite.com/tags/imooc/"/>
    
  </entry>
  
  <entry>
    <title>Reflection 反射</title>
    <link href="http://yoursite.com/2018/07/17/active-class/"/>
    <id>http://yoursite.com/2018/07/17/active-class/</id>
    <published>2018-07-17T03:51:02.000Z</published>
    <updated>2018-08-10T08:36:25.212Z</updated>
    
    <content type="html"><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>指的是可以于运行时加载,探知和使用编译期间完全未知的类. 程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性; 加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。 不是所有的实例化都是 new ，new 时必须知道这个类是什么，而很多时候做不到预先知道类名，很多框架如 Spring 应用了反射的原理。</p><a id="more"></a><ul><li>new 创建的对象是 <font color="rgb(245," 135,="" 31)="">静态加载类</font>，在编译时就需要加载所有可能用到的类，若在编译时找不到类直接报错。一个功能有问题，其他功能都无法使用。</li></ul><p>class 为类类型/字节码（编译后的类）</p><p>OfficeBetter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OfficeBetter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args [])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态加载类，在运行时加载</span></span><br><span class="line"></span><br><span class="line">Class c = Class.forName(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">OfficeAble oa = (OfficeAble)c.newInstance();</span><br><span class="line"></span><br><span class="line">oa.start();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OfficeAble.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OfficeAble</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建接口，由使用者来实现该接口,重写 start 方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Word.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">OfficeAble</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"word--starts"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>编译 javac *.java</li><li>运行 java OfficeBetter Word (main 类 + 实现接口类)</li><li>输出结果 word–starts</li></ol><h4 id="获取类的信息"><a href="#获取类的信息" class="headerlink" title="获取类的信息"></a>获取类的信息</h4><p>首先要获取类的类类型</p><p><code>Class c1 = int.class;</code>  //int 的类类型</p><p><code>String c2 = String.class</code>  //String 的类类型</p><p><code>void c3 = void.class</code></p><p><code>System.out.println(c1.getName());</code>  //打印包含包名的类的名称</p><p><code>System.out.println(c2.getSimpleName());</code>  //打印不包含包名的类的名称</p><p><code>System.out.println(c3.getName());</code>   //打印结果：void</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintClassMessage</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传递的是哪个子类的对象，c 就是该子类的类类型</span></span><br><span class="line"></span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getMethods() 获取所有 public 的函数，包括父类继承而来的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods() 获取的是该类自己声明的方法，不问访问权限；</span></span><br><span class="line"></span><br><span class="line">        Method [] ms = c.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ms.length; i++)&#123;</span><br><span class="line">        <span class="comment">//得到方法返回值类型的类类型</span></span><br><span class="line">        Class returnType = ms[i].getReturnType();</span><br><span class="line">        System.out.print(returnType.getName()+<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//得到方法的名称</span></span><br><span class="line">        System.out.print(ms[i].getName()+<span class="string">"("</span>);</span><br><span class="line">        <span class="comment">//获取参数类型，得到的是参数列表的类型的类类型</span></span><br><span class="line">        Class [] paramTypes = ms[i].getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class class1:paramTypes)&#123;</span><br><span class="line">            System.out.print(class1.getName()+<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFieldMessage</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        <span class="comment">//成员变量也是对象；</span></span><br><span class="line">        Field[] fs = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">            Class fieldType = field.getType();</span><br><span class="line">            String typeName = fieldType.getName();</span><br><span class="line">            <span class="comment">//得到成员变量名称</span></span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.println(typeName + <span class="string">" "</span> + fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印对象的构造函数信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConMessage</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        <span class="comment">/*构造函数也是对象</span></span><br><span class="line"><span class="comment">        java.lang.Constructor 封装了构造函数的信息</span></span><br><span class="line"><span class="comment">        getConstructors 获取所有的 public 的构造函数</span></span><br><span class="line"><span class="comment">        Constructor []cs = c.getConstructors();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Constructor [] cs = c.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : cs) &#123;</span><br><span class="line">            System.out.print(constructor.getName()+<span class="string">"("</span>);</span><br><span class="line">            <span class="comment">//获取构造函数的参数列表--&gt;得到的是参数列表的类类型</span></span><br><span class="line">            Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class class1 : parameterTypes) &#123;</span><br><span class="line">                System.out.print(class1.getName()+<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//PrintClassMessage 方法测试类</span><br><span class="line">public class ClassDemo3 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s = &quot;hello&quot;;</span><br><span class="line">        ClassUtil.PrintClassMessage(s);</span><br><span class="line"></span><br><span class="line">        Integer n1 = 1;</span><br><span class="line">        ClassUtil.PrintClassMessage(n1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//printieldMessage() 方法测试类</span><br><span class="line">public class ClassDemo4 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClassUtil.printFieldMessage(&quot;hello&quot;);</span><br><span class="line">        System.out.println(&quot;==========&quot;);</span><br><span class="line">        ClassUtil.printFieldMessage(new Integer(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.reflect;</span><br><span class="line">//printConMessage() 方法测试类</span><br><span class="line">public class ClassDemo5 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClassUtil.printConMessage(&quot;hello&quot;);</span><br><span class="line">        ClassUtil.printConMessage(new Integer(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法的反射操作"><a href="#方法的反射操作" class="headerlink" title="方法的反射操作"></a>方法的反射操作</h4><p>method.invoke(对象，参数列表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取print(int a,int b)方法，获取一个方法就是获取类的信息，获取类的信息就要获得类的类类型</span></span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        Class c = a1.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取方法 名称和参数决定</span></span><br><span class="line"><span class="comment">         * getMethod 获取的是 public 的方法</span></span><br><span class="line"><span class="comment">         * getDelcaredMethod 自己声明的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method m = c.getMethod(<span class="string">"print"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line"><span class="comment">//          或 Method m = c.getMethod("pirnt", new Class[]&#123;int.class, int.class&#125;);</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 方法的反射操作</span></span><br><span class="line"><span class="comment">             * a1.print(10,20); 方法的反射操作是用 m 对象来进行方法的调用 和 a1.print 调用效果完全相同</span></span><br><span class="line"><span class="comment">             * 方法没有返回值，则返回 null ，有返回值则返回具体的返回值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            Object o = m.invoke(a1, <span class="keyword">new</span> Object[]&#123;<span class="number">10</span>, <span class="number">20</span>&#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">            <span class="comment">//获取方法对象</span></span><br><span class="line">            Method m1 = c.getMethod(<span class="string">"print"</span>, String.class, String.class);</span><br><span class="line">            <span class="comment">//用方法进行反射操作</span></span><br><span class="line">            o = m1.invoke(a1, <span class="string">"Hello"</span>, <span class="string">"Word"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">            Method m2 = c.getMethod(<span class="string">"print"</span>);</span><br><span class="line">            <span class="comment">//或 Method m1 = c.getMethod("print", new Class[]&#123;&#125;);</span></span><br><span class="line">            m2.invoke(a1);</span><br><span class="line">            <span class="comment">//  或m2.invoke(a1,new Object[]&#123;&#125;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a,String b)</span></span>&#123;</span><br><span class="line">        System.out.println(a.toUpperCase() + <span class="string">","</span> + b.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello Word"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过反射了解泛型本质"><a href="#通过反射了解泛型本质" class="headerlink" title="通过反射了解泛型本质"></a>通过反射了解泛型本质</h4><p>class 为类类型/字节码（编译后的类）</p><p>class/method 等反射操作都是绕过编译的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//泛型，只能放 String 类型；</span></span><br><span class="line">        <span class="comment">//防止加入 list1.add(10); 这种操作</span></span><br><span class="line">        ArrayList&lt;String&gt;list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">"hello"</span>);</span><br><span class="line">        Class c1 = list.getClass();</span><br><span class="line">        Class c2 = list1.getClass();</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 反射的操作都是编译之后的操作（跳过编译阶段）</span></span><br><span class="line"><span class="comment">         * c1 == c2 返回 true 说明编译之后的集合泛型是去泛型化的</span></span><br><span class="line"><span class="comment">         * java 中集合的泛型是防止错误输入，只在编译阶段有效，绕过编译就无效</span></span><br><span class="line"><span class="comment">         * 验证：通过方法反射操作，绕过编译</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Method m = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m = c2.getMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">            m.invoke(list1,<span class="number">10</span>);<span class="comment">//绕过编译操作就绕过了泛型</span></span><br><span class="line">            System.out.println(list1.size());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  for (String string : list1) &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(string);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                此时遍历会发生错误异常，提示不能将 int 转换成 String</span></span><br><span class="line"><span class="comment">             * java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h4&gt;&lt;p&gt;指的是可以于运行时加载,探知和使用编译期间完全未知的类. 程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性; 加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。 不是所有的实例化都是 new ，new 时必须知道这个类是什么，而很多时候做不到预先知道类名，很多框架如 Spring 应用了反射的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="imooc" scheme="http://yoursite.com/tags/imooc/"/>
    
      <category term="reflection" scheme="http://yoursite.com/tags/reflection/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>hexo next 搭建博客</title>
    <link href="http://yoursite.com/2018/07/11/blog-create/"/>
    <id>http://yoursite.com/2018/07/11/blog-create/</id>
    <published>2018-07-11T15:09:21.000Z</published>
    <updated>2018-08-10T08:27:15.968Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a><a href=" https://www.cnblogs.com/visugar/p/6821777.html" rel="noopener" target="_blank">hexo 安装</a></h4><p>插入图片：</p><p>node_modules：是依赖包<br>public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章<br>themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息</p><hr><p>接下来依次在命令行输入<br>hexo g<br>hexo s</p><p>在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，<br>看到网页则配置结束</p><hr><h4 id="将Hexo与github-page-联系起来"><a href="#将Hexo与github-page-联系起来" class="headerlink" title="将Hexo与github page 联系起来"></a>将Hexo与github page 联系起来</h4><a id="more"></a><p>设置Git的user name和email：(如果是第一次的话)</p><p><code>git config --global user.name &quot;crow-song&quot;</code><br><code>git config --global user.email &quot;crowsong.end@gmail.com&quot;</code></p><h4 id="设置-ssh-密钥"><a href="#设置-ssh-密钥" class="headerlink" title="设置 ssh 密钥"></a>设置 ssh 密钥</h4><p>参考：<a href="https://blog.csdn.net/love_fdu_llp/article/details/38752365" target="_blank" rel="noopener">https://blog.csdn.net/love_fdu_llp/article/details/38752365</a></p><p><a href="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p><ol><li>检查本机是否有ssh key设置</li></ol><p><code>$ cd ~/.ssh 或cd .ssh</code></p><p>如果没有则提示： No such file or directory</p><p>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm * 删除所有文件)</p><ol start="2"><li><code>ssh-keygen -t rsa -C &quot;crowsong.end@gmail.com&quot;</code>  生成密钥对</li></ol><p>之后全部 enter 就行</p><p>秘钥存放路径为：c:/Users/xxxx_000/.ssh/下 </p><ol start="3"><li>查看你生成的公钥：$ cat ~/.ssh/id_rsa.pub   </li></ol><p>复制公钥到 github 账户的 AccountSettings → SSHKeys → 点击 new SSH Key</p><p>title 随意填写，公钥复制进文本域内 点击确定</p><ol start="4"><li>确认设置</li></ol><p>验证下这个key是不是正常工作。 $ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> # Attempts to ssh to github  键入 yes </p><p>看到： Hi username! You’ve successfully authenticated, but GitHub does not # provide shell access. 就表示设置成功。 </p><p>接下来使用 hexo d 不再需要输入用户和密码了</p><hr><p>配置Deployment<br>同样在_config.yml文件中，找到Deployment，然后按照如下修改：<br>repo 中是仓库地址（自己的 git 发布网址）</p><p>deploy:<br>  type:git<br>  repo:<a href="https://crow-song.github.io/" target="_blank" rel="noopener">https://crow-song.github.io/</a><br>  branch:master</p><hr><h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><p>新建一篇博客，执行下面的命令：</p><p>hexo new post “article title”</p><p>这时候在我的 电脑的目录下 ..\hexo\source\ _posts 将会看到 article title.md 文件</p><p>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>参考：<a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p><h4 id="hexo的next主题个性化教程"><a href="#hexo的next主题个性化教程" class="headerlink" title="hexo的next主题个性化教程"></a><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="nofollw">hexo的next主题个性化教程</a></h4><ul><li><p>Typora md文档多标签样式：</p><blockquote><p>tags: </p><ul><li><p>博客创建</p></li><li><p>hexo</p></li></ul></blockquote></li><li><p>修改 css 样式，找到目标对应 css 文件，修改 background:#transparent （面板透明色）</p><p>rgba(255,255,255,.9) </p></li><li><p><a href=" https://blog.csdn.net/thewindkee/article/details/55086735" rel="noopener" target="_blank">添加网易云音乐插件 </a></p><p>在 mian.xxxx.css 中设置位置   .header-music {margin-top: 55px;margin-left: 0px; } </p></li><li><p><a href="http://www.yzznl.cn/archives/225.html" rel="noopener" target="_blank">nofollw 作用</a></p></li><li><p><a href="https://www.jianshu.com/p/cf0628478a4e " rel="noopener" target="_blank">添加图片</a></p><p>可用样式为 </p><p>图片放在对应 md 文件的文件夹中</p></li><li><p>添加链接： ctrl+k</p></li><li><p>添加背景图：   将括号里面的这里填写背景图片地址替换为你所要显示的背景图片地址，#ffffff表示背景颜色为#ffffff(白色)修改为你想要的背景颜色代码，repeat表示图片平铺，不平铺改为no-repeat，scroll表示图片随对象滚动，图片固定不滚动改为fixed。</p><p> 头像旋转放大： hover 选择器使用 选择鼠标移到链接上的样式 xxx:hover(xxx 可以是 img 也可以是类选择器等。如果直接使用 img:hover 会将插入图片一起放大)     .site-author-image:hover </p></li><li><p><a href="https://blog.csdn.net/ganzhilin520/article/details/79048034" rel="noopener" target="_blank">设置网站图标 Favicon </a></p><p> 设置网站图标时使用 ico 图片会无法正常显示，使用 32*32 png 图片即可</p></li><li><p><a href="https://www.jianshu.com/p/092de536d948" rel="noopener" target="_blank">Typora markdown 语法</a></p></li><li><p><a href="https://www.wesker926.com/2017/09/27/Next%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%A0%87%E7%AD%BE%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2%E5%92%8C%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">设置标签随机大小与颜色</a></p><p> 设置过程中出现 jQuery 报错：Uncaught ReferenceError: $ is not defined</p><p> 可以添加 jQuery 引用 <script src="http://libs.baidu.com/jquery/1.9.0/jquery.js" type="text/javascript"></script></p><p> 网站 debug 通过但部署后报错：(index):1 Mixed Content: The page at ‘<a href="https://crow-song.github.io/tags/&#39;" target="_blank" rel="noopener">https://crow-song.github.io/tags/&#39;</a> was loaded over HTTPS, but requested an insecure script ‘<a href="http://libs.baidu.com/jquery/1.9.0/jquery.js&#39;" target="_blank" rel="noopener">http://libs.baidu.com/jquery/1.9.0/jquery.js&#39;</a>. This request has been blocked; the content must be served over HTTPS.</p><p> 将其 http 改为 https</p></li></ul><hr><blockquote><p>github fork 别人的博客后 404 错误<br><a href="https://github.com/qiubaiying/qiubaiying.github.io/issues/98" target="_blank" rel="noopener">https://github.com/qiubaiying/qiubaiying.github.io/issues/98</a><br>在code下找到CNAME文件，将里面的内容改为：https://你的Github账号名.github.io，然后点底部的commit changes，应该就可以了</p></blockquote><blockquote><p>hexo d 或 hexo deploy 无反应<br>解决: 配置文档中 _config.yml 冒号后需要加空格<br>deploy:<br>type: git<br>repo: <a href="https://github.com/crow-song/crow-song.github.io.git" target="_blank" rel="noopener">https://github.com/crow-song/crow-song.github.io.git</a><br>branch: master</p></blockquote><blockquote><p>hexo g 错误<br>ERROR Process failed: _posts/article-title.md<br>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:<br>md 文档中开头 3 个标题冒号后也需要加空格<br>title: article title<br>date: 2018-07-11 23:09:21<br>tags: 博客创建</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;hexo-安装&quot;&gt;&lt;a href=&quot;#hexo-安装&quot; class=&quot;headerlink&quot; title=&quot;hexo 安装&quot;&gt;&lt;/a&gt;&lt;a href=&quot; https://www.cnblogs.com/visugar/p/6821777.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;hexo 安装&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;插入图片：&lt;/p&gt;

&lt;p&gt;node_modules：是依赖包&lt;br&gt;public：存放的是生成的页面&lt;br&gt;scaffolds：命令生成文章等的模板&lt;br&gt;source：用命令创建的各种文章&lt;br&gt;themes：主题&lt;br&gt;_config.yml：整个博客的配置&lt;br&gt;db.json：source解析所得到的&lt;br&gt;package.json：项目所需模块项目的配置信息&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接下来依次在命令行输入&lt;br&gt;hexo g&lt;br&gt;hexo s&lt;/p&gt;


&lt;p&gt;在浏览器中打开&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:4000/&lt;/a&gt;，&lt;br&gt;看到网页则配置结束&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;将Hexo与github-page-联系起来&quot;&gt;&lt;a href=&quot;#将Hexo与github-page-联系起来&quot; class=&quot;headerlink&quot; title=&quot;将Hexo与github page 联系起来&quot;&gt;&lt;/a&gt;将Hexo与github page 联系起来&lt;/h4&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="博客创建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
