<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crowsongのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-18T03:30:40.389Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>crowsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tenthSquare</title>
    <link href="http://yoursite.com/2020/07/23/tenthSquare/"/>
    <id>http://yoursite.com/2020/07/23/tenthSquare/</id>
    <published>2020-07-23T01:38:54.000Z</published>
    <updated>2020-08-18T03:30:40.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP的幂等性"><a href="#HTTP的幂等性" class="headerlink" title="HTTP的幂等性"></a>HTTP的幂等性</h2><p>HTTP协议本身是一种面向资源的应用层协议，但对HTTP协议的使用实际上存在着两种不同的方式：一种是RESTful的，它把HTTP当成应用层协议，比较忠实地遵守了HTTP协议的各种规定；另一种是SOA的，它并没有完全把HTTP当成应用层协议，而是把HTTP协议作为了传输层协议，然后在HTTP之上建立了自己的应用层协议。本文所讨论的HTTP幂等性主要针对RESTful风格的，不过正如上一节所看到的那样，幂等性并不属于特定的协议，它是分布式系统的一种特性；所以，不论是SOA还是RESTful的Web API设计都应该考虑幂等性。下面将介绍HTTP GET、DELETE、PUT、POST四种主要方法的语义和幂等性。</p><p>HTTP GET方法用于获取资源，不应有副作用，所以是幂等的。比如：GET <a href="http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET" target="_blank" rel="noopener">http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET</a> <a href="http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。" target="_blank" rel="noopener">http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</a></p><p>HTTP DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE <a href="http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。" target="_blank" rel="noopener">http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</a></p><p>比较容易混淆的是HTTP POST和PUT。POST和PUT的区别容易被简单地误认为“POST表示创建资源，PUT表示更新资源”；而实际上，二者均可用于创建资源，更为本质的差别是在幂等性方面。在HTTP规范中对POST和PUT是这样定义的</p><p>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST <a href="http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT" target="_blank" rel="noopener">http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT</a> <a href="http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。" target="_blank" rel="noopener">http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</a></p><p>这种模式可以应用于很多场合，比如：论坛网站中防止意外的重复发帖。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/weidagang2046/" target="_blank" rel="noopener">Programming.log - a place to keep my thoughts on programming</a></p></blockquote><a id="more"></a><hr><h2 id="win10-下-nginx-启动与关闭"><a href="#win10-下-nginx-启动与关闭" class="headerlink" title="win10 下 nginx 启动与关闭"></a>win10 下 nginx 启动与关闭</h2><p>启动</p><p>进入 nginx.exe 目录</p><p><code>start nginx</code></p><p>关闭:</p><ul><li>查看进程</li></ul><p><code>tasklist /fi &quot;imagename eq nginx.exe&quot;</code></p><ul><li>关闭 nginx</li></ul><p><code>nginx.exe -s stop</code></p><ul><li>查看有无关闭</li></ul><p><code>tasklist /fi &quot;imagename eq nginx.exe&quot;</code></p><ul><li>没关闭的用 kill 杀掉进程</li></ul><p><code>TASKKILL /PID 11680 /F</code></p><blockquote><p>windows 10启动、关闭nginx的方式](<a href="https://juejin.im/post/5de4be33e51d4542362f6e8d" target="_blank" rel="noopener">https://juejin.im/post/5de4be33e51d4542362f6e8d</a>)</p></blockquote><hr><p>linux &amp;&amp; docker 启动与重启</p><p>linux 重启  <code>reboot</code></p><p>启动 docker <code>systemctl start docker</code></p><hr><p>springBoot 启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BaseApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdWorker <span class="title">idWorker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IdWorker();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springboot 中 Application 的启动类，会去寻找 springframework:spring-web/spring-web-5.0.5.RELEASE.jar/META-INF/service/javax.servlet.ServletContainerInitializer 文件中的容器初始化类。</p><p>@Bean 能将其他模块中的类注入到 spring 中进行管理</p><hr><h2 id="controller-层"><a href="#controller-层" class="headerlink" title="controller 层"></a>controller 层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/label"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LabelController</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LabelService labelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"查询成功"</span>,labelService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value= <span class="string">"/&#123;labelId&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(@PathVariable String labelId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,labelService.findById(labelId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(@RequestBody Label label)</span></span>&#123;</span><br><span class="line">        labelService.save(label);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;labelId&#125;"</span> ,method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(@RequestBody Label label,@PathVariable String labelId)</span></span>&#123;</span><br><span class="line">        label.setId(labelId);</span><br><span class="line">        labelService.update(label);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"更新成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;labelId&#125;"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(@PathVariable String labelId)</span></span>&#123;</span><br><span class="line">        labelService.deleteById(labelId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@RequestMapping</span>(value = <span class="string">"/search"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findSearch</span><span class="params">(@RequestBody Label label)</span></span>&#123;</span><br><span class="line">        List&lt;Label&gt; list = labelService.findSearch(label);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/search/&#123;page&#125;/&#123;size&#125;"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">pageQuery</span><span class="params">(@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size,@RequestBody Label label)</span></span>&#123;</span><br><span class="line">        Page&lt;Label&gt; pageData = labelService.pageQuery(label,page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span></span><br><span class="line">                ,<span class="keyword">new</span> PageResult&lt;Label&gt;(pageData.getTotalElements(),pageData.getContent()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestContoller 使 controller 中所有方法加上 ResponseBody，将返回值进行 json 转换</p><p>@CrossOrigin 开启跨域访问</p><p>@RequestMapping</p><p>method：前台用什么方式发送请求就写什么方法</p><p>value：请求路径，跟路径中的参数（用 {} 包裹）</p><p>方法参数中  @PathVariable 用于获取请求路径 value 中的 {} 参数 <code>@RequestMapping(value= &quot;/{labelId}&quot;, method = RequestMethod.GET)</code>，参数名称需要一致，不一致时在 <code>@PathVariable(&quot;labelId&quot;)</code> 中加上路径中的参数名。不写 PathVariable 无法进入到该路径参数的方法</p><p>方法参数中 @RequestBody 用来将参数中 body 中的值转为对象，也能直接转换成 Map</p><hr><h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_label"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Label</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String labelname;<span class="comment">//标签名称</span></span><br><span class="line">    <span class="keyword">private</span> String state;<span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">private</span> Long count;<span class="comment">//使用数量</span></span><br><span class="line">    <span class="keyword">private</span> Long fans;<span class="comment">//关注数</span></span><br><span class="line">    <span class="keyword">private</span> String recommend;<span class="comment">//是否推荐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分布式需要继承 Serializable，不然在多个项目无法用 IO 流传输</p><hr><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LabelDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Label</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Label</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LabelService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LabelDao labelDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Label&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Label <span class="title">findById</span><span class="params">(String labelId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> labelDao.findById(labelId).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Label label)</span></span>&#123;</span><br><span class="line">        label.setId(idWorker.nextId()+<span class="string">""</span>);</span><br><span class="line">        labelDao.save(label);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Label label)</span></span>&#123;</span><br><span class="line">        labelDao.save(label);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String labelId)</span> </span>&#123;</span><br><span class="line">        labelDao.deleteById(labelId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Label&gt; <span class="title">findSearch</span><span class="params">(Label label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，需要把条件封装到那个对象中，where 类型=label.getId</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> criteriaQuery 封装的都是查询关键字，如 group by order by</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> criteriaBuilder 用来封装条件对象，如直接返回 null ，表示不需要任何条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//new 一个集合存放所有条件</span></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(label.getLabelname()))&#123;</span><br><span class="line">                    Predicate predicate = criteriaBuilder.like(root.get(<span class="string">"labelname"</span>).as(String.class), <span class="string">"%"</span> + label.getLabelname() + <span class="string">"%"</span>);<span class="comment">// label like %labelname%</span></span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(label.getState()))&#123;</span><br><span class="line">                    Predicate predicate = criteriaBuilder.equal(root.get(<span class="string">"state"</span>).as(String.class), label.getState());<span class="comment">// label = state</span></span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//new 一个数组作为最终返回值条件</span></span><br><span class="line">                Predicate[] predicates = <span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                <span class="comment">//把 list 转为数组</span></span><br><span class="line">                list.toArray(predicates);</span><br><span class="line">                <span class="keyword">return</span> criteriaBuilder.and(predicates);<span class="comment">//where labelname like '%labelname%' and state = 'state'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Label&gt; <span class="title">pageQuery</span><span class="params">(Label label, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(page-<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，需要把条件封装到那个对象中，where 类型=label.getId</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> criteriaQuery 封装的都是查询关键字，如 group by order by</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> criteriaBuilder 用来封装条件对象，如直接返回 null ，表示不需要任何条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//new 一个集合存放所有条件</span></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(label.getLabelname()))&#123;</span><br><span class="line">                    Predicate predicate = criteriaBuilder.like(root.get(<span class="string">"labelname"</span>).as(String.class), <span class="string">"%"</span> + label.getLabelname() + <span class="string">"%"</span>);<span class="comment">// label like %labelname%</span></span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(label.getState()))&#123;</span><br><span class="line">                    Predicate predicate = criteriaBuilder.equal(root.get(<span class="string">"state"</span>).as(String.class), label.getState());<span class="comment">// label = state</span></span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//new 一个数组作为最终返回值条件</span></span><br><span class="line">                Predicate[] predicates = <span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                <span class="comment">//把 list 转为数组</span></span><br><span class="line">                list.toArray(predicates);</span><br><span class="line">                <span class="keyword">return</span> criteriaBuilder.and(predicates);<span class="comment">//where labelname like '%labelname%' and state = 'state'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,pageable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 findById(labelId) 得到的值为 Optional 类型，可以判断是否为空，也可直接 get() 获取到值</p><p>使用 save 如果没有 Id 则能保存（insert），如果存在 id 则为 update</p><p>通过匿名内部类进行 sql 语句查找</p><hr><h2 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value= Exception.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">error</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用增强器捕获异常使返回值以 Result 的方式返回，如此前端才能进行解析</p><hr><h3 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h3><p>docker images 查看下载的版本镜像</p><p>docker run -di –name=tensquare_redis -p 6379:6379 redis</p><p>docker ps 查看有无容器</p><h3 id="设置缓存"><a href="#设置缓存" class="headerlink" title="设置缓存"></a>设置缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Article <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">   Article article = (Article)redisTemplate.opsForValue().get(<span class="string">"article_"</span>+id);</span><br><span class="line">   <span class="keyword">if</span>(article==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="comment">//从数据库查询</span></span><br><span class="line">      article = articleDao.findById(id).get();</span><br><span class="line">      <span class="comment">//设置 redis 缓存，缓存时间</span></span><br><span class="line">      redisTemplate.opsForValue().set(<span class="string">"article_"</span>+id,article,<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> article;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> article</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">   redisTemplate.delete(<span class="string">"article_"</span>+article.getId());</span><br><span class="line">   articleDao.save(article);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="springcache"><a href="#springcache" class="headerlink" title="springcache"></a>springcache</h3><p>此方法比较简单，但是无法设置过期时间</p><p>使用 @EnableCache </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatheringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(GatheringApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> IdWorker <span class="title">idWorkker</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IdWorker(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放入缓存</p><p>value：全局名称</p><p>key：缓存对应 key 值，#能拿到当前方法中的参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"gathering"</span>,key=<span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Gathering <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gatheringDao.findById(id).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gathering</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"gathering"</span>,key=<span class="string">"#gathering.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Gathering gathering)</span> </span>&#123;</span><br><span class="line">   gatheringDao.save(gathering);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"gathering"</span>,key=<span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">   gatheringDao.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h2><p>javaTest </p><p>查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接 mongo 服务器</span></span><br><span class="line">        MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.25.130"</span>);</span><br><span class="line">        <span class="comment">//得到要操作的数据库</span></span><br><span class="line">        MongoDatabase spitdb = mongoClient.getDatabase(<span class="string">"spitdb"</span>);</span><br><span class="line">        <span class="comment">//得到要操作的集合</span></span><br><span class="line">        MongoCollection&lt;Document&gt; spit = spitdb.getCollection(<span class="string">"spit"</span>);</span><br><span class="line">        <span class="comment">//封装查询条件,用户 id 为1013</span></span><br><span class="line"><span class="comment">//        BasicDBObject userid = new BasicDBObject("userid", "1013");</span></span><br><span class="line">        <span class="comment">//封装查询条件,访问量大于1000</span></span><br><span class="line">        BasicDBObject visits = <span class="keyword">new</span> BasicDBObject(<span class="string">"visits"</span>, <span class="keyword">new</span> BasicDBObject(<span class="string">"$gt"</span>, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要操作的数据</span></span><br><span class="line">        FindIterable&lt;Document&gt; documents = spit.find(visits);</span><br><span class="line">        <span class="keyword">for</span> (Document document : documents) &#123;</span><br><span class="line">            System.out.println(<span class="string">"内容，"</span>+document.getString(<span class="string">"content"</span>));</span><br><span class="line">            System.out.println(<span class="string">"用户 id，"</span>+document.getString(<span class="string">"userid"</span>));</span><br><span class="line">            System.out.println(<span class="string">"访问量，"</span>+document.getInteger(<span class="string">"visits"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        mongoClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接 mongo 服务器</span></span><br><span class="line">        MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.25.130"</span>);</span><br><span class="line">        <span class="comment">//得到要操作的数据库</span></span><br><span class="line">        MongoDatabase spitdb = mongoClient.getDatabase(<span class="string">"spitdb"</span>);</span><br><span class="line">        <span class="comment">//得到要操作的集合</span></span><br><span class="line">        MongoCollection&lt;Document&gt; spit = spitdb.getCollection(<span class="string">"spit"</span>);</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"_id"</span>,<span class="string">"5"</span>);</span><br><span class="line">        map.put(<span class="string">"content"</span>,<span class="string">"12点啦"</span>);</span><br><span class="line">        map.put(<span class="string">"userid"</span>,<span class="string">"8888"</span>);</span><br><span class="line">        map.put(<span class="string">"visits"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"publishtime"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        Document document = <span class="keyword">new</span> Document(map);</span><br><span class="line">        spit.insertOne(document);</span><br><span class="line"></span><br><span class="line">        mongoClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongodb-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="spring-data-mongodb"><a href="#spring-data-mongodb" class="headerlink" title="spring-data-mongodb"></a>spring-data-mongodb</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tensquare<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tensquare_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9006</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">tensquare-spit</span> <span class="comment">#指定服务名</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.130</span></span><br><span class="line"><span class="attr">      database:</span> <span class="string">spitdb</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> crowsong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpitApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpitApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id 生成工具</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdWorker <span class="title">idWorker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IdWorker();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpitDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Spit</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Spit&gt; <span class="title">findByParentid</span><span class="params">(String parentid, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tensquare.spit.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tensquare.spit.dao.SpitDao;</span><br><span class="line"><span class="keyword">import</span> com.tensquare.spit.pojo.Spit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> util.IdWorker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpitService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpitDao spitDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Spit&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spitDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spit <span class="title">findById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spitDao.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Spit spit)</span></span>&#123;</span><br><span class="line">        <span class="comment">//自己设置 id</span></span><br><span class="line">        spit.set_id(idWorker.nextId()+<span class="string">""</span>);</span><br><span class="line">        spit.setPublishtime(<span class="keyword">new</span> Date());<span class="comment">//发布日期</span></span><br><span class="line">        spit.setVisits(<span class="number">0</span>);<span class="comment">//浏览量</span></span><br><span class="line">        spit.setShare(<span class="number">0</span>);<span class="comment">//分享数</span></span><br><span class="line">        spit.setThumbup(<span class="number">0</span>);<span class="comment">//点赞数</span></span><br><span class="line">        spit.setComment(<span class="number">0</span>);<span class="comment">//回复数</span></span><br><span class="line">        spit.setState(<span class="string">"1"</span>);<span class="comment">//状态</span></span><br><span class="line">        <span class="comment">//如果当前添加吐槽有父节点，则父节点回复数加一</span></span><br><span class="line">        <span class="keyword">if</span>(spit.getParentid()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(spit.getParentid()))&#123;</span><br><span class="line">            Query query = <span class="keyword">new</span> Query();</span><br><span class="line">            query.addCriteria(Criteria.where(<span class="string">"_id"</span>).is(spit.getParentid()));</span><br><span class="line">            Update update = <span class="keyword">new</span> Update();</span><br><span class="line">            update.inc(<span class="string">"comment"</span>,<span class="number">1</span>);</span><br><span class="line">            mongoTemplate.updateFirst(query,update,<span class="string">"spit"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        spitDao.save(spit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Spit spit)</span></span>&#123;</span><br><span class="line">        spitDao.save(spit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        spitDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Spit&gt; <span class="title">findByParentid</span><span class="params">(String parentid,<span class="keyword">int</span> page,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">        <span class="keyword">return</span> spitDao.findByParentid(parentid,pageable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thumbup</span><span class="params">(String spitId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//效率较低</span></span><br><span class="line"><span class="comment">//        Spit spit = spitDao.findById(spitId).get();</span></span><br><span class="line"><span class="comment">//        spit.setThumbup( spit.getThumbup() == null ? 1 : spit.getThumbup()+1 );</span></span><br><span class="line"><span class="comment">//        spitDao.save(spit);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用原生 mongo 命令实现自增 db.spit.update( &#123;"_id":"1"&#125;,&#123;$inc:&#123;thumbup:NumberInt(1)&#125;&#125; )</span></span><br><span class="line">        Query query = <span class="keyword">new</span> Query();</span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">"_id"</span>).is(spitId));</span><br><span class="line"></span><br><span class="line">        Update update = <span class="keyword">new</span> Update();</span><br><span class="line">        update.inc(<span class="string">"thumbup"</span>,<span class="number">1</span>);</span><br><span class="line">        mongoTemplate.updateFirst(query,update,<span class="string">"spit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired</p><p>默认按类型找，找不到会去按类型名称找</p><p>@Resourse</p><p>默认按名称找，找不到会去按类型找，如果在 @Resource(name=””) 写了名称，则不会去按类型找</p><p>@Qualifier</p><p>默认按类型找，找不到按名称找，如果 @Qualifier(“”) 中写了类型，则不会按名称去找</p><p>@Controller 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tensquare.spit.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tensquare.spit.pojo.Spit;</span><br><span class="line"><span class="keyword">import</span> com.tensquare.spit.service.SpitService;</span><br><span class="line"><span class="keyword">import</span> entity.PageResult;</span><br><span class="line"><span class="keyword">import</span> entity.Result;</span><br><span class="line"><span class="keyword">import</span> entity.StatusCode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/spit"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpitService spitService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK, <span class="string">"查询成功"</span>,spitService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spitId&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(@PathVariable String spitId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,spitService.findById(spitId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(@RequestBody Spit spit)</span></span>&#123;</span><br><span class="line">        spitService.save(spit);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"新增成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spitId&#125;"</span> ,method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(@PathVariable String spitId,@RequestBody Spit spit)</span></span>&#123;</span><br><span class="line">        spit.set_id(spitId);</span><br><span class="line">        spitService.update(spit);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"修改成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spitId&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(@PathVariable String spitId)</span></span>&#123;</span><br><span class="line">        spitService.deleteById(spitId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/comment/&#123;parentid&#125;/&#123;page&#125;/&#123;size&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findByParentid</span><span class="params">(@PathVariable String parentid,@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        Page&lt;Spit&gt; spitPage = spitService.findByParentid(parentid, page, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK, <span class="string">"查询成功"</span>,</span><br><span class="line">                <span class="keyword">new</span> PageResult&lt;Spit&gt;(spitPage.getTotalElements(),spitPage.getContent()) &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/thumbup/&#123;spitId&#125;"</span> ,method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">thumbup</span><span class="params">(@PathVariable String spitId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//未做登录，写死 userid</span></span><br><span class="line">        String userid = <span class="string">"111"</span>;</span><br><span class="line">        <span class="keyword">if</span>(redisTemplate.opsForValue().get(<span class="string">"thumbup_"</span>+userid)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.REPERROR,<span class="string">"不能重复点赞"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        spitService.thumbup(spitId);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"thumbup_"</span>+userid,userid);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"点赞成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2><p>数据库创建索引–构建B+二叉树</p><p>搜索效率提升，增删改效率下降</p><p>主、外键自带索引，唯一约束也会创建索引，可以手动创建用户名、订单等索引</p><p>elasticsearch 跟 solr 都是使用倒排索引，但solr 容易阻塞（不能实时），es 不会（能实时），一个字条对应一个文档</p><hr><h2 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h2><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes= RabbitApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"itcast"</span>,<span class="string">"直接模式测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"chuanzhi"</span>,<span class="string">""</span>,<span class="string">"分裂模式测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"topictest"</span>,<span class="string">"good.log.abc"</span>,<span class="string">"主题模式测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootTest 可以写 value 跟 properties 来写配置文件，或者 class 写 main 方法的启动类</p><hr><h2 id="User-用户登录"><a href="#User-用户登录" class="headerlink" title="User 用户登录"></a>User 用户登录</h2><h5 id="Apache-工具类"><a href="#Apache-工具类" class="headerlink" title="Apache 工具类"></a>Apache 工具类</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>apache 包中有随机数工具</p><p><code>String checkcode = RandomStringUtils.randomNumeric(6);</code></p><p>判断是否为空方法 StringUtils.isEmpty(str)</p><p>Controller 层判断空可以直接 return Result，在 Service 判断空可以 throw RunTimeException 再用 BaseException 捕获异常，根据 e.getMessage() 获得当时的异常</p><hr><h3 id="spring-启动类"><a href="#spring-启动类" class="headerlink" title="spring 启动类"></a>spring 启动类</h3><p>org\springframework\spring-web\5.0.5.RELEASE\spring-web-5.0.5.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer</p><p>下的 ServletContainerInitializer 是配置的一个启动类，初始化 servlet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure><hr><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="Q-Caused-by-org-hibernate-exception-GenericJDBCException-could-not-extract-ResultSet"><a href="#Q-Caused-by-org-hibernate-exception-GenericJDBCException-could-not-extract-ResultSet" class="headerlink" title="Q:Caused by: org.hibernate.exception.GenericJDBCException: could not extract ResultSet"></a>Q:Caused by: org.hibernate.exception.GenericJDBCException: could not extract ResultSet</h3><p>A:使用 jpa update 时没有加 @Modifying 注解</p><hr><h3 id="Q-Caused-by-javax-persistence-TransactionRequiredException-Executing-an-update-delete-query"><a href="#Q-Caused-by-javax-persistence-TransactionRequiredException-Executing-an-update-delete-query" class="headerlink" title="Q:Caused by: javax.persistence.TransactionRequiredException: Executing an update/delete query"></a>Q:Caused by: javax.persistence.TransactionRequiredException: Executing an update/delete query</h3><p>A: 使用 jpa udpate 是没有在 service 层加 @Transactional 注解</p><hr><h3 id="Q：org-mongodb-driver-cluster-Cluster-description-not-yet-available-Waiting-for-30000-ms-before-timing-out"><a href="#Q：org-mongodb-driver-cluster-Cluster-description-not-yet-available-Waiting-for-30000-ms-before-timing-out" class="headerlink" title="Q：org.mongodb.driver.cluster : Cluster description not yet available. Waiting for 30000 ms before timing out"></a>Q：org.mongodb.driver.cluster : Cluster description not yet available. Waiting for 30000 ms before timing out</h3><p>A:spring-data-mongdb 连接问题，将 yml 中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9006</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">tensquare-spit</span> <span class="comment">#指定服务名</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.130</span></span><br><span class="line"><span class="attr">      database:</span> <span class="string">spitdb</span></span><br></pre></td></tr></table></figure><p>data 写成了 datasource</p><hr><h3 id="Q-Caused-by-org-springframework-data-mapping-PropertyReferenceException-No-property-parentId-found-for-type-Spit-Did-you-mean-‘parentid’"><a href="#Q-Caused-by-org-springframework-data-mapping-PropertyReferenceException-No-property-parentId-found-for-type-Spit-Did-you-mean-‘parentid’" class="headerlink" title="Q:Caused by: org.springframework.data.mapping.PropertyReferenceException: No property parentId found for type Spit! Did you mean ‘parentid’?"></a>Q:Caused by: org.springframework.data.mapping.PropertyReferenceException: No property parentId found for type Spit! Did you mean ‘parentid’?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpitDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Spit</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Spit&gt; <span class="title">findByParentid</span><span class="params">(String parentid, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao 层 jpa 方法名需要根据 find+字段名，字段是 parentid 不能写成 findParentId()</p><hr><h4 id="Q-分页查询结果数为1，结果不显示"><a href="#Q-分页查询结果数为1，结果不显示" class="headerlink" title="Q:分页查询结果数为1，结果不显示"></a>Q:分页查询结果数为1，结果不显示</h4><p>分页参数设置时没有 -1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pageable pageable = PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line"><span class="keyword">return</span> spitDao.findByParentid(parentid,pageable);</span><br></pre></td></tr></table></figure><hr><h3 id="Q-mycat-无法连接-docker-中-mysql"><a href="#Q-mycat-无法连接-docker-中-mysql" class="headerlink" title="Q:mycat 无法连接 docker 中 mysql"></a>Q:mycat 无法连接 docker 中 mysql</h3><p>重启 linux 与 docker</p><p>重启 linux<code>reboot</code></p><p>启动 docker <code>systemctl start docker</code></p><p>启动  docker 容器 <code>docker run id</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP的幂等性&quot;&gt;&lt;a href=&quot;#HTTP的幂等性&quot; class=&quot;headerlink&quot; title=&quot;HTTP的幂等性&quot;&gt;&lt;/a&gt;HTTP的幂等性&lt;/h2&gt;&lt;p&gt;HTTP协议本身是一种面向资源的应用层协议，但对HTTP协议的使用实际上存在着两种不同的方式：一种是RESTful的，它把HTTP当成应用层协议，比较忠实地遵守了HTTP协议的各种规定；另一种是SOA的，它并没有完全把HTTP当成应用层协议，而是把HTTP协议作为了传输层协议，然后在HTTP之上建立了自己的应用层协议。本文所讨论的HTTP幂等性主要针对RESTful风格的，不过正如上一节所看到的那样，幂等性并不属于特定的协议，它是分布式系统的一种特性；所以，不论是SOA还是RESTful的Web API设计都应该考虑幂等性。下面将介绍HTTP GET、DELETE、PUT、POST四种主要方法的语义和幂等性。&lt;/p&gt;
&lt;p&gt;HTTP GET方法用于获取资源，不应有副作用，所以是幂等的。比如：GET &lt;a href=&quot;http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET&lt;/a&gt; &lt;a href=&quot;http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE &lt;a href=&quot;http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比较容易混淆的是HTTP POST和PUT。POST和PUT的区别容易被简单地误认为“POST表示创建资源，PUT表示更新资源”；而实际上，二者均可用于创建资源，更为本质的差别是在幂等性方面。在HTTP规范中对POST和PUT是这样定义的&lt;/p&gt;
&lt;p&gt;POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST &lt;a href=&quot;http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT&lt;/a&gt; &lt;a href=&quot;http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种模式可以应用于很多场合，比如：论坛网站中防止意外的重复发帖。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.cnblogs.com/weidagang2046/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Programming.log - a place to keep my thoughts on programming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/categories/spring/springBoot/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/spring/springBoot/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>miniUI</title>
    <link href="http://yoursite.com/2020/06/12/miniUI/"/>
    <id>http://yoursite.com/2020/06/12/miniUI/</id>
    <published>2020-06-12T02:50:00.000Z</published>
    <updated>2020-08-13T03:30:50.087Z</updated>
    
    <content type="html"><![CDATA[<p>使用 data=”isPrivate”</p><p>var isPrivate = [{‘id’:1,’text’:’是’},{‘id’:2,’text’:’否’}];</p><p>时会出现选中框出现 1,2 标志，使用 ‘是’、’否’ 替代 id 的 1,2</p><hr><p>miniui 中 </p><p>form = new mini.Form(“form1”);</p><p>form.getData(true,ture)</p><p>getData 中第一个 true 用于判断</p><p><code>var g = flag ? &quot;getFormValue&quot; : &quot;getValue&quot;</code></p><p>如果第一个值为 true 则为 getFormValue，获取显示值</p><p>例：后台返回一个商品编号，真实值为编号，显示值为商品名</p><p>getValue获取控件值<br>getFormValue获取控件显示值，比如spinner有格式化显示，获取到的就是格式化后的值，像textbox的话，两个方法是没区别的<br>checkbox    比如我设置了trueValue=”111” falseValue=”000“<br>那么设置value=”111”,这个checkbox就是选中的，value=”000”就是不选中的<br>getValue的时候，选中就获取111，不选中就是000</p><p><a href="http://www.miniui.com/forum/forum.php?mod=viewthread&amp;tid=62672" target="_blank" rel="noopener">getValue 与 getFormValue 区别</a></p><p><a href="https://help.finereport.com/doc-view-1824.html" target="_blank" rel="noopener">显示值与真实值</a></p><a id="more"></a><hr><h2 id="miniui-重写-CloseWindow"><a href="#miniui-重写-CloseWindow" class="headerlink" title="miniui 重写 CloseWindow"></a>miniui 重写 CloseWindow</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CloseWindow</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(action==<span class="string">"close"</span> &amp;&amp; form1.isChanged())</span><br><span class="line">    <span class="keyword">if</span>(confirm(<span class="string">"数据已改变,是否保存？"</span>))&#123;</span><br><span class="line">        <span class="comment">//点击关闭页面的 x 时，弹出确认框，如果选择先保存，则直接 return 不会关闭页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.CloseOwnerWindow)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.CloseOwnerWindow(action);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="miniui-跨页面传值"><a href="#miniui-跨页面传值" class="headerlink" title="miniui 跨页面传值"></a>miniui 跨页面传值</h2><p>关闭当前页函数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">Choise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            CloseWindow(<span class="string">"ok"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">function <span class="title">closeWindow</span><span class="params">(action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (window.CloseOwnerWindow)</span><br><span class="line">                <span class="keyword">return</span> window.CloseOwnerWindow(action);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                window.close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>父页面获取子页面数据</p><p><code>var data = iframe.contentWindow.grid.getSelected();</code></p><p><code>data = mini.clone(data);//必须。clone 前是 object 对象，clone 后是 miniui grid 结构的 json 对象</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">onButtonEdit</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">            var options = &#123;</span><br><span class="line">               <span class="comment">// targetWindow: window,   //页面对象。默认是顶级页面。</span></span><br><span class="line">                url: <span class="string">"/UserInfo/CompanyUsersSel.aspx"</span>,        <span class="comment">//页面地址</span></span><br><span class="line">                title: <span class="string">"选择微信ID"</span>,      <span class="comment">//标题</span></span><br><span class="line">                <span class="comment">//iconCls: String,    //标题图标</span></span><br><span class="line">                width: <span class="number">560</span>,      <span class="comment">//宽度</span></span><br><span class="line">                height: <span class="number">320</span>,     <span class="comment">//高度</span></span><br><span class="line">                allowResize: <span class="keyword">true</span>,       <span class="comment">//允许尺寸调节</span></span><br><span class="line">                allowDrag: <span class="keyword">true</span>,         <span class="comment">//允许拖拽位置</span></span><br><span class="line">                showCloseButton: <span class="keyword">true</span>,   <span class="comment">//显示关闭按钮</span></span><br><span class="line">                showMaxButton: <span class="keyword">false</span>,     <span class="comment">//显示最大化按钮</span></span><br><span class="line">                showModal: <span class="keyword">true</span>,         <span class="comment">//显示遮罩</span></span><br><span class="line">                loadOnRefresh: <span class="keyword">false</span>,       <span class="comment">//true每次刷新都激发onload事件</span></span><br><span class="line">                onload: function () &#123;       <span class="comment">//弹出页面加载完成</span></span><br><span class="line">                    var iframe = <span class="keyword">this</span>.getIFrameEl(); </span><br><span class="line">                    var data = &#123;&#125;;       </span><br><span class="line">                    <span class="comment">//调用弹出页面方法进行初始化</span></span><br><span class="line">                    <span class="comment">//iframe.contentWindow.SetData(data); </span></span><br><span class="line">                        </span><br><span class="line">                &#125;,</span><br><span class="line">                ondestroy: function (action) &#123;  <span class="comment">//弹出页面关闭前</span></span><br><span class="line">                    console.log(action);</span><br><span class="line">                    <span class="keyword">if</span> (action == <span class="string">"ok"</span>) &#123;       <span class="comment">//如果点击“确定”</span></span><br><span class="line">                        var iframe = <span class="keyword">this</span>.getIFrameEl();</span><br><span class="line">           </span><br><span class="line">                        <span class="comment">//获取选中、编辑的结果</span></span><br><span class="line">                        var data = iframe.contentWindow.grid.getSelected();</span><br><span class="line">                        data = mini.clone(data);    <span class="comment">//必须。克隆数据。</span></span><br><span class="line">                        console.log(data);</span><br><span class="line">                        mini.get(<span class="string">"CompanyUserId"</span>).setValue(data.UserId);</span><br><span class="line">                        mini.get(<span class="string">"CompanyUserId"</span>).setText(data.UserName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;;</span><br><span class="line">            mini.open(options);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/pengdayong77/article/details/103726855" target="_blank" rel="noopener">miniui跨页面传值</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 data=”isPrivate”&lt;/p&gt;
&lt;p&gt;var isPrivate = [{‘id’:1,’text’:’是’},{‘id’:2,’text’:’否’}];&lt;/p&gt;
&lt;p&gt;时会出现选中框出现 1,2 标志，使用 ‘是’、’否’ 替代 id 的 1,2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;miniui 中 &lt;/p&gt;
&lt;p&gt;form = new mini.Form(“form1”);&lt;/p&gt;
&lt;p&gt;form.getData(true,ture)&lt;/p&gt;
&lt;p&gt;getData 中第一个 true 用于判断&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var g = flag ? &amp;quot;getFormValue&amp;quot; : &amp;quot;getValue&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果第一个值为 true 则为 getFormValue，获取显示值&lt;/p&gt;
&lt;p&gt;例：后台返回一个商品编号，真实值为编号，显示值为商品名&lt;/p&gt;
&lt;p&gt;getValue获取控件值&lt;br&gt;getFormValue获取控件显示值，比如spinner有格式化显示，获取到的就是格式化后的值，像textbox的话，两个方法是没区别的&lt;br&gt;checkbox    比如我设置了trueValue=”111” falseValue=”000“&lt;br&gt;那么设置value=”111”,这个checkbox就是选中的，value=”000”就是不选中的&lt;br&gt;getValue的时候，选中就获取111，不选中就是000&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.miniui.com/forum/forum.php?mod=viewthread&amp;amp;tid=62672&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;getValue 与 getFormValue 区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://help.finereport.com/doc-view-1824.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;显示值与真实值&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>javaBase</title>
    <link href="http://yoursite.com/2020/04/20/javaBase/"/>
    <id>http://yoursite.com/2020/04/20/javaBase/</id>
    <published>2020-04-20T06:32:09.000Z</published>
    <updated>2020-08-11T09:28:55.912Z</updated>
    
    <content type="html"><![CDATA[<p>List：原始类型，类型不安全，会产生运行时异常，想要让其产生编译时异常，所以使用通配符</p><p>List&lt;?&gt; 无限通配符：可以将其视为只读列表，而不必关心项目类型</p><p>List&lt;E/T/U&gt; 的区别：</p><p>基本一致，一般以 E 指代 element，T 指代 type，V 指代 value，K 指代 key，编译的方法表示它接受了某种类型数组，并返回了相同类型的数组</p><hr><h2 id="webService-跟-esb-与-SOA"><a href="#webService-跟-esb-与-SOA" class="headerlink" title="webService 跟 esb 与 SOA"></a>webService 跟 esb 与 SOA</h2><p>WebService，是RPC的一样实现方式。</p><p>RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议</p><p>客户端要能调用服务端必须遵循TCP协议，而WebService使用的是更高一级的HTTP协议。</p><p>客户端访问服务器的目的是为了获取数据，那数据格式必须是与平台、语言无关的。WebService采用的是XML.</p><p>WebService的使用场景：ESB(企业服务总线)</p><p>如果一个企业存在多个使用不同语言开发的在用系统，数据传递和整合就显得尤其麻烦，利用传统连接各个系统的方法，存在如果新添加一个系统，都需要和每一个已经存在的系统建立关联，集成系统的时候入侵性太强，往往伴随着整体系统结构的改变。</p><p>所以在这种场景下，可在企业系统里搭建一根总线——ESB(企业服务总线),用来连接企业里各个系统的服务的。每个系统和总线连接起来，用XML传输数据。</p><p>把各系统连接到总线上以后，例如查询销售单，把请求抛给总线，由总线负责把消息带到进销存系统中去，再把结果按照应的规范传到总线上，由总线负责把结果返回到财务系统中。若要增加额外的系统，如WebQQ，就只需要把他挂到ESB上就OK了。ESB也是一个应用模块，负责把每个系统连接起来。</p><p>对于这一种架构，我们称为SOA：面向服务的架构。要使用总线上挂的各个服务则需要对暴露的接口做一个描述。</p><p>第一，ESB怎么知道有哪些什么样服务？那此时我们就得对暴露出去的服务做一个描述，而这个描述就是WSDL。</p><p>WSDL(WebServicesDescriptionLanguage)：WS的描述语言。告诉总线自己暴露了哪些服务。</p><p>SOAP(Simple Object Access Protocol)：简单对象访问协议。是一种轻量的、简单的、基于XML的协议，它被设计成在WEB上交换结构化的和固化的信息。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/applerosa/p/6001270.html" target="_blank" rel="noopener">WebService,ESB笔记</a></p></blockquote><hr><h2 id="webService-调用"><a href="#webService-调用" class="headerlink" title="webService 调用"></a>webService 调用</h2><p>在 idea 文件夹右键 WebService - Genarate Java Code From Wsdl…</p><p>选择 Allow extensions ，填写 web service wsdl url，点击 ok，删除生成的 class 类</p><blockquote><p>参考：<a href="https://www.pianshen.com/article/6409152830/" target="_blank" rel="noopener">spring项目在idea中最简单的调用webservice接口方法</a></p></blockquote><p>动态配置 webservice，添加配置文件，获取配置文件的值动态赋值给静态方法中的参数 properties 读不到配置文件的情况下填写 resource 下的绝对路径 + 配置文件名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//-----------------------</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties = PropertiesLoaderUtils.loadAllProperties(<span class="string">"配置文件名例如：bootstrap.yml"</span>);</span><br><span class="line">            <span class="comment">//遍历取值  </span></span><br><span class="line">            Set&lt;Object&gt; objects = properties.keySet();</span><br><span class="line">            <span class="keyword">for</span> (Object object : objects) &#123;</span><br><span class="line">            <span class="comment">//取到参数赋值给静态变量</span></span><br><span class="line">                <span class="keyword">if</span> (object.toString().equals(<span class="string">"WSDLURL"</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(properties.getProperty((String) object).getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"gbk"</span>));</span><br><span class="line">                    WSDLURL = <span class="keyword">new</span> String(properties.getProperty((String) object).getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"gbk"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//--------------------------</span></span><br><span class="line">        URL url = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> URL(WSDLURL);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            java.util.logging.Logger.getLogger(MmsService.class.getName())</span><br><span class="line">                    .log(java.util.logging.Level.INFO,</span><br><span class="line">                            <span class="string">"Can not initialize the default wsdl from &#123;0&#125;"</span>, WSDLURL);</span><br><span class="line">        &#125;</span><br><span class="line">        WSDL_LOCATION = url;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/m798469468/article/details/104008077" target="_blank" rel="noopener">动态配置 webservice </a></p><hr><h2 id="JSON-格式转换"><a href="#JSON-格式转换" class="headerlink" title="JSON 格式转换"></a>JSON 格式转换</h2><p>使用 net.sf.json.JSONObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSONObject objData = <span class="keyword">new</span> JSONObject().fromObject(jsonString);</span><br><span class="line">Boolean suc = (Boolean)objData.get(<span class="string">"success"</span>);</span><br><span class="line">String vecStr = objData.get(<span class="string">"feature_vector"</span>).toString();</span><br></pre></td></tr></table></figure><p>使用 com.alibaba.fastjson.JSONObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map obj= JSONObject.parseObject(jsonString, Map.class);</span><br><span class="line">Boolean suc = (Boolean)obj.get(<span class="string">"success"</span>);</span><br><span class="line">String vecStr =obj.get(<span class="string">"feature_vector"</span>).toString();</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_23888451/article/details/89254879" target="_blank" rel="noopener">net.sf.json和com.alibaba.fastjson对比</a></p></blockquote><p>获取 json 中的 json 数据</p><p><code>JSONObject jsonObject = (JSONObject)JSONObject.parseObject(sb.toString()).getJSONObject(&quot;data&quot;);</code></p><p><a href="https://blog.csdn.net/gududedabai/article/details/78637186" target="_blank" rel="noopener">fastJson解析多层Json数据案例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;List：原始类型，类型不安全，会产生运行时异常，想要让其产生编译时异常，所以使用通配符&lt;/p&gt;
&lt;p&gt;List&amp;lt;?&amp;gt; 无限通配符：可以将其视为只读列表，而不必关心项目类型&lt;/p&gt;
&lt;p&gt;List&amp;lt;E/T/U&amp;gt; 的区别：&lt;/p&gt;
&lt;p&gt;基本一致，一般
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springCloudBook</title>
    <link href="http://yoursite.com/2020/01/16/springCloudBook/"/>
    <id>http://yoursite.com/2020/01/16/springCloudBook/</id>
    <published>2020-01-16T01:29:34.000Z</published>
    <updated>2020-01-16T10:07:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>普通拷贝</p><p>1、第一次：将磁盘文件，读取到操作系统内核缓冲区；<br>2、第二次：将内核缓冲区的数据，copy到application应用程序的buffer；<br>3、第三步：将application应用程序buffer中的数据，copy到socket网络发送缓冲区(属于操作系统内核的缓冲区)；<br>4、第四次：将socket buffer的数据，copy到网卡，由网卡进行网络传输。</p><p>零拷贝技术，直接从内核空间（DMA的）到内核空间（Socket的)、然后发送网卡。<br>应用的场景非常多，如Tomcat、Nginx、Apache等web服务器返回静态资源等，将数据用网络发送出去，都运用了sendfile。</p><p><strong>直接内存访问</strong>（<strong>D</strong>irect <strong>M</strong>emory <strong>A</strong>ccess，<strong>DMA</strong>）是<a href="https://zh.wikipedia.org/wiki/计算机科学" target="_blank" rel="noopener">计算机科学</a>中的一种内存访问技术。它允许某些<a href="https://zh.wikipedia.org/wiki/電腦" target="_blank" rel="noopener">电脑</a>内部的硬件子系统（电脑外设），可以独立地直接读写系统<a href="https://zh.wikipedia.org/wiki/記憶體" target="_blank" rel="noopener">内存</a>，而不需<a href="https://zh.wikipedia.org/wiki/中央處理器" target="_blank" rel="noopener">中央处理器</a>（CPU）介入处理 。在同等程度的处理器负担下，DMA是一种快速的数据传送方式。很多硬件的系统会使用DMA，包含<a href="https://zh.wikipedia.org/wiki/硬碟" target="_blank" rel="noopener">硬盘</a>控制器、<a href="https://zh.wikipedia.org/wiki/繪圖顯示卡" target="_blank" rel="noopener">绘图显卡</a>、<a href="https://zh.wikipedia.org/wiki/网络卡" target="_blank" rel="noopener">网卡</a>和<a href="https://zh.wikipedia.org/wiki/声卡" target="_blank" rel="noopener">声卡</a>。–维基百科</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/78335525" target="_blank" rel="noopener">零拷贝技术</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;普通拷贝&lt;/p&gt;
&lt;p&gt;1、第一次：将磁盘文件，读取到操作系统内核缓冲区；&lt;br&gt;2、第二次：将内核缓冲区的数据，copy到application应用程序的buffer；&lt;br&gt;3、第三步：将application应用程序buffer中的数据，copy到socket网络发送
      
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springCloud" scheme="http://yoursite.com/tags/springCloud/"/>
    
  </entry>
  
  <entry>
    <title>linuxShell</title>
    <link href="http://yoursite.com/2020/01/13/linuxShell/"/>
    <id>http://yoursite.com/2020/01/13/linuxShell/</id>
    <published>2020-01-13T08:13:42.000Z</published>
    <updated>2020-05-28T06:52:02.955Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">DATE_STRING=$(date +%Y-%m-%d)</span><br><span class="line">LOCAL_USER=username</span><br><span class="line">LOCAL_PASSWORD=password</span><br><span class="line">REMOTE_HOST=remote_host</span><br><span class="line">REMOTE_PORT=1521</span><br><span class="line">REMOTE_SERVICE=orcl</span><br><span class="line">REMOTE_USER=remote_user</span><br><span class="line">REMOTE_PASSWORD=remote_password</span><br><span class="line">TABLES1=&apos;table1,table2,table3&apos;</span><br><span class="line">TABLES2=&apos;table3,table4,table5&apos;</span><br><span class="line">EXP_DIR=&apos;/user/exportDirectory&apos;</span><br><span class="line"></span><br><span class="line">echo &quot;---------------start export! time:$&#123;DATE_STRING&#125;---------------&quot;</span><br><span class="line"></span><br><span class="line">sudo su - oracle &lt;&lt; EOF</span><br><span class="line">sqlplus $LOCAL_USER/$LOCAL_USER </span><br><span class="line">drop directory EXPDP_DIR_208;</span><br><span class="line">exit </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo su - oracle &lt;&lt; EOF </span><br><span class="line">sqlplus $LOCAL_USER/$LOCAL_USER </span><br><span class="line">create putlic database link STANDARD_BAK_LINK connect to $REMOTE_USER using&apos;(DESCRIPTION = (ADDRESS_LIST=(ADDRESS=</span><br><span class="line">(PROTOCOL=TCP)(HOST=$REMOTE_HOST)(PORT = $REMOTE_PORT))(CONNECT_DATA = (SERVICE_NAME = $REMOTE_SERVICE)))&apos;;</span><br><span class="line">create or replace directory EXPDP_DIR as &apos;$&#123;EXP_DIR&#125;&apos;;</span><br><span class="line"></span><br><span class="line">sudo su - oracle &lt;&lt; EOF</span><br><span class="line">expdp $LOCAL_USER/$LOCAL_PASS DUMPFILE=$&#123;DATE_STRING&#125;.dmp network_link=STANDARD_BAK_LINK direcotry = EXPDP_DIR tables=$TABLES1,$TABLES2 reuse_dumpfiles=y</span><br><span class="line">exit</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">if [ $? -ne 0]; then</span><br><span class="line">    echo &quot;-----failed to backup uat data time:$&#123;DATE_STRING&#125;-----&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;-------export success!time:$&#123;DATE_STRING&#125;---------&quot;</span><br></pre></td></tr></table></figure><p>使用 dblink 导出备份表 shell 脚本</p><hr><h5 id="linux-管道命令与查看行数"><a href="#linux-管道命令与查看行数" class="headerlink" title="linux 管道命令与查看行数"></a>linux 管道命令与查看行数</h5><p><code>wc -l 123.txt</code></p><p>查看文件行数</p><p>输出 <code>4 123.txt</code></p><p>行数+文件名</p><p>使用管道命令 </p><p><code>cat 123.txt|wc -l</code></p><p>输出 <code>4</code></p><p>只输出行数</p><blockquote><p>参考：<a href="https://www.cnblogs.com/wq-mr-almost/p/10347114.html" target="_blank" rel="noopener">linux每日命令(36)：wc命令</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>springBootDDD</title>
    <link href="http://yoursite.com/2019/11/20/springBootDDD/"/>
    <id>http://yoursite.com/2019/11/20/springBootDDD/</id>
    <published>2019-11-20T06:58:09.000Z</published>
    <updated>2020-01-20T09:31:56.017Z</updated>
    
    <content type="html"><![CDATA[<p>springboot 使用mybatis 分层</p><blockquote><p><a href="https://www.cnblogs.com/smfx1314/p/9689824.html" target="_blank" rel="noopener">https://www.cnblogs.com/smfx1314/p/9689824.html</a></p></blockquote><h5 id="DDD-风格分层架构"><a href="#DDD-风格分层架构" class="headerlink" title="DDD 风格分层架构"></a>DDD 风格分层架构</h5><p>遵循基本的分层架构风格。</p><ul><li>User Interface —— 用户接口层。对外提供各种协议形式的服务，并提供Validation参数校验，authenticate权限认证，业务实体组装器Assembler等。图中标绿组件。</li><li>Application —— 应用服务层。组合多个业务实体、基础设施层的各种组件完成业务服务。图中标黄部分。</li><li>Domain —— 业务领域层。DDD概念中的核心业务层，封装所有业务逻辑，包含entity、value object、domain service、domain event等。图中标蓝部分。</li><li>Infrastructure —— 基础设施层。提供公共组件，如：Logging、Trascation、HttpClient等。图中标灰部分。</li></ul><blockquote><p><a href="https://www.cnblogs.com/daoqidelv/p/7499244.html" target="_blank" rel="noopener">https://www.cnblogs.com/daoqidelv/p/7499244.html</a></p></blockquote><a id="more"></a><hr><h5 id="eureka-使用"><a href="#eureka-使用" class="headerlink" title="eureka 使用"></a>eureka 使用</h5><p>服务端：</p><p>idea 使用 springboot Initializr 初始化项目，选择  spring Cloud Discovery -&gt; Eureka Server</p><p>在 Application 注解 @EnableEurekaServer</p><p>application.properties 中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8761</span><br><span class="line">#应用的主机名称</span><br><span class="line">eureka.instance.hostname: localhost</span><br><span class="line">#值为false意味着自身仅作为服务器，不作为客户端</span><br><span class="line">eureka.client.registerWithEureka: false</span><br><span class="line">#值为false意味着无需注册自身</span><br><span class="line">eureka.client.fetchRegistry: false</span><br><span class="line"># 指明了应用的URL</span><br><span class="line">eureka.client.serviceUrl.defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><p>客户端：</p><p>idea 使用 springboot Initializr 初始化项目，选择  spring Cloud Discovery -&gt; Eureka Discovery Client</p><p>在 Application 上注释 @EnableDiscoveryClient</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#注册名</span><br><span class="line">spring.application.name: micro-weather-eureka-client</span><br><span class="line">#服务器地址</span><br><span class="line">eureka.client.service-url.defaultZone: http://localhost:9091/eureka/</span><br></pre></td></tr></table></figure><hr><h5 id="springboot-配合-jpa-多数据源配置"><a href="#springboot-配合-jpa-多数据源配置" class="headerlink" title="springboot 配合 jpa 多数据源配置"></a>springboot 配合 jpa 多数据源配置</h5><p>如果没有 <code>jpaProperties.getHibernateProperties(hibernateSettings);</code> 方法，则可能是 springboot 版本为 2.2 以上，换低版本可解决，如 2.0.3 。如果在 1.x 版本的 springboot 依赖的 hibernate 方法也不一样，getHibernateProperties 方法的参数也有区别</p><blockquote><p>代码参考：<a href="https://github.com/crow-song/SpringBootJpaChangeDB" target="_blank" rel="noopener">https://github.com/crow-song/SpringBootJpaChangeDB</a></p></blockquote><blockquote><p>参考：<a href="https://blog.csdn.net/qq_26440803/article/details/83316743" target="_blank" rel="noopener">https://blog.csdn.net/qq_26440803/article/details/83316743</a></p><p><a href="https://www.jianshu.com/p/c207f53ba63c" target="_blank" rel="noopener">https://www.jianshu.com/p/c207f53ba63c</a></p></blockquote><h5 id="idea-使用-maven-打-jar-包"><a href="#idea-使用-maven-打-jar-包" class="headerlink" title="idea 使用 maven 打 jar 包"></a>idea 使用 maven 打 jar 包</h5><p>有问题可以尝试：以下几个 pom 配置，按需取</p><p><code>&lt;packing&gt;jar&lt;/packing&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;mainClass&gt;com.micro.weather.eureka.client.eureka.EurekaClientApplication&lt;/mainClass&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右边 maven LifeStyle 执行 clean ，package</p><p>在 jar 包上可以直接重命名</p><h5 id="jar-包后台运行"><a href="#jar-包后台运行" class="headerlink" title="jar 包后台运行"></a>jar 包后台运行</h5><p><code>nohup java -jar venues.jar &gt;temp.txt &amp;</code></p><p><code>jobs</code> 查看后台</p><p><code>fg 233</code> fg + 编号将任务调回前台</p><p><code>netstat -nlp |grep :9181</code></p><p>查看某端口占用的线程的pid</p><p><code>netstat -nlp |grep :9181</code></p><p>jobs -l 查看后台的进程</p><p>查询进程排除 gerp 进程，提取进程号</p><p><code>ps -ef|grep tomcat|grep -v grep|awk &#39;{print $2}&#39;</code></p><p>查看某端口的进程</p><p><code>lsof -i :9080</code></p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_30739519/article/details/51115075" target="_blank" rel="noopener">https://blog.csdn.net/qq_30739519/article/details/51115075</a></p></blockquote><blockquote><p>参考：<a href="https://waylau.com/eureke-server-register-and-server-discovery/" target="_blank" rel="noopener">https://waylau.com/eureke-server-register-and-server-discovery/</a></p></blockquote><blockquote><p>参考：<a href="https://www.cnblogs.com/baby123/p/6477429.html" target="_blank" rel="noopener">https://www.cnblogs.com/baby123/p/6477429.html</a></p></blockquote><hr><h5 id="springboot-yml-profile-不同环境配置"><a href="#springboot-yml-profile-不同环境配置" class="headerlink" title="springboot yml-profile 不同环境配置"></a>springboot yml-profile 不同环境配置</h5><p>如果使用YAML来配置属性，则可以遵循与配置文件相同的命名规范，即创建application-{profile}.yml这样的YAML文件，并将与Profile无关的属性继续放在application.yml里</p><blockquote><p>参考:<a href="https://cloud.tencent.com/developer/article/1079847" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1079847</a></p><p>参考：<a href="https://www.jianshu.com/p/6ac270aac03e" target="_blank" rel="noopener">https://www.jianshu.com/p/6ac270aac03e</a></p></blockquote><hr><h5 id="springboot-多数据源配置-JPA"><a href="#springboot-多数据源配置-JPA" class="headerlink" title="springboot 多数据源配置 JPA"></a>springboot 多数据源配置 JPA</h5><blockquote><p>参考：<a href="https://blog.csdn.net/qq_26440803/article/details/83316743" target="_blank" rel="noopener">https://blog.csdn.net/qq_26440803/article/details/83316743</a></p></blockquote><hr><h5 id="springboot-jpa-ddl-auto-选择"><a href="#springboot-jpa-ddl-auto-选择" class="headerlink" title="springboot jpa ddl-auto 选择"></a>springboot jpa ddl-auto 选择</h5><ul><li>create表示每次应用启动的时候，都会将之前的表全部drop掉，重新根据实体类生成一遍。</li><li>create-drop在create的基础上，在应用关闭的时候还会drop一次。</li><li>update可能是比较常用的，每次启动的时候会看看实体类有什么变化，然后看需不需要更改表结构。</li><li>validate不会对表进行更改，但是会看看他和实体类是否对应</li><li>none什么都不做</li></ul><p>一般在测试时可以使用 create-drop 或 update，生产环境不要使用 ddl-auto</p><blockquote><p>We do it in production albeit with an application that’s not mission critical and with no highly paid DBAs on staff. It’s just one less manual process that’s subject to human error - the application can detect the difference and do the right thing, plus you’ve presumably tested it in various development and test environments.</p><p>One caveat - in a clustered environment you may want to avoid it because multiple apps can come up at the same time and try to modify the schema which could be bad. Or put in some mechanism where only one instance is allowed to update the schema.</p></blockquote><blockquote><p>参考:<a href="https://blog.csdn.net/u012930316/article/details/76718744" target="_blank" rel="noopener">springboot data JPA的spring.jpa.hibernate.ddl-auto 的见解思考</a></p><p><a href="https://stackoverflow.com/questions/221379/hibernate-hbm2ddl-auto-update-in-production" target="_blank" rel="noopener">Hibernate: hbm2ddl.auto=update in production?</a></p></blockquote><hr><h5 id="springbootJPA-返回-DTO-值问题"><a href="#springbootJPA-返回-DTO-值问题" class="headerlink" title="springbootJPA 返回 DTO 值问题"></a>springbootJPA 返回 DTO 值问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaAccountPORepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>,<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"select new com.springboot.jpadata.application.api.response.AccountResponseDTO("</span> +</span><br><span class="line">            <span class="string">"a.id,a.name,a.money) "</span> +</span><br><span class="line">            <span class="string">"from Account a"</span>)</span><br><span class="line">    <span class="function">List&lt;AccountResponseDTO&gt; <span class="title">queryAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是要查询后返回 ResponseDTO 的部分值，需要在 DTO 中创建只包含那几个值的构造函数，</p><p>有 DTO 字段为 null 的情况可以把那几个 null 的字段去掉</p><hr><h5 id="JPA-Query-模糊查询"><a href="#JPA-Query-模糊查询" class="headerlink" title="JPA @Query 模糊查询"></a>JPA @Query 模糊查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT u.username FROM User u WHERE u.username LIKE CONCAT('%',:username,'%')"</span>)</span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">findUsersWithPartOfName</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>出处：<a href="https://stackoverflow.com/questions/21456494/spring-jpa-query-with-like" target="_blank" rel="noopener">https://stackoverflow.com/questions/21456494/spring-jpa-query-with-like</a></p></blockquote><hr><h5 id="springboot-restful-风格"><a href="#springboot-restful-风格" class="headerlink" title="springboot restful 风格"></a>springboot restful 风格</h5><blockquote><p><a href="https://mp.weixin.qq.com/s/XQURTg5we4RqmDzYzouURA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/XQURTg5we4RqmDzYzouURA</a></p></blockquote><hr><h5 id="springboot-整合-mybatis-实现-sql-输出"><a href="#springboot-整合-mybatis-实现-sql-输出" class="headerlink" title="springboot 整合 mybatis 实现 sql 输出"></a>springboot 整合 mybatis 实现 sql 输出</h5><p>在 logback-spring.xml 文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置包打印日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>= <span class="string">"com.jinhaoxun.acapply.dao.applyMapper"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>打印日志级别，为 TRACE 或 DEBUG 就能打印出 sql</p><p>其中 name 可为类名或者一个目录名</p><blockquote><p>参考：<a href="https://www.jianshu.com/p/a7f1a33b9825" target="_blank" rel="noopener">springboot项目配置logback打印日志，并自定义日志级别打印mybatis的sql语句</a></p></blockquote><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-springboot-启动报错-failed-to-load-driver-class"><a href="#Q-springboot-启动报错-failed-to-load-driver-class" class="headerlink" title="Q:springboot 启动报错 failed to load driver class"></a>Q:springboot 启动报错 failed to load driver class</h5><p>A:</p><p><code>failed to load driver class oracle.jdbc.oracledriver in either of hikariConfig class loader or Thread tontext classloader</code></p><p>启动报错，需要在 maven 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc7<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q-springboot-启动报错-Not-a-managed-type"><a href="#Q-springboot-启动报错-Not-a-managed-type" class="headerlink" title="Q:springboot 启动报错 Not a managed type:"></a>Q:springboot 启动报错 Not a managed type:</h5><p>Not a managed type: class com.springboot.jpadata.infrastructure.persistence.po.master.Users</p><p>A：没有注入实体类，看报错的实体类是哪个，加上 @Entiry 或其他对应的注解</p><blockquote><p>参考:<a href="https://blog.csdn.net/u012930316/article/details/76718744" target="_blank" rel="noopener">spring data jpa 出现Not a managed type</a></p></blockquote><hr><h5 id="Q-springbootlogback-出现报错"><a href="#Q-springbootlogback-出现报错" class="headerlink" title="Q:springbootlogback 出现报错"></a>Q:springbootlogback 出现报错</h5><p>A:16:46:33,199 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - openFile(/var/log/opentsdb/opentsdb.log,true) call failed. java.io.FileNotFoundException:</p><p>没有该路径，需要手动创建，或者在 logback-spring.xml 中配置 fileNamePattern</p><hr><h5 id="Q-Unsupported-major-minor-version-52-0"><a href="#Q-Unsupported-major-minor-version-52-0" class="headerlink" title="Q:Unsupported major.minor version 52.0"></a>Q:Unsupported major.minor version 52.0</h5><p>A:</p><p>直译过来意思是：不支持version52.0，其中version 52.0是魔码的其中一个版本，他对应的是jdk1.8</p><p>所以异议过来就是：不支持jdk1.8</p><p>简单来说，就是执行环境的jdk版本 低于 编译的jdk版本</p><p>jar 包编译时使用了 jdk 1.8,但是 linux 上使用的是 1.7 版本导致 java -jar 报错</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_36769100/article/details/78880341" target="_blank" rel="noopener">https://blog.csdn.net/qq_36769100/article/details/78880341</a></p></blockquote><hr><h5 id="Q-springboot-jar-包启动报错端口被占用"><a href="#Q-springboot-jar-包启动报错端口被占用" class="headerlink" title="Q:springboot jar 包启动报错端口被占用"></a>Q:springboot jar 包启动报错端口被占用</h5><p>The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</p><p>A:java -jar demo.jar –server.port=9090</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;springboot 使用mybatis 分层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/smfx1314/p/9689824.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/smfx1314/p/9689824.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;DDD-风格分层架构&quot;&gt;&lt;a href=&quot;#DDD-风格分层架构&quot; class=&quot;headerlink&quot; title=&quot;DDD 风格分层架构&quot;&gt;&lt;/a&gt;DDD 风格分层架构&lt;/h5&gt;&lt;p&gt;遵循基本的分层架构风格。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Interface —— 用户接口层。对外提供各种协议形式的服务，并提供Validation参数校验，authenticate权限认证，业务实体组装器Assembler等。图中标绿组件。&lt;/li&gt;
&lt;li&gt;Application —— 应用服务层。组合多个业务实体、基础设施层的各种组件完成业务服务。图中标黄部分。&lt;/li&gt;
&lt;li&gt;Domain —— 业务领域层。DDD概念中的核心业务层，封装所有业务逻辑，包含entity、value object、domain service、domain event等。图中标蓝部分。&lt;/li&gt;
&lt;li&gt;Infrastructure —— 基础设施层。提供公共组件，如：Logging、Trascation、HttpClient等。图中标灰部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/daoqidelv/p/7499244.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/daoqidelv/p/7499244.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>tenthPower</title>
    <link href="http://yoursite.com/2019/11/01/tenthPower/"/>
    <id>http://yoursite.com/2019/11/01/tenthPower/</id>
    <published>2019-11-01T07:32:12.000Z</published>
    <updated>2020-07-23T01:39:58.458Z</updated>
    
    <content type="html"><![CDATA[<p>创建 js 文件并将 text 文本输入到文件中</p><p><code>echo text&gt;demo.js</code></p><p>创建空文件</p><p><code>type nul&gt;demo.js</code></p><hr><h5 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a;</span><br><span class="line">    <span class="keyword">if</span>(b)&#123;</span><br><span class="line">        a = <span class="string">'abc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>使用 let 如果if 判断为 false 那么就会表示该变量是 undefined 的</p><p>如果使用 var 则不会有这个问题</p><a id="more"></a><hr><h5 id="全局只读变量"><a href="#全局只读变量" class="headerlink" title="全局只读变量"></a>全局只读变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="string">'abc'</span>;</span><br><span class="line">name =<span class="string">'123'</span>;</span><br><span class="line">console.log(name);</span><br></pre></td></tr></table></figure><p>使用 const 定义的值无法再进行赋值，如果赋值会抛出异常</p><hr><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板字符串</span></span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello,"</span>+name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">"卡面来打"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello，<span class="subst">$&#123;name2&#125;</span>come on!`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//换行</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">let</span> name3 = <span class="string">"双打撒声地所多\</span></span><br><span class="line"><span class="string">所发生的发丝东发送\</span></span><br><span class="line"><span class="string">水电费所发生的范德萨"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`打发第三方</span></span><br><span class="line"><span class="string">阿发所发生的</span></span><br><span class="line"><span class="string">大发送方式`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name3+info);</span><br></pre></td></tr></table></figure><hr><h5 id="默认变量定义"><a href="#默认变量定义" class="headerlink" title="默认变量定义"></a>默认变量定义</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num=<span class="number">200</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">test(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>如果 num 没有 test 赋值，则默认值为 200，如果赋值则为赋的值</p><hr><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">add=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">minus = <span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b;</span><br><span class="line"><span class="built_in">console</span>.log(minus(<span class="number">100</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>箭头前为参数，箭头后为函数体，如果函数只有一行可省略大括号</p><hr><h5 id="对象初始化简写方式"><a href="#对象初始化简写方式" class="headerlink" title="对象初始化简写方式"></a>对象初始化简写方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求：创建一个函数，传递两个参数 name 和 age，返回包含 name 和 age 的两个属性的对象</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="comment">// function people(name,age)&#123;</span></span><br><span class="line"><span class="comment">//     return&#123;</span></span><br><span class="line"><span class="comment">//         name:name,</span></span><br><span class="line"><span class="comment">//         age:age</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//#ES6 对象初始化简写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">people</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(people(<span class="string">"abc"</span>,<span class="number">12</span>)));</span><br></pre></td></tr></table></figure><hr><h5 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people=&#123;</span><br><span class="line">    name:<span class="string">'lishunshen'</span>,</span><br><span class="line">    age:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="comment">// const name=people.name;</span></span><br><span class="line"><span class="comment">// const name=people.age;</span></span><br><span class="line"><span class="comment">// console.log(name);</span></span><br><span class="line"><span class="comment">// console.log(age);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 解构</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age&#125; = people;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><hr><h5 id="属性扩展"><a href="#属性扩展" class="headerlink" title="属性扩展"></a>属性扩展</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性扩展</span></span><br><span class="line"><span class="keyword">const</span> color=[<span class="string">'red'</span>,<span class="string">'green'</span>];</span><br><span class="line"><span class="keyword">const</span> colorful=[...color,<span class="string">'yellow'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colorful);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> personnal = &#123;...person,<span class="attr">address</span>:<span class="string">'杭州'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(personnal);</span><br></pre></td></tr></table></figure><hr><h5 id="import-export-babel-插件"><a href="#import-export-babel-插件" class="headerlink" title="import export babel 插件"></a>import export babel 插件</h5><p>ES6 不默认支持 import 与 export，需要导入插件 使用 babel-node demo9 运行</p><p>lib.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn0=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn0...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span>&#123;fn0&#125;</span><br></pre></td></tr></table></figure><p>demo9</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>&#123;fn0&#125; <span class="keyword">from</span> <span class="string">'./lib'</span></span><br><span class="line">fn0();</span><br></pre></td></tr></table></figure><p>.babelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;es2015&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>promise     </p><hr><h4 id="Mock-js"><a href="#Mock-js" class="headerlink" title="Mock.js"></a>Mock.js</h4><h5 id="数据模板定义规范（DTD）"><a href="#数据模板定义规范（DTD）" class="headerlink" title="数据模板定义规范（DTD）"></a>数据模板定义规范（DTD）</h5><p>demo1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">'name'</span>:<span class="string">'测试'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo2</p><p>竖线分隔符，重复生成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'测试'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"list"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,       </span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,       </span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">      <span class="attr">"phone"</span>: <span class="string">"11111111111"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>竖线后数字表示重复几次</p><p>demo3</p><p>竖线后可以跟 x-y 表示重复后面的字符串随机 x 次到 y 次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-4'</span>:<span class="string">'测试'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo4</p><p>竖线后 +1 表示属性值自增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|1-8'</span>:<span class="string">'テスト'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'233'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(data,<span class="literal">null</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>id 会从 1 一直自增下去</p><p>demo5</p><p>竖线后的数字表示随机生成 x - y 中的其中一个数字，冒号后数字 0 不能带引号，如果带引号则会生成随机 x - y 个 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-3'</span>:<span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'point|122-500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000-8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money2|1000-5000.2-4'</span>:<span class="number">0</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo6</p><p>随机生成 x - y 的带有 2 个小数位的随机数，. 的后面可以为 x - y 的格式，表示随机生成 x -y 位的小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-3'</span>:<span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'point|122-500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000-8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'status|1'</span>:<span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>demo7</p><p>竖线后为 1，随机生成 true 或 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5-10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2-3'</span>:<span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'point|122-500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000-8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'status|1'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'default|1-3'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'detail|2-3'</span>:&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'date'</span>:<span class="string">'2019-12-25'</span>,<span class="string">'content'</span>:<span class="string">'merry christmas'</span>&#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>竖线后为 x - y ，表示 true 出现次数为 x/x+y ，false 出现次数较多</p><p>detail|2-3 表示随机取出对象中属性 2 - 3个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|5‐10'</span>: [&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'name|2‐3'</span>:<span class="string">'测试'</span>,</span><br><span class="line">        <span class="string">'phone|11'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'point|122‐500'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'money|3000‐8000.2'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'status|1'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'default|1‐3'</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'detail|2‐3'</span>:&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'date'</span>:<span class="string">'2005‐01‐01'</span>,<span class="string">'content'</span>:<span class="string">'记录'</span>&#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h5 id="数据占位符定义规范（DPO）"><a href="#数据占位符定义规范（DPO）" class="headerlink" title="数据占位符定义规范（DPO）"></a>数据占位符定义规范（DPO）</h5><p>基本方法</p><p>随机生成字符串，数字，日期跟图片地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'@string'</span>,</span><br><span class="line">        <span class="string">'point'</span>:<span class="string">'@integer'</span>,</span><br><span class="line">        <span class="string">'birthday'</span>:<span class="string">'@date'</span>,</span><br><span class="line">        <span class="string">'pic'</span>:<span class="string">'@image'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>文本方法</p><p>随机生成中文名，中文姓氏，英文名，标题，汉字（个数）个数可以为（x-y）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cname：中文名</span></span><br><span class="line"><span class="comment">//cfirst：中文姓氏</span></span><br><span class="line"><span class="comment">//Last：英文名</span></span><br><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'@cname'</span>,</span><br><span class="line">        <span class="string">'ename'</span>:<span class="string">'@last'</span>,</span><br><span class="line">        <span class="string">'cfirst'</span>:<span class="string">'@cfirst'</span>,</span><br><span class="line">        <span class="string">'point'</span>:<span class="string">'@integer'</span>,</span><br><span class="line">        <span class="string">'birthday'</span>:<span class="string">'@date'</span>,</span><br><span class="line">        <span class="string">'pic'</span>:<span class="string">'@image'</span>,</span><br><span class="line">        <span class="string">'title'</span>:<span class="string">'@title'</span>,</span><br><span class="line">        <span class="string">'content'</span>:<span class="string">'@cword(100)'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>网络方法</p><p>@region 生成地区，@county 生成区县</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成 url ip email 等信息</span></span><br><span class="line"><span class="keyword">let</span> Mock = <span class="built_in">require</span>(<span class="string">"mockjs"</span>)</span><br><span class="line"><span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|10'</span>:[&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'@cname'</span>,</span><br><span class="line">        <span class="string">'ename'</span>:<span class="string">'@last'</span>,</span><br><span class="line">        <span class="string">'cfirst'</span>:<span class="string">'@first'</span>,</span><br><span class="line">        <span class="string">'point'</span>:<span class="string">'@integer'</span>,</span><br><span class="line">        <span class="string">'bithday'</span>:<span class="string">'@date'</span>,</span><br><span class="line">        <span class="string">'pic'</span>:<span class="string">'@image'</span>,</span><br><span class="line">        <span class="string">'title'</span>:<span class="string">'@title'</span>,</span><br><span class="line">        <span class="string">'content'</span>:<span class="string">'@cword(100)'</span>,</span><br><span class="line">        <span class="string">'url'</span>:<span class="string">'@url'</span>,</span><br><span class="line">        <span class="string">'ip'</span>:<span class="string">'@ip'</span>,</span><br><span class="line">        <span class="string">'email'</span>:<span class="string">'@email'</span>,</span><br><span class="line">        <span class="string">'area'</span>:<span class="string">'@region'</span>,</span><br><span class="line">        <span class="string">'address'</span>:<span class="string">'@county(true)'</span>,</span><br><span class="line">        <span class="string">'region'</span>:<span class="string">'@region'</span>,</span><br><span class="line">        <span class="string">'county'</span>:<span class="string">"@county"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><hr><h4 id="本地安装easyMock"><a href="#本地安装easyMock" class="headerlink" title="本地安装easyMock"></a>本地安装easyMock</h4><p>使用 centos7 显示</p><p>VMware Workstation 与 Device/Credential Guard</p><p>一条命令搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p>重启电脑后即可</p><p>如果想重新开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><blockquote><p>出处：<a href="https://www.zhihu.com/question/64511903" target="_blank" rel="noopener">https://www.zhihu.com/question/64511903</a></p></blockquote><p>虚拟机跟 docker 不兼容问题</p><p>当你想用VM的时候<br>关闭HPV；<br>使用管理员powshell输入命令：bcdedit /set hypervisorlaunchtype off<br>重启<br>具体参考VM兼容问题<br>当你想用docker的时候<br>打开HPV<br>使用管理员powshell输入命令：bcdedit /set hypervisorlaunchtype auto<br>重启<br>具体参考：docker兼容问题</p><blockquote><p>出处：<a href="https://blog.csdn.net/rusi__/article/details/103672866" target="_blank" rel="noopener">https://blog.csdn.net/rusi__/article/details/103672866</a></p></blockquote><hr><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>本质是语法糖，v-model 会忽略所有表单元素的 value、checked、selected、attribute 的初始值而总是将 Vue 实例的数据作为数据源，需要在 js 的 data 选项中声明初始值</p><p>对 text 和 textarea 使用 value 属性和 input 事件</p><p>对 checkbox 和 radio 使用 checked 属性和 change 事件</p><p>对 select 将 value 作为属性 change 作为事件</p><hr><h5 id="picture-deploy"><a href="#picture-deploy" class="headerlink" title="picture deploy"></a>picture deploy</h5><img src="/2019/11/01/tenthPower/widget-acti.png" title="picture"><img src="/2019/11/01/tenthPower/widget-myphoto.jpg" title="picture1"><hr><h5 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h5><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><p><code>&lt;span&gt;Message: &lt;/span&gt;</code></p><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href="https://cn.vuejs.org/v2/api/#v-bind" target="_blank" rel="noopener"><code>v-bind</code> 指令</a>：</p><p><code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code></p><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute：<code>&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</code></p><p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> attribute 与表达式 <code>url</code> 的值绑定。</p><p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：<code>&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</code></p><p>v-bind 缩写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>v-on 缩写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h5><p>CORS  (Cross-Origin Resource  Sharing）</p><p>跨域资源共享(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS" target="_blank" rel="noopener">CORS</a>) 是一种机制，它使用额外的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP" target="_blank" rel="noopener">HTTP</a> 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域 HTTP 请求</strong>。</p><p>普通请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host:  localhost : 8080</span><br><span class="line">Origin:  http : //localhost:8081</span><br><span class="line">Referer:  http : //localhost : 8081/index.html</span><br></pre></td></tr></table></figure><p>CORS 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow - Origin:  http://localhost:8081</span><br><span class="line">Content -L ength:  20</span><br><span class="line">&apos;Content-Type&apos;:text/plain;charset=UTF-8</span><br><span class="line">Date:  Thu, 12  Jul  2018 12 : 51:14  GMT</span><br></pre></td></tr></table></figure><hr><p>两种富文本编辑器使用方式</p><ul><li><p>SPA worked by the <code>component</code>, find quill instance by <code>ref attribute</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;quill-editor v-model=&quot;content&quot;</span><br><span class="line">                ref=&quot;myQuillEditor&quot;</span><br><span class="line">                :options=&quot;editorOption&quot;</span><br><span class="line">                @blur=&quot;onEditorBlur($event)&quot;</span><br><span class="line">                @focus=&quot;onEditorFocus($event)&quot;</span><br><span class="line">                @ready=&quot;onEditorReady($event)&quot;&gt;</span><br><span class="line">  &lt;/quill-editor&gt;</span><br></pre></td></tr></table></figure></li><li><p>SSR worked by the <code>directive</code>, find quill instance by <code>directive arg</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- bidirectional data binding（双向数据绑定） --&gt;</span><br><span class="line"> &lt;div class=&quot;quill-editor&quot; </span><br><span class="line">      v-model=&quot;content&quot;</span><br><span class="line">      v-quill:myQuillEditor=&quot;editorOption&quot;&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="js-vue-的-this-指向"><a href="#js-vue-的-this-指向" class="headerlink" title="js vue 的 this 指向"></a>js vue 的 this 指向</h5><p>　情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。</p><p>  情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。</p><p>  情况3：如果一个函数中有this，<strong>这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，</strong></p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_34802416/article/details/86008657" target="_blank" rel="noopener">Vue中this的指向问题</a></p><p><a href="https://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">彻底理解js中this的指向，不必硬背。</a></p></blockquote><hr><h5 id="vue-页面跳转传参"><a href="#vue-页面跳转传参" class="headerlink" title="vue 页面跳转传参"></a>vue 页面跳转传参</h5><p><code>&lt;router-link :to=&quot;{path:&#39;/qa/label/comment&#39;,query:{id:problemlist.id}}&quot;&gt;评论&lt;/router-link&gt;</code></p><p>js 方法中获取参数  <code>this.$router.push(&#39;/qa/label/&#39;+this.$route.query.id)</code></p><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-element-ui-css-不生效"><a href="#Q-element-ui-css-不生效" class="headerlink" title="Q: element-ui css 不生效"></a>Q: element-ui css 不生效</h5><p>A:element-ui 安装后没有 node_modules 下的 element-ui 文件夹</p><p>可能是 vscode 未加载问题，导致 css 导入有问题</p><p>点击刷新或重新安装</p><hr><h5 id="Q：使用登录跳转页面-无法返回参数"><a href="#Q：使用登录跳转页面-无法返回参数" class="headerlink" title="Q：使用登录跳转页面 无法返回参数"></a>Q：使用登录跳转页面 无法返回参数</h5><p>A:</p><p>weixinlogin.vue 中 js 函数的 export default 中 mounted 写成了 mouted，导致无法识别为函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> weixinApi <span class="keyword">from</span> <span class="string">'@/api/weixin'</span></span><br><span class="line"><span class="keyword">import</span> &#123;getUrlParam&#125; <span class="keyword">from</span> <span class="string">'@/utils/param'</span></span><br><span class="line"><span class="keyword">import</span> &#123;setUser&#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mouted()&#123;</span><br><span class="line">        <span class="comment">//获取参数 code 值</span></span><br><span class="line">        <span class="keyword">let</span> code = getUrlParam(<span class="string">'code'</span>)</span><br><span class="line">        <span class="comment">//调用 api</span></span><br><span class="line">        weixinApi.getAccessToken(code).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> access_token = res.data.access_token</span><br><span class="line">            <span class="keyword">let</span> openid = res.data.openid</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'access_token:'</span>+access_token,<span class="string">'openid:'</span>+openid)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="Q-vue-瀑布流-Failed-to-execute-‘observe’-on-‘MutationObserver’-parameter-1-is-not-of-type-‘Node’"><a href="#Q-vue-瀑布流-Failed-to-execute-‘observe’-on-‘MutationObserver’-parameter-1-is-not-of-type-‘Node’" class="headerlink" title="Q: vue 瀑布流 Failed to execute ‘observe’ on ‘MutationObserver’: parameter 1 is not of type ‘Node’."></a>Q: vue 瀑布流 Failed to execute ‘observe’ on ‘MutationObserver’: parameter 1 is not of type ‘Node’.</h5><p>A:给瀑布流元素添加 style</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.tc-list</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://blog.csdn.net/weixin_44623040/article/details/102407996" target="_blank" rel="noopener">Vue使用mint-ui的Infinite scroll（无线滚动）报错MutationObserver’: parameter 1 is not of type ‘Node’.” * Failed</a></p></blockquote><hr><h5 id="Q-vue-添加了富文本编辑器插件后启动报错-error-This-is-probably-not-a-problem-with-npm-There-is-likely-additional-logging-output-above"><a href="#Q-vue-添加了富文本编辑器插件后启动报错-error-This-is-probably-not-a-problem-with-npm-There-is-likely-additional-logging-output-above" class="headerlink" title="Q:vue 添加了富文本编辑器插件后启动报错 error: This is probably not a problem with npm. There is likely additional logging output above"></a>Q:vue 添加了富文本编辑器插件后启动报错 error: This is probably not a problem with npm. There is likely additional logging output above</h5><p>使用 <code>cnpm run build --prod</code> 命令进行重新构建，会报出详细信息，我的原因是赋值粘贴 pdf 文件中的 - 格式有问题，导致无法识别，去掉特殊符号，人工使用键盘敲一遍</p><p><code>vue-quill-editor/dist/ssr</code></p><blockquote><p>参考：<a href="https://stackoverflow.com/questions/57605441/error-this-is-probably-not-a-problem-with-npm-there-is-likely-additional-loggi" target="_blank" rel="noopener">error: This is probably not a problem with npm. There is likely additional logging output above</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建 js 文件并将 text 文本输入到文件中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo text&amp;gt;demo.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建空文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;type nul&amp;gt;demo.js&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;全局变量与局部变量&quot;&gt;&lt;a href=&quot;#全局变量与局部变量&quot; class=&quot;headerlink&quot; title=&quot;全局变量与局部变量&quot;&gt;&lt;/a&gt;全局变量与局部变量&lt;/h5&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 let 如果if 判断为 false 那么就会表示该变量是 undefined 的&lt;/p&gt;
&lt;p&gt;如果使用 var 则不会有这个问题&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/javascript/Vue/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>gitUse</title>
    <link href="http://yoursite.com/2019/11/01/gitUse/"/>
    <id>http://yoursite.com/2019/11/01/gitUse/</id>
    <published>2019-11-01T02:11:22.000Z</published>
    <updated>2020-01-08T09:33:50.433Z</updated>
    
    <content type="html"><![CDATA[<p>git 命令</p><ul><li>下载仓库文件到本地</li></ul><p><code>git clone http://xxx.git</code></p><ul><li><p>下载分支代码到本地仓库</p><p><code>git clone -b feature/EDW-xxx http://xxx.git</code></p></li><li><p>查看本地目录对应远程仓库地址</p></li></ul><p>在本地 git 目录下</p><p><code>git remote -v</code></p><a id="more"></a><p>查看当前本地分支：<code>git branch</code></p><p>查看远程分支：<code>git branch -a</code></p><p>切换本地分支到 feature/xxx：<code>git checkout -b /feature/xxx origin/feature/xxx</code></p><p>切换回 master 分支：<code>git checkout master</code></p><p><code>git add 文件</code></p><p><code>git add 文件夹/</code></p><p><code>git commit -m &quot;提交信息&quot;</code></p><p>查看状态：<code>git status</code></p><p><code>git pull</code></p><p><code>git push 远程分支</code></p><hr><p>使用步骤：</p><p>clone 代码到本地：<code>git clone http://xxx.git</code></p><p>查看本地代码分支：<code>git branch</code></p><p>查看远程代码分支：<code>git branch -a</code></p><p>切换本地分支到远程分支一样的分支下：<code>git checkout -b /feature/xxx origin/freture/xxx</code></p><p>修改该分支代码</p><p>进行 add 修改过想提交的代码：<code>git add src/</code> 可以添加一个或多个文件，也可以添加一个目录</p><p>commit 代码并添加提交信息：<code>git commit -m &quot;message&quot;</code> </p><p>查看提交状态：<code>git status</code></p><p>push 到远程仓库：<code>git push -u origin/feature/xxx</code></p><hr><h4 id="Q-amp-A："><a href="#Q-amp-A：" class="headerlink" title="Q&amp;A："></a>Q&amp;A：</h4><h5 id="Q-git-push-error-java-home-not-found-in-your-environment"><a href="#Q-git-push-error-java-home-not-found-in-your-environment" class="headerlink" title="Q: git push error:java_home not found in your environment"></a>Q: git push error:java_home not found in your environment</h5><p>Please set the JAVA_HOME variable in your environment to match the location of your Java instalation.</p><p>mMake sure successfully execute command: ./mvnw.cmd clean test.error: failed to push some refs to ‘<a href="http://url.git&#39;" target="_blank" rel="noopener">http://url.git&#39;</a></p><p>git did not exit cleanly (exit code 1) (2765 ms @2019/12/17 8:59:28)</p><p>git 提交显示没有 java_home,但是在 git bash 和 cmd 下使用 java -version 都显示一样的 java 版本和目录</p><p>A:</p><p>如果是安装版的 jdk，需要手动配置 JAVA_HOME ，git push 会使用 maven 编译，导致找不到 jdk 等路径不然会 git push</p><blockquote><p>参考：<a href="https://stackoverflow.com/questions/17315425/error-in-setting-java-home" target="_blank" rel="noopener">Error in setting JAVA_HOME</a></p></blockquote><hr><h5 id="Q-git-push-error"><a href="#Q-git-push-error" class="headerlink" title="Q:git push error:"></a>Q:git push error:</h5><p>Non-resolvable parent POM for com.xxx:1.0.0: Could not find artifact com.xxx:xxx-starter-parent:pom:2.0.3-SNAPSHOT and ‘parent.relativePath’ points at no local POM @line13,column 10-&gt;[Help 2]</p><p>some problems were encountered while processing the poms</p><p>A：git push 时一直报找不到父工程的 pom 文件，然而本地idea maven install 正常</p><p>尝试了很多网上说的使用 relativePath 来配置父 pom 文件路径，但是我这个问题比较特殊。</p><p>在 git push 时会使用 maven 进行编译，而且默认找的是 User/.m2 下的 setting.xml 配置文件，默认仓库也是 ./m2 下那个，如果该仓库下没有对应的 setting.xml 和 仓库会报该错误。</p><p>因为我的 idea 中手动设置了新的地址放置 setting.xml 跟 repository 仓库，在 idea 编译 maven 时不会出现问题，如果在 git push 会报错</p><p>默认值为../pom.xml</p><p>查找顺序：relativePath元素中的地址–本地仓库–远程仓库</p><p>设定一个空值将始终从仓库中获取，不从本地路径获取。</p><blockquote><p>参考：<a href="https://blog.csdn.net/jiangyu1013/article/details/94319284" target="_blank" rel="noopener">maven 工程 pom.xml 中 relativePath 的作用</a></p></blockquote><hr><h5 id="git-本地删除文件后远程没删除"><a href="#git-本地删除文件后远程没删除" class="headerlink" title="git 本地删除文件后远程没删除"></a>git 本地删除文件后远程没删除</h5><p>在本地打开 git bash ，使用 <code>git status</code> 查看红色的文件，这些是修改了未 add 的文件，使用 <code>git add 文件或文件夹夹/</code> ，然后使用 <code>git commit -m &quot;message&quot;</code> ,<code>git push</code></p><p>提交后即可</p><blockquote><p>参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载仓库文件到本地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git clone http://xxx.git&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载分支代码到本地仓库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone -b feature/EDW-xxx http://xxx.git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看本地目录对应远程仓库地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本地 git 目录下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>springBootHM</title>
    <link href="http://yoursite.com/2019/10/21/springBootHM/"/>
    <id>http://yoursite.com/2019/10/21/springBootHM/</id>
    <published>2019-10-21T07:12:05.000Z</published>
    <updated>2020-08-18T10:07:06.262Z</updated>
    
    <content type="html"><![CDATA[<p>@SpringBootApplication</p><ul><li><p>@EnableAutoConfiguration</p></li><li><p>@SpringBootConfiguration</p></li><li>@ComponentScan</li></ul><p>包含三个注解，ComponentScan 能查找当前 Application 包下所有文件</p><a id="more"></a><p>@EnableAutoConfiguration</p><p>@Import({AutoConfigurationImportSelector.class})</p><p>org.springframework.boot.autoconfigure.AutoConfigurationImportSelector</p><p>AutoConfigurationImportSelector 类中的<br>getCandidateConfigurations() 方法中</p><p>该方法中打印的就是当前包下的 META-INF/spring.factories</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br></pre></td></tr></table></figure><p>查找 spring.factories 中的一个配置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br></pre></td></tr></table></figure><p>查找 ServletWebServerFactoryAutoConfiguration 类，在该类上的一个注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableConfigurationProperties(&#123;ServerProperties.class&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">erverProperties.class</span><br><span class="line">prefix = &quot;server&quot;,</span><br></pre></td></tr></table></figure><p>下有许多内置的属性<br><code>private Integer port;</code><br>通过配置文件加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/org/springframework/boot/spring-boot-autoconfigure/2.2.0.RELEASE/spring-boot-autoconfigure-2.2.0.RELEASE.jar!/META-INF/spring-configuration-metadata.json</span><br></pre></td></tr></table></figure><p>json<br>中其中一个配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"server.port"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"java.lang.Integer"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Server HTTP port."</span>,</span><br><span class="line">      <span class="attr">"sourceType"</span>: <span class="string">"org.springframework.boot.autoconfigure.web.ServerProperties"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="number">8080</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>能在 application.properties  等配置文件中进行覆写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=12222</span><br><span class="line">server.servlet.context-path=/demo</span><br></pre></td></tr></table></figure><p>yml 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">12345</span></span><br><span class="line"></span><br><span class="line"><span class="attr">city:</span> <span class="string">beijing</span></span><br><span class="line"><span class="comment">#city:</span></span><br><span class="line"><span class="comment">#  - beijing</span></span><br><span class="line"><span class="comment">#  - shanghai</span></span><br><span class="line"><span class="comment">#  - zhejiang</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#city: [nanjing,tianjin]</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">rufui</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">  addr:</span> <span class="string">beijing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置数据、集合（对象数据）</span></span><br><span class="line"><span class="attr">students:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    addr:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">tom</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    addr:</span> <span class="string">nanjing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置行内集合对象</span></span><br><span class="line"><span class="comment">#students: [&#123;name: luck,age: 19,addr: zhejiang&#125;,&#123;name: mike,age: 22,addr: tianjin&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">map:</span></span><br><span class="line"><span class="attr">  key1:</span> <span class="string">value1</span></span><br><span class="line"><span class="attr">  key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure><hr><h3 id="java-lombok-链式编程"><a href="#java-lombok-链式编程" class="headerlink" title="java lombok 链式编程"></a>java lombok 链式编程</h3><p>导入 lombok 包，给 javaBean 放上注解</p><p><code>@Accessors(chain = true)</code></p><p>然后再 structure 中会发现各个 set 方法从返回 void 变成了返回 javaBean</p><p>可以使用</p><p><code>JavaBean bean = new JavaBean().setId(&quot;111&quot;).setName(&quot;张三&quot;)</code></p><p>进行创建对象</p><p>静态Builder 方式</p><p>添加如下 Builder 方法与静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StudentBean <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StudentBean studentBean = <span class="keyword">new</span> StudentBean();</span><br><span class="line">studentBean.setName(name);</span><br><span class="line">studentBean.setAge(age);</span><br><span class="line"><span class="keyword">return</span> studentBean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可使用</p><p><code>StudentBean studentBean = StudentBean.builder().name(&quot;zhangsan&quot;).age(11).build();</code> </p><p>方式构建</p><p>Builder() 方式可以用 <code>@Builder</code> 注解替代 ，即可实现 lombok 方式链式构建</p><blockquote><p>参考：<a href="https://blog.csdn.net/xiaojin21cen/article/details/83478929" target="_blank" rel="noopener">Java 链式编程 和 lombok 实现链式编程</a></p><p><a href="https://blog.csdn.net/cauchy6317/article/details/102681033" target="_blank" rel="noopener">Lombok实验室之@Accessors使用</a></p></blockquote><hr><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h4 id="springboot-整合-junit-测试-java-lang-Exception-No-runnable-methods"><a href="#springboot-整合-junit-测试-java-lang-Exception-No-runnable-methods" class="headerlink" title="springboot 整合 junit 测试 java.lang.Exception: No runnable methods"></a>springboot 整合 junit 测试 java.lang.Exception: No runnable methods</h4><blockquote><p>没有可运行的方法</p><p>因为没有在测试类中的对应方法上面加 @Test 注解</p></blockquote><p>经过查看因为在测试类中加入的 @Test 方法是 org.junit.jupiter.api 的 Test 注释，把错误的包删掉，重新导入 org.junit.Test 的包</p><blockquote><p>参考：<a href="https://www.cnblogs.com/libra0920/p/6228838.html" target="_blank" rel="noopener">https://www.cnblogs.com/libra0920/p/6228838.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@SpringBootApplication&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@EnableAutoConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@SpringBootConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;@ComponentScan&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包含三个注解，ComponentScan 能查找当前 Application 包下所有文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>thinkingInJava</title>
    <link href="http://yoursite.com/2019/09/11/thinkingInJava/"/>
    <id>http://yoursite.com/2019/09/11/thinkingInJava/</id>
    <published>2019-09-11T06:49:56.000Z</published>
    <updated>2019-11-01T07:26:35.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-抽象的进步"><a href="#1-1-抽象的进步" class="headerlink" title="1.1 抽象的进步"></a>1.1 抽象的进步</h2><p>在面向对象的程序设计中，尽管我们真正要做的是新建各种各样的数据“类型”（Type），但几乎所有面向对象的程序设计语言都采用了“class”关键字。当您看到“type”这个字的时候，请同时想到“class”；反之亦然。</p><a id="more"></a><h2 id="1-2-对象的接口"><a href="#1-2-对象的接口" class="headerlink" title="1.2 对象的接口"></a>1.2 对象的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Light lt = <span class="keyword">new</span> Light();</span><br><span class="line">lt.on();</span><br></pre></td></tr></table></figure><p>在这个例子中，类型／类的名称是Light，可向Light对象发出的请求包括包括打开（on）、关闭（off）、变得更明亮（brighten）或者变得更暗淡（dim）。通过简单地声明一个名字（lt），我们为Light对象创建了一个“句柄”。然后用new关键字新建类型为Light的一个对象。再用等号将其赋给句柄。为了向对象发送一条消息，我们列出句柄名（lt），再用一个句点符号（.）把它同消息名称（on）连接起来。从中可以看出，使用一些预先定义好的类时，我们在程序里采用的代码是非常简单和直观的。</p><h2 id="1-3-实现方案的隐藏"><a href="#1-3-实现方案的隐藏" class="headerlink" title="1.3 实现方案的隐藏"></a>1.3 实现方案的隐藏</h2><p>Java采用三个显式（明确）关键字以及一个隐式（暗示）关键字来设置类边界：public，private，protected以及暗示性的friendly。若未明确指定其他关键字，则默认为后者。这些关键字的使用和含义都是相当直观的，它们决定了谁能使用后续的定义内容。“public”（公共）意味着后续的定义任何人均可使用。而在另一方面，“private”（私有）意味着除您自己、类型的创建者以及那个类型的内部函数成员，其他任何人都不能访问后续的定义信息。private在您与客户程序员之间竖起了一堵墙。若有人试图访问私有成员，就会得到一个编译期错误。“friendly”（友好的）涉及“包装”或“封装”（Package）的概念——即Java用来构建库的方法。若某样东西是“友好的”，意味着它只能在这个包装的范围内使用（所以这一访问级别有时也叫作“包装访问”）。“protected”（受保护的）与“private”相似，只是一个继承的类可访问受保护的成员，但不能访问私有成员。</p><h2 id="1-4-方案的重复使用"><a href="#1-4-方案的重复使用" class="headerlink" title="1.4 方案的重复使用"></a>1.4 方案的重复使用</h2><p>为重复使用一个类，最简单的办法是仅直接使用那个类的对象。但同时也能将那个类的一个对象置入一个新类。我们把这叫作“创建一个成员对象”。新类可由任意数量和类型的其他对象构成。无论如何，只要新类达到了设计要求即可。这个概念叫作“组织”——在现有类的基础上组织一个新类。有时，我们也将组织称作“包含”关系，比如“一辆车包含了一个变速箱”。</p><p>对象的组织具有极大的灵活性。新类的“成员对象”通常设为“私有”（Private），使用这个类的客户程序员不能访问它们。这样一来，我们可在不干扰客户代码的前提下，从容地修改那些成员。也可以在“运行期”更改成员，这进一步增大了灵活性。后面要讲到的“继承”并不具备这种灵活性，因为编译器必须对通过继承创建的类加以限制。</p><p>由于继承的重要性，所以在面向对象的程序设计中，它经常被重点强调。作为新加入这一领域的程序员，或许早已先入为主地认为“继承应当随处可见”。沿这种思路产生的设计将是非常笨拙的，会大大增加程序的复杂程度。相反，新建类的时候，首先应考虑“组织”对象；这样做显得更加简单和灵活。利用对象的组织，我们的设计可保持清爽。一旦需要用到继承，就会明显意识到这一点。</p><h2 id="1-5-继承：重新使用接口"><a href="#1-5-继承：重新使用接口" class="headerlink" title="1.5 继承：重新使用接口"></a>1.5 继承：重新使用接口</h2><p>但在许多时候，我们必须为衍生类型加入新的接口元素。所以不仅扩展了接口，也创建了一种新类型。这种新类型仍可替换成基础类型，但这种替换并不是完美的，因为不可在基础类里访问新函数。我们将其称作“类似”关系；新类型拥有旧类型的接口，但也包含了其他函数，所以不能说它们是完全等价的。举个例子来说，让我们考虑一下制冷机的情况。假定我们的房间连好了用于制冷的各种控制器；也就是说，我们已拥有必要的“接口”来控制制冷。现在假设机器出了故障，我们把它换成一台新型的冷、热两用空调，冬天和夏天均可使用。冷、热空调“类似”制冷机，但能做更多的事情。由于我们的房间只安装了控制制冷的设备，所以它们只限于同新机器的制冷部分打交道。新机器的接口已得到了扩展，但现有的系统并不知道除原始接口以外的任何东西。</p><h2 id="1-6-多形对象的互换使用"><a href="#1-6-多形对象的互换使用" class="headerlink" title="1.6 多形对象的互换使用"></a>1.6 多形对象的互换使用</h2><p>设计程序时，我们经常都希望基础类只为自己的衍生类提供一个接口。也就是说，我们不想其他任何人实际创建基础类的一个对象，只对上溯造型成它，以便使用它们的接口。为达到这个目的，需要把那个类变成“抽象”的——使用abstract关键字。若有人试图创建抽象类的一个对象，编译器就会阻止他们。这种工具可有效强制实行一种特殊的设计。</p><p>亦可用abstract关键字描述一个尚未实现的方法——作为一个“根”使用，指出：“这是适用于从这个类继承的所有类型的一个接口函数，但目前尚没有对它进行任何形式的实现。”抽象方法也许只能在一个抽象类里创建。继承了一个类后，那个方法就必须实现，否则继承的类也会变成“抽象”类。通过创建一个抽象方法，我们可以将一个方法置入接口中，不必再为那个方法提供可能毫无意义的主体代码。</p><p>interface（接口）关键字将抽象类的概念更延伸了一步，它完全禁止了所有的函数定义。“接口”是一种相当有效和常用的工具。另外如果自己愿意，亦可将多个接口都合并到一起（不能从多个普通class或abstract class中继承）。</p><h2 id="1-7-对象的创建和存在时间"><a href="#1-7-对象的创建和存在时间" class="headerlink" title="1.7 对象的创建和存在时间"></a>1.7 对象的创建和存在时间</h2><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>在程序设计中，句柄是Windows操作系统用来标识被应用程序所创建或使用的对象的整数。其本质相当于带有引用计数的智能指针。当一个应用程序要引用其他系统所管理的内存块或对象时，可以使用句柄</p><p>第二个方法是在一个内存池中动态创建对象，该内存池亦叫“堆”或者“内存堆”。若采用这种方式，除非进入运行期，否则根本不知道到底需要多少个对象，也不知道它们的存在时间有多长，以及准确的类型是什么。这些参数都在程序正式运行时才决定的。若需一个新对象，只需在需要它的时候在内存堆里简单地创建它即可。由于存储空间的管理是运行期间动态进行的，所以在内存堆里分配存储空间的时间比在堆栈里创建的时间长得多（在堆栈里创建存储空间一般只需要一个简单的指令，将堆栈指针向下或向下移动即可）。由于动态创建方法使对象本来就倾向于复杂，所以查找存储空间以及释放它所需的额外开销不会为对象的创建造成明显的影响。除此以外，更大的灵活性对于常规编程问题的解决是至关重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-抽象的进步&quot;&gt;&lt;a href=&quot;#1-1-抽象的进步&quot; class=&quot;headerlink&quot; title=&quot;1.1 抽象的进步&quot;&gt;&lt;/a&gt;1.1 抽象的进步&lt;/h2&gt;&lt;p&gt;在面向对象的程序设计中，尽管我们真正要做的是新建各种各样的数据“类型”（Type），但几乎所有面向对象的程序设计语言都采用了“class”关键字。当您看到“type”这个字的时候，请同时想到“class”；反之亦然。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springBoot-features3</title>
    <link href="http://yoursite.com/2019/09/04/springBoot-features3/"/>
    <id>http://yoursite.com/2019/09/04/springBoot-features3/</id>
    <published>2019-09-04T15:53:44.000Z</published>
    <updated>2020-07-02T14:15:41.940Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/09/04/springBoot-features3/1567612536802.png" title="官方文档"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567612536802.png" alt="官方文档"></p><p>除REST Web服务外，您还可以使用Spring WebFlux来提供动态HTML内容。Spring WebFlux支持各种模板技术，包括<code>Thymeleaf</code>，<code>FreeMarker</code>和<code>Mustache</code>。</p><p>当您使用其中一个模板引擎和默认配置时，您的模板将自动从 <code>src/main/resources/templates</code> 中获取。</p><a id="more"></a><h2 id="1-1-创建-model"><a href="#1-1-创建-model" class="headerlink" title="1.1 创建 model"></a>1.1 创建 model</h2><img src="/2019/09/04/springBoot-features3/1567612981120.png" title="bean"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567612981120.png" alt="bean"></p><h2 id="1-2-创建-repository-接口和实现类"><a href="#1-2-创建-repository-接口和实现类" class="headerlink" title="1.2 创建 repository 接口和实现类"></a>1.2 创建 repository 接口和实现类</h2><img src="/2019/09/04/springBoot-features3/1567613444181.png" title="repository"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567613444181.png" alt="repository"></p><p>在 repository 中返回一个 Flux 对象</p><img src="/2019/09/04/springBoot-features3/1567613501388.png" title="repositoryImpl"><h2 id="1-3-创建-Controller-类"><a href="#1-3-创建-Controller-类" class="headerlink" title="1.3 创建 Controller 类"></a>1.3 创建 Controller 类</h2><img src="/2019/09/04/springBoot-features3/1567613872007.png" title="controller"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567613872007.png" alt="controller"></p><h2 id="1-4-创建-index-html-页面"><a href="#1-4-创建-index-html-页面" class="headerlink" title="1.4 创建 index.html 页面"></a>1.4 创建 index.html 页面</h2><img src="/2019/09/04/springBoot-features3/1567613993754.png" title="index"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567613993754.png" alt="index"></p><p>页面引入的 css </p><img src="/2019/09/04/springBoot-features3/1567614086090.png" title="css"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567614086090.png" alt="css"></p><h2 id="1-5-页面展示"><a href="#1-5-页面展示" class="headerlink" title="1.5 页面展示"></a>1.5 页面展示</h2><p>访问 localhost:8080</p><p>数据以流式传输，并且以每隔两秒的反应方式显示</p><img src="/2019/09/04/springBoot-features3/1567614165548.png" title="page1"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567614165548.png" alt="page1"></p><img src="/2019/09/04/springBoot-features3/1567614237815.png" title="page2"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567614237815.png" alt="page2"></p><img src="/2019/09/04/springBoot-features3/1567614267519.png" title="page3"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/1567614267519.png" alt="page3"></p><img src="/2019/09/04/springBoot-features3/testToGIF.gif" title="demo"><p><img src="//yoursite.com/2019/09/04/springBoot-features3/testToGIF.gif" alt="demo"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/09/04/springBoot-features3/1567612536802.png&quot; title=&quot;官方文档&quot;&gt;
&lt;p&gt;&lt;img src=&quot;//yoursite.com/2019/09/04/springBoot-features3/1567612536802.png&quot; alt=&quot;官方文档&quot;&gt;&lt;/p&gt;
&lt;p&gt;除REST Web服务外，您还可以使用Spring WebFlux来提供动态HTML内容。Spring WebFlux支持各种模板技术，包括&lt;code&gt;Thymeleaf&lt;/code&gt;，&lt;code&gt;FreeMarker&lt;/code&gt;和&lt;code&gt;Mustache&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当您使用其中一个模板引擎和默认配置时，您的模板将自动从 &lt;code&gt;src/main/resources/templates&lt;/code&gt; 中获取。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
      <category term="springMVC" scheme="http://yoursite.com/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>lambda</title>
    <link href="http://yoursite.com/2019/08/08/lambda/"/>
    <id>http://yoursite.com/2019/08/08/lambda/</id>
    <published>2019-08-08T14:07:58.000Z</published>
    <updated>2019-09-05T06:16:39.657Z</updated>
    
    <content type="html"><![CDATA[<p>hashMap 中存储的是 entry，既索引和值的方式，用索引的方式进行查找内部的值。</p><p>如果插入一个新的值，没有索引的方式下，如果内部有 100W 值，需要进行 100W 次比较，但是 hashMap 使用 hashCode 将需要插入的值计算成索引的方式，去找索引位置有无该索引可以进行判断该对象是否存在，如果没有就可以直接将该值插入到此处。</p><p>如果索引处有值存在，那么用 equals 进行判断，两个值是否相同，如果相同就覆盖原来的值</p><p>如果不相同就会碰撞，形成一个链表，将新的值放链表头（1.7）或链表尾（1.8），如果再有相同索引的值进来，就要跟链表中所有值进行 equals，会降低效率</p><p>为了尽可能降低链表长度，如果容量达到原来 hashMap 的 75% 时，hashMap 会自动进行扩容（resize），将链表中所有元素重新运算，放到扩容完的 hashMap 的中</p><p>java1.8 中如果链表长度大于 8 ，那么就会将其转化为红黑树（提升除了添加以外所有操作效率）</p><p>concurrenthashMap 也是 java8 开始转为红黑树</p><p>java8 中将方法区从永久区转移到元空间 MetaSpace，使用物理内存，因为内存变大了，所以垃圾回收机制运行的概率下降了</p><a id="more"></a><hr><p>lambda 表达式</p><h5 id="无参无返回值"><a href="#无参无返回值" class="headerlink" title="无参无返回值"></a>无参无返回值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testLambda1</span></span>&#123;</span><br><span class="line">    <span class="comment">//通常实现 run 方法</span></span><br><span class="line">Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r.run();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line">    Runnable r1 = ()-&gt;System.out.println(<span class="string">"hello World"</span>);</span><br><span class="line">    r1.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式接口：如果一个接口中只有一个方法，那么这个接口就是函数式接口</p><p>@FunctionanlInterface 声明为函数式接口，如果有多个方法则无法通过</p><p>定义一个函数式接口，调用接口方法进行乘法操作（也可以定义其他加减法等函数）,输出结果为10000，2533</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">operation</span><span class="params">(Integer num,MyFun mf)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mf.getValue(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer i = operation(<span class="number">100</span>,(x)-&gt;x*x);</span><br><span class="line">System.out.println(i);</span><br><span class="line">    System.out.println(operation(<span class="number">200</span>,y-&gt;y+<span class="number">2333</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFun</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">(Integer num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hashMap 中存储的是 entry，既索引和值的方式，用索引的方式进行查找内部的值。&lt;/p&gt;
&lt;p&gt;如果插入一个新的值，没有索引的方式下，如果内部有 100W 值，需要进行 100W 次比较，但是 hashMap 使用 hashCode 将需要插入的值计算成索引的方式，去找索引位置有无该索引可以进行判断该对象是否存在，如果没有就可以直接将该值插入到此处。&lt;/p&gt;
&lt;p&gt;如果索引处有值存在，那么用 equals 进行判断，两个值是否相同，如果相同就覆盖原来的值&lt;/p&gt;
&lt;p&gt;如果不相同就会碰撞，形成一个链表，将新的值放链表头（1.7）或链表尾（1.8），如果再有相同索引的值进来，就要跟链表中所有值进行 equals，会降低效率&lt;/p&gt;
&lt;p&gt;为了尽可能降低链表长度，如果容量达到原来 hashMap 的 75% 时，hashMap 会自动进行扩容（resize），将链表中所有元素重新运算，放到扩容完的 hashMap 的中&lt;/p&gt;
&lt;p&gt;java1.8 中如果链表长度大于 8 ，那么就会将其转化为红黑树（提升除了添加以外所有操作效率）&lt;/p&gt;
&lt;p&gt;concurrenthashMap 也是 java8 开始转为红黑树&lt;/p&gt;
&lt;p&gt;java8 中将方法区从永久区转移到元空间 MetaSpace，使用物理内存，因为内存变大了，所以垃圾回收机制运行的概率下降了&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="lambda" scheme="http://yoursite.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>springBoot-features2</title>
    <link href="http://yoursite.com/2019/08/01/springBoot-features2/"/>
    <id>http://yoursite.com/2019/08/01/springBoot-features2/</id>
    <published>2019-08-01T00:52:29.000Z</published>
    <updated>2019-09-05T06:17:07.795Z</updated>
    
    <content type="html"><![CDATA[<p>自动配置了ContentNegotiatingViewResolver和BeanNameViewResolver两个视图解析器。</p><p>支持静态资源，包括webjars</p><p>Converter, GenericConverter和 Formatter bean类的自动化装配。</p><p>支持HttpMessageConverters</p><p>MessageCodesResolver自动注册。</p><p>支持index.html静态页面。</p><p>支持自定义Favicon（网站图标）。</p><p>ConfigurableWebBindingInitializer自动使用</p><p>如果你想保留Spring Boot MVC原有的功能而且还想添加额外MVC配置(interceptors，formatter，视图控制器view controller或者其他功能)，你可以添加你自己@Configuration配置但没有@EnableWebMvc的WebMvcConfigurer类，如果你希望自定义RequestMappingHandlerMapping、RequestMappingHandlerAdapter或者ExceptionHandlerExceptionResolver对象。<br> 你可以声明一个 WebMvcRegistrationsAdapter 对象去提供这些组件。</p><p>如果你想完全控制Spring MVC。你能添加自定义@Configuration和@EnableWebMvc注解的类。</p><a id="more"></a><h2 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h2><p>ContentNegotiatingViewResolver</p><img src="/2019/08/01/springBoot-features2/ConfigurableWebBinding.png" title="静态资源路径"><img src="/2019/08/01/springBoot-features2/resolveViewName.png" title="resolveViewName"><p>getCandidateView 是用来获取所有解析式图的</p><p><code>Collection&lt;ViewResolver&gt; matchingBeans =      BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(), ViewResolver.class).values();</code></p><p>自定义视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义视图解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(MyViewResolver.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/viewResolver.png" title="viewResolver"><h2 id="支持静态资源，包括webjars"><a href="#支持静态资源，包括webjars" class="headerlink" title="支持静态资源，包括webjars"></a>支持静态资源，包括webjars</h2><p>springMVC 项目一般将静态资源放在 webapp 文件夹下，但是使用 springBoot 创建的项目没有 webapp 目录，springboot 有着自己的映射规则</p><p>springBoot 中ResourceProperties.class此配置文件配置了默认的静态资源获取路径根据优先级排序 “classpath:/META-INF/resources/“, “classpath:/resources/“, “classpath:/static/“, “classpath:/public/“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/staticSourcePath.png" title="静态资源路径"><h3 id="支持静态资源的一个用途-webjars"><a href="#支持静态资源的一个用途-webjars" class="headerlink" title="支持静态资源的一个用途 webjars"></a>支持静态资源的一个用途 webjars</h3><p>WebJars是将web前端资源（js，css等）打成jar包文件，然后借助Maven工具，以jar包形式对web前端资源进行统一依赖管理，保证这些Web资源版本唯一性。WebJars的jar包部署在Maven中央仓库上。</p><p>webjar 路径 classpath:/META-INF/resources/webjars/</p><p>webjar 官网：<a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">        CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.7-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/JQ_BS.png" title="pom文件下的配置"><img src="/2019/08/01/springBoot-features2/maven_jar_JQ_BS.png" title="导入maven的webjar"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/jquery/3.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/bootstrap/3.3.7-1/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebJars Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/webjars/bootstrap/3.3.7-1/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span> <span class="attr">aria-label</span>=<span class="string">"close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        Hello, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>WebJars!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/HTML_1.png" title="页面展示"><h2 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a>欢迎页面</h2><p>WebMvcAutoConfiguration 有一个getWelcomePage()方法，用于获取起始页面，在springboot静态资源路径下：”classpath:/META-INF/resources/“, “classpath:/resources/“, “classpath:/static/“, “classpath:/public/“ 放置一个 index.html ，springboot 就会自动去获取到它</p><img src="/2019/08/01/springBoot-features2/getWelcomePage.png" title="获得首页地址"><h2 id="页面图标"><a href="#页面图标" class="headerlink" title="页面图标"></a>页面图标</h2><img src="/2019/08/01/springBoot-features2/getIcon.png" title="页面图标获取"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>, <span class="keyword">this</span>.faviconRequestHandler()));</span><br></pre></td></tr></table></figure><h2 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h2><p>formatter 格式化对象，例如日期格式化对象</p><p>converter 转换器类，将多个属性转换为一个对象</p><p>这些都是属于springMVC的自动配置，源码在WebMvcConfiguration.class中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"date-format"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter.class)) &#123;</span><br><span class="line">registry.addConverter(converter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter.class)) &#123;</span><br><span class="line">registry.addConverter(converter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter.class)) &#123;</span><br><span class="line">registry.addFormatter(formatter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getBeansOfType</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.beanFactory.getBeansOfType(type).values();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日期格式化器，只有在配置文件中配置了spring.mvc.date-format的值才会注册该组件。</p><h2 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h2><p>HttpMessage 是一个接口，用于将 http 请求转换成一个对象，或者将一个对象转换成 http 请求</p><p>比如return对象，json形式响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//检测参数是否可被读取</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"><span class="comment">//检测参数是否可被写入</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"><span class="comment">//获取转换器支持的媒体类型</span></span><br><span class="line">    <span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//从输入信息中读取指定类型对象</span></span><br><span class="line">    <span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; var1, HttpInputMessage var2)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class="line"><span class="comment">//将指定对象写入到输出</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T var1, @Nullable MediaType var2, HttpOutputMessage var3)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/01/springBoot-features2/HttpMessage.png" title="消息转换器"><h4 id="ConfigurableWebBindingInitializer"><a href="#ConfigurableWebBindingInitializer" class="headerlink" title="ConfigurableWebBindingInitializer"></a>ConfigurableWebBindingInitializer</h4><p>此类是用来初始化web数据绑定器的</p><p>web数据绑定器是用来将前台传入的数据绑定到相关的bean中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ConfigurableWebBindingInitializer <span class="title">getConfigurableWebBindingInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (ConfigurableWebBindingInitializer)<span class="keyword">this</span>.beanFactory.getBean(ConfigurableWebBindingInitializer.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchBeanDefinitionException var2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getConfigurableWebBindingInitializer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="扩展SpringMVC"><a href="#扩展SpringMVC" class="headerlink" title="扩展SpringMVC"></a>扩展SpringMVC</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-controller</span> <span class="attr">path</span>=<span class="string">"/hsw"</span> <span class="attr">view-name</span>=<span class="string">"success.html"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在 springboot 新建一个类继承WebMvcConfigurer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/hsw"</span>).setViewName(<span class="string">"success.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebMvcAutoConfiguration是SpringMVC的默认自动配置类。</p><p>自动配置类中有个静态内部类EnableWebMvcConfiguration，其父类DelegatingWebMvcConfiguratio有个方法<code>public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) {</code>能获取我们自定义实现的所有配置类。然后在静态内部类中将配置给添加到容器中</p><blockquote><p>参考:<a href="https://www.jianshu.com/p/2946c1c194c4" target="_blank" rel="noopener">https://www.jianshu.com/p/2946c1c194c4</a></p><p><a href="https://www.jianshu.com/p/3ed2e5594dcf" target="_blank" rel="noopener">https://www.jianshu.com/p/3ed2e5594dcf</a></p><p><a href="https://blog.csdn.net/qq_40757662/article/details/95481999" target="_blank" rel="noopener">https://blog.csdn.net/qq_40757662/article/details/95481999</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动配置了ContentNegotiatingViewResolver和BeanNameViewResolver两个视图解析器。&lt;/p&gt;
&lt;p&gt;支持静态资源，包括webjars&lt;/p&gt;
&lt;p&gt;Converter, GenericConverter和 Formatter bean类的自动化装配。&lt;/p&gt;
&lt;p&gt;支持HttpMessageConverters&lt;/p&gt;
&lt;p&gt;MessageCodesResolver自动注册。&lt;/p&gt;
&lt;p&gt;支持index.html静态页面。&lt;/p&gt;
&lt;p&gt;支持自定义Favicon（网站图标）。&lt;/p&gt;
&lt;p&gt;ConfigurableWebBindingInitializer自动使用&lt;/p&gt;
&lt;p&gt;如果你想保留Spring Boot MVC原有的功能而且还想添加额外MVC配置(interceptors，formatter，视图控制器view controller或者其他功能)，你可以添加你自己@Configuration配置但没有@EnableWebMvc的WebMvcConfigurer类，如果你希望自定义RequestMappingHandlerMapping、RequestMappingHandlerAdapter或者ExceptionHandlerExceptionResolver对象。&lt;br&gt; 你可以声明一个 WebMvcRegistrationsAdapter 对象去提供这些组件。&lt;/p&gt;
&lt;p&gt;如果你想完全控制Spring MVC。你能添加自定义@Configuration和@EnableWebMvc注解的类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
      <category term="springMVC" scheme="http://yoursite.com/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>pythonAutoDeploy</title>
    <link href="http://yoursite.com/2019/07/18/pythonAutoDeploy/"/>
    <id>http://yoursite.com/2019/07/18/pythonAutoDeploy/</id>
    <published>2019-07-18T03:04:46.000Z</published>
    <updated>2019-09-05T06:17:51.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OPEN"><a href="#OPEN" class="headerlink" title="OPEN"></a>OPEN</h2><ul><li>open</li></ul><p>open(filePath,’r’) 用于打开文件对象，第一个参数用于传入文件路径和文件名，第二个参数用于表示 open 函数的函数标识符，r 表示只读方式打开文件，文件的指针会放在文件的开头，这是默认模式</p><p>a+ 表示打开一个文件用于追加，如果该文件已经存在，文件指针会放在文件的结尾，新的内容会写入到现有内容以后，如果该文件不存在，创建新文件进行写入</p><a id="more"></a><ul><li>with open()</li></ul><p>因为 open 打开文件会产生 io 问题，文件不存在会抛出 IOError 错误，所以一般会使用 try finally 确保文件正确关闭。但是这样写比较麻烦，所以 python 引入了 with open 自动调用 close() 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>使用 with open</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">print(file.read)</span><br></pre></td></tr></table></figure><p>如果路径需要转义可以在路径前加 r，表示转义如</p><p><code>with open(r&#39;E\work\path\test.txt&#39;,&#39;a+&#39;) as file:</code></p><blockquote><p><a href="https://www.cnblogs.com/ymjyqsx/p/6554817.html" target="_blank" rel="noopener">python 文件读写</a></p><p><a href="https://blog.csdn.net/marsjhao/article/details/60333312" target="_blank" rel="noopener">python with open 标识符</a></p></blockquote><hr><h2 id="strftime"><a href="#strftime" class="headerlink" title="strftime"></a>strftime</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">thetime = time.strftime(format[, t])</span><br></pre></td></tr></table></figure><p>%Y ：表示四位数的年份</p><p>%m ：月份 0-12</p><p>%d：月中的一天 0-31</p><p>time.strftime(%Y%m%d)</p><p>结果是 201907118</p><hr><h2 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h2><p>isExists  = os.path.exists(path)</p><p>用于判断路径是否存在，存在则返回 true 不存在则返回 false</p><p><a href="https://www.runoob.com/python/python-os-path.html" target="_blank" rel="noopener">python os.path() 模块</a></p><hr><h2 id="path-strip"><a href="#path-strip" class="headerlink" title="path.strip()"></a>path.strip()</h2><p>语法： rm为要删除的字符序列，当rm为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’,  ‘ ‘)</p><p>str.strip(rm)：删除字符串开头、结尾处，位于 rm删除序列的字符；</p><p>str.lstrip(rm)：删除字符串开头处，位于 rm删除序列的字符；</p><p>str.rstrip(rm)：删除字符串结尾处，位于 rm删除序列的字符。</p><blockquote><p><a href="https://blog.csdn.net/marsjhao/article/details/59481950" target="_blank" rel="noopener">python split() 函数</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OPEN&quot;&gt;&lt;a href=&quot;#OPEN&quot; class=&quot;headerlink&quot; title=&quot;OPEN&quot;&gt;&lt;/a&gt;OPEN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;open(filePath,’r’) 用于打开文件对象，第一个参数用于传入文件路径和文件名，第二个参数用于表示 open 函数的函数标识符，r 表示只读方式打开文件，文件的指针会放在文件的开头，这是默认模式&lt;/p&gt;
&lt;p&gt;a+ 表示打开一个文件用于追加，如果该文件已经存在，文件指针会放在文件的结尾，新的内容会写入到现有内容以后，如果该文件不存在，创建新文件进行写入&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>springBootJK</title>
    <link href="http://yoursite.com/2019/07/07/springBootJK/"/>
    <id>http://yoursite.com/2019/07/07/springBootJK/</id>
    <published>2019-07-07T10:00:43.000Z</published>
    <updated>2019-09-09T10:07:42.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="使用-spring-inilitializr-创建-springBoot-项目框架"><a href="#使用-spring-inilitializr-创建-springBoot-项目框架" class="headerlink" title="使用 spring inilitializr 创建 springBoot 项目框架"></a>使用 spring inilitializr 创建 springBoot 项目框架</h2><ol><li><p>选择 maven project – java – springboot 2.16 – group com.xxx.spring – artifact demo.springBoot – Dependencies (选择需要的功能如 spring web starter 用于启动 web 项目自带 tomcat 等插件，spring boot actuator 等) </p></li><li><p>选择完成后点击 generate the project ，下载压缩包到本地，解压后用 idea 打开 import maven 项目，等自动导入 maven 依赖完成后才会出现 src 目录</p></li></ol>   <a id="more"></a><ol start="3"><li><p>给代码添加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(Application.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"hello spring"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController 可以直接将其视为 controller，@RequestMapping(“hello”) 就是一个拦截器名，运行该项目，利用 idea 自带 terminal 进行 <code>curl http://localhost:8080/hello</code> 即可访问到该项目，输出 hello spring</p></li><li><p>使用 mvn clean package -Dmaven.test.skip 打包项目，cd target 跳转到编译完的目录下，dir （window）或 ls （mac）查看目录，发现编译包有两个一个比较大，含有所有依赖，是可执行 jar 包；一个较小，只有代码</p><p><code>2019/07/07  17:43        18,309,095 demo.springBoot-0.0.1-SNAPSHOT.jar2019/07/07  17:37             3,094 demo.springBoot-0.0.1-SNAPSHOT.jar.original</code></p><p>停止运行的程序，使用 <code>java -jar demo.springBoot-0.0.1-SNAPSHOT.jar</code> 也可以产生运行的效果，左上 绿色 + 号新开一个 teminal ，使用 <code>curl http://localhost:8080/hello</code> 依然能输出 hello spring 的效果</p></li></ol><hr><h2 id="spring-常用注解"><a href="#spring-常用注解" class="headerlink" title="spring 常用注解"></a>spring 常用注解</h2><h3 id="java-Config-相关注解"><a href="#java-Config-相关注解" class="headerlink" title="java Config 相关注解"></a>java Config 相关注解</h3><p>@Configuration用于定义配置类，可替换xml配置文件</p><p>在@configuration中引入其它注解配置</p><p>@ImportSource</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ImportResource(&quot;classpath:applicationContext-configuration.xml&quot;)</span><br></pre></td></tr></table></figure><p>@ComponentScan 用于告诉 spring 容器可以扫描哪些 package 下的 bean 等配置</p><p>@Bean 标注的方法，它的返回能存在于 applicationContext 中</p><p>@RestController = @Controller+@ResponseBody</p><p>@Autowired 在上下文中按类型查找注入</p><p>@Qualifier 上下文中有多个同类型的 bean 时，为了防止歧义，配合使用 Qualifier 指定 bean 的名字，根据名字注入</p><p>@Resource 直接使用名字注入</p><p>@Value 在 bean 中注入常量，spe 的表达式，配置方面的东西</p><h3 id="lombok-注释"><a href="#lombok-注释" class="headerlink" title="lombok 注释"></a>lombok 注释</h3><p>@Builder </p><p>@Data</p><ul><li>@Get</li><li>@Set</li><li>@ToString</li></ul><p>@NoArgsConstructor –空构造方法</p><p>@AllArgsConstructor  –所有参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Type</span>(type= <span class="string">"org.jadira.usertype.moneyandcurrency.joda.PersistentMoneyAmount"</span>,</span><br><span class="line">          parameters = &#123;<span class="meta">@org</span>.hibernate.annotations.Parameter(name=<span class="string">"currencyCode"</span>,value=<span class="string">"CNY"</span>)&#125;)</span><br></pre></td></tr></table></figure><p>PersistentMoneyAmount 的输出类型为 decimal</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_menu (</span><br><span class="line">       <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">        create_time <span class="keyword">timestamp</span>,</span><br><span class="line">        price <span class="built_in">decimal</span>(<span class="number">19</span>,<span class="number">2</span>),</span><br><span class="line">        update_time <span class="keyword">timestamp</span>,</span><br><span class="line">        primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>PersistentMoneyMinorAmount 的输出类型为 bigint</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_menu (</span><br><span class="line">       <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">        create_time <span class="keyword">timestamp</span>,</span><br><span class="line">        price <span class="built_in">bigint</span>,</span><br><span class="line">        update_time <span class="keyword">timestamp</span>,</span><br><span class="line">        primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><hr><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q：运行spring boot 显示 No identifier specified for entity </p><p>A：没有在 bean 上注释 @Entity 或者没有 @MappedSuperclass</p><p>找不到 bean 的实例，如果使用 @Entity hibernate 会错误的认为所有的Entity都是在一张数据表中的。</p><p>如下将继承 base bean 的数据字段全部放在 base_entity 中，不过 join 的表还是会被创建</p><p>Hibernate: </p><pre><code>drop table base_entity if exists</code></pre><p>Hibernate: </p><pre><code>drop table t_order_coffee if exists</code></pre><p>Hibernate: </p><pre><code>create table base_entity (   dtype varchar(31) not null,    id bigint generated by default as identity,    create_time timestamp,    update_time timestamp,    customer varchar(255),    state integer not null,    price bigint,    primary key (id))</code></pre><p>Hibernate: </p><pre><code>create table t_order_coffee (   coffee_order_id bigint not null,    items_id bigint not null)</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FKj7y52vjqwbl1wptf9kopnkm54    foreign key (items_id)    references base_entity</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FKr4nljvhowpwbciwa8xjs0h59y    foreign key (coffee_order_id)    references base_entity</code></pre><p>使用 @MappedSupperclass 可以使继承该 bean 的子类创建多个表，能将各种继承 base bean 的表全部创建出来</p><p>Hibernate: </p><pre><code>drop table t_menu if exists</code></pre><p>Hibernate: </p><pre><code>drop table t_order if exists</code></pre><p>Hibernate: </p><pre><code>drop table t_order_coffee if exists</code></pre><p>Hibernate: </p><pre><code>create table t_menu (   id bigint generated by default as identity,    create_time timestamp,    update_time timestamp,    price bigint,    primary key (id))</code></pre><p>Hibernate: </p><pre><code>create table t_order (   id bigint generated by default as identity,    create_time timestamp,    update_time timestamp,    customer varchar(255),    state integer not null,    primary key (id))</code></pre><p>Hibernate: </p><pre><code>create table t_order_coffee (   coffee_order_id bigint not null,    items_id bigint not null)</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FKj2swxd3y69u2tfvalju7sr07q    foreign key (items_id)    references t_menu</code></pre><p>Hibernate: </p><pre><code>alter table t_order_coffee    add constraint FK33ucji9dx64fyog6g17blpx9v    foreign key (coffee_order_id)    references t_order</code></pre><blockquote><p>参考：<a href="https://blog.csdn.net/kunshan_shenbin/article/details/5516443" target="_blank" rel="noopener">https://blog.csdn.net/kunshan_shenbin/article/details/5516443</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;h2 id=&quot;使用-spring-inilitializr-创建-springBoot-项目框架&quot;&gt;&lt;a href=&quot;#使用-spring-inilitializr-创建-springBoot-项目框架&quot; class=&quot;headerlink&quot; title=&quot;使用 spring inilitializr 创建 springBoot 项目框架&quot;&gt;&lt;/a&gt;使用 spring inilitializr 创建 springBoot 项目框架&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择 maven project – java – springboot 2.16 – group com.xxx.spring – artifact demo.springBoot – Dependencies (选择需要的功能如 spring web starter 用于启动 web 项目自带 tomcat 等插件，spring boot actuator 等) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择完成后点击 generate the project ，下载压缩包到本地，解压后用 idea 打开 import maven 项目，等自动导入 maven 依赖完成后才会出现 src 目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>springBoot_features_24.5</title>
    <link href="http://yoursite.com/2019/07/07/springBoot-features/"/>
    <id>http://yoursite.com/2019/07/07/springBoot-features/</id>
    <published>2019-07-07T05:58:44.000Z</published>
    <updated>2019-09-05T06:19:19.686Z</updated>
    
    <content type="html"><![CDATA[<h4 id="24-5-Placeholders-in-Properties"><a href="#24-5-Placeholders-in-Properties" class="headerlink" title="24.5 Placeholders in Properties"></a>24.5 Placeholders in Properties</h4><p>属性中的占位符</p><blockquote><p>The values in <code>application.properties</code> are filtered through the existing <code>Environment</code> when they are used, so you can refer back to previously defined values (for example, from System properties).</p></blockquote><p>属性文件中可以调用之前声明的属性</p><a id="more"></a><ul><li>测试用例 main 函数：</li></ul><img src="/2019/07/07/springBoot-features/main.png" title="main方法"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyPlaceholderConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Bean 标注在方法上(返回某个实例的方法)，</span></span><br><span class="line">    <span class="comment">//等价于 spring 的 xml 配置文件中的 &lt;bean&gt;，作用为：注册 bean 对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DemoBean <span class="title">demoBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象后，返回 SpringApplication 对象</span></span><br><span class="line">        SpringApplication springBootDemo =</span><br><span class="line">                <span class="keyword">new</span> SpringApplication(PropertyPlaceholderConfigurer.class);</span><br><span class="line">        ConfigurableApplicationContext context = springBootDemo.run(args);</span><br><span class="line">        <span class="comment">//获取 Bean</span></span><br><span class="line">        DemoBean demoBean = context.getBean(DemoBean.class);</span><br><span class="line">        <span class="comment">//使用 Bean 的方法输出值</span></span><br><span class="line">        demoBean.showDemoTitle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试用例 Bean 实体类:</li></ul><img src="/2019/07/07/springBoot-features/Bean.png" title="Bean实体类"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从配置文件注入 demo.title 的值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;demo.title&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String demoTitle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出 demoTitle 的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDemoTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"Demo Result ----- %s ----- %n"</span>,demoTitle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试用例配置文件</li></ul><img src="/2019/07/07/springBoot-features/properties.png" title="properties文件"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">miku=2333</span><br><span class="line"># $&#123;&#125; 中的值可以在配置文件中定义，注入时直接能进行替换</span><br><span class="line">demo.title=SpringBoot $&#123;miku&#125;  @project.parent.artifactId@ @project.version@</span><br></pre></td></tr></table></figure><ul><li>测试1</li></ul><p><code>mvn spring-boot:run</code></p><ul><li>输出结果</li></ul><img src="/2019/07/07/springBoot-features/result1.png" title="result1"><p>Demo Result —– SpringBoot 2333  spring-boot-starter-parent 0.0.1-SNAPSHOT —–</p><p>结果中 ${miku} 被配置文件中的 <code>miku = 2333</code> 的值所替换了</p><p>而且 <a href="mailto:`@project.parent.artifactId" target="_blank" rel="noopener">`@project.parent.artifactId</a>@<code>与</code>@project.version@` 分别获得了maven 的 pom.xml 中的对应标签的值</p><img src="/2019/07/07/springBoot-features/pom.png" title="pom.xml"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nbcb.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo.springBoot.DateSource<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>demo.springBoot.DateSource<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试2</li></ul><p><code>mvn spring-boot:run -Dmiku=no1</code></p><p>使用 D+字段的形式可以替换 ${} 所代表的值，使用命令的方式优先于使用配置文件的方式</p><img src="/2019/07/07/springBoot-features/properties.png" title="properties文件"><p>依旧是上方的配置，但是输出结果为</p><img src="/2019/07/07/springBoot-features/result2.png" title="result2"><p><code>Demo Result ----- SpringBoot no1  spring-boot-starter-parent 0.0.1-SNAPSHOT -----</code></p><hr><h4 id="77-4-Use-‘Short’-Command-Line-Arguments"><a href="#77-4-Use-‘Short’-Command-Line-Arguments" class="headerlink" title="77.4 Use ‘Short’ Command Line Arguments"></a>77.4 Use ‘Short’ Command Line Arguments</h4><blockquote><p>Some people like to use (for example) <code>--port=9000</code> instead of <code>--server.port=9000</code> to set configuration properties on the command line. You can enable this behavior by using placeholders in <code>application.properties</code>, as shown in the following example:</p></blockquote><blockquote><p>If you inherit from the <code>spring-boot-starter-parent</code> POM, the default filter token of the <code>maven-resources-plugins</code> has been changed from <code>${*}</code> to <code>@</code> (that is, <a href="mailto:`@maven.token" target="_blank" rel="noopener">`@maven.token</a>@<code>instead of</code>${maven.token}<code>) to prevent conflicts with Spring-style placeholders. If you have enabled Maven filtering for the</code>application.properties` directly, you may want to also change the default filter token to use <a href="https://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html#delimiters" target="_blank" rel="noopener">other delimiters</a>.</p></blockquote><p>maven 继承了 spring-boot-starter-parent，并且 spring 的占位符也是 ${key}, 导致 mavenfilter 的占位符被 spring 的 maven pom 替换掉了，变成了 @maven.token@ </p><blockquote><p>In this specific case, the port binding works in a PaaS environment such as Heroku or Cloud Foundry. In those two platforms, the <code>PORT</code> environment variable is set automatically and Spring can bind to capitalized synonyms for <code>Environment</code> properties.</p></blockquote><p>在这种特定情况下，端口绑定可在平台即服务环境（云计算服务，提供云计算平台与解决方案堆栈即服务）（如Heroku或Cloud Foundry）中运行。在这两个平台中，PORT环境变量自动设置，Spring可以绑定到环境属性的同义词。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;24-5-Placeholders-in-Properties&quot;&gt;&lt;a href=&quot;#24-5-Placeholders-in-Properties&quot; class=&quot;headerlink&quot; title=&quot;24.5 Placeholders in Properties&quot;&gt;&lt;/a&gt;24.5 Placeholders in Properties&lt;/h4&gt;&lt;p&gt;属性中的占位符&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The values in &lt;code&gt;application.properties&lt;/code&gt; are filtered through the existing &lt;code&gt;Environment&lt;/code&gt; when they are used, so you can refer back to previously defined values (for example, from System properties).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;属性文件中可以调用之前声明的属性&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>ssDeploy</title>
    <link href="http://yoursite.com/2019/06/14/ssDeploy/"/>
    <id>http://yoursite.com/2019/06/14/ssDeploy/</id>
    <published>2019-06-14T06:37:11.000Z</published>
    <updated>2019-06-14T09:37:46.652Z</updated>
    
    <content type="html"><![CDATA[<p>ss 搭建过程中的坑</p><p>debain 用 apt ，yunos 用 yum</p><p>debain 系统的安装</p><p>unzip 安装问题</p><p>sudo ：apt-get：command not found – 不加 sudo ： 前缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install unzip</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://www.luminanetworks.com/docs-lsc-610/Topics/SDN_Controller_Software_Installation_Guide/Appendix/Installing_Zip_and_Unzip_for_Ubuntu_1.html" target="_blank" rel="noopener">https://www.luminanetworks.com/docs-lsc-610/Topics/SDN_Controller_Software_Installation_Guide/Appendix/Installing_Zip_and_Unzip_for_Ubuntu_1.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ss 搭建过程中的坑&lt;/p&gt;
&lt;p&gt;debain 用 apt ，yunos 用 yum&lt;/p&gt;
&lt;p&gt;debain 系统的安装&lt;/p&gt;
&lt;p&gt;unzip 安装问题&lt;/p&gt;
&lt;p&gt;sudo ：apt-get：command not found – 不加 sudo ： 前缀&lt;/
      
    
    </summary>
    
    
      <category term="ss" scheme="http://yoursite.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>guankongMission</title>
    <link href="http://yoursite.com/2019/05/21/guankongMission/"/>
    <id>http://yoursite.com/2019/05/21/guankongMission/</id>
    <published>2019-05-21T06:58:46.000Z</published>
    <updated>2019-07-07T04:11:26.824Z</updated>
    
    <content type="html"><![CDATA[<td nowrap="" ...=""><p>nowrap 规定表中内容不换行</p><p>添加表格或其他文本出不来，先检查 <code>&lt;tr&gt; &lt;td&gt;</code>等标签是否封闭</p><p>json 字符串放在 “” 中需要对内部双引号使用 \ 转义,不能使用单引号，前端会无法识别</p><hr><h5 id="反射修改私有变量"><a href="#反射修改私有变量" class="headerlink" title="反射修改私有变量"></a>反射修改私有变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改对象私有变量的值</span></span><br><span class="line"><span class="comment"> * 为简洁代码，在方法上抛出总的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyPrivateFiled</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取 Class 类实例</span></span><br><span class="line">    TestClass testClass = <span class="keyword">new</span> TestClass();</span><br><span class="line">    Class mClass = testClass.getClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取私有变量</span></span><br><span class="line">    Field privateField = mClass.getDeclaredField(<span class="string">"MSG"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 操作私有变量</span></span><br><span class="line">    <span class="keyword">if</span> (privateField != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取私有变量的访问权</span></span><br><span class="line">        privateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改私有变量，并输出以测试</span></span><br><span class="line">        System.out.println(<span class="string">"Before Modify：MSG = "</span> + testClass.getMsg());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 set(object , value) 修改变量的值</span></span><br><span class="line">        <span class="comment">//privateField 是获取到的私有变量</span></span><br><span class="line">        <span class="comment">//testClass 要操作的对象</span></span><br><span class="line">        <span class="comment">//"Modified" 为要修改成的值</span></span><br><span class="line">        privateField.set(testClass, <span class="string">"Modified"</span>);</span><br><span class="line">        System.out.println(<span class="string">"After Modify：MSG = "</span> + testClass.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>出处：<a href="https://juejin.im/post/598ea9116fb9a03c335a99a4" target="_blank" rel="noopener">https://juejin.im/post/598ea9116fb9a03c335a99a4</a></p></blockquote><hr><h5 id="Q-bigDecimal-cannot-be-cast-to-java-lang-String"><a href="#Q-bigDecimal-cannot-be-cast-to-java-lang-String" class="headerlink" title="Q:bigDecimal cannot be cast to java.lang.String"></a>Q:bigDecimal cannot be cast to java.lang.String</h5><p>A:使用 setBigDecimal() 替代 setString() </p></td>]]></content>
    
    <summary type="html">
    
      
      
        &lt;td nowrap=&quot;&quot; ...=&quot;&quot;&gt;

&lt;p&gt;nowrap 规定表中内容不换行&lt;/p&gt;
&lt;p&gt;添加表格或其他文本出不来，先检查 &lt;code&gt;&amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&lt;/code&gt;等标签是否封闭&lt;/p&gt;
&lt;p&gt;json 字符串放在 “” 中需要对内部双引号使
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>pyDay1</title>
    <link href="http://yoursite.com/2019/04/18/pyDay1/"/>
    <id>http://yoursite.com/2019/04/18/pyDay1/</id>
    <published>2019-04-18T08:15:25.000Z</published>
    <updated>2019-07-07T04:14:53.617Z</updated>
    
    <content type="html"><![CDATA[<p>UTF-8 与 Unicode</p><p>UTF-8 Unicode Transformation Format</p><ul><li><p>在计算机内存统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码</p><p>记事本编辑时，从文件中读取的 UTF-8 字符被转换成 Unicode 字符到内存，编辑完成后，将 Unicode 转换成 UTF-8 保存到文件</p></li></ul><img src="/2019/04/18/pyDay1/Code.png" title="codeChange"><p>浏览网页时，服务器会把动态生成的 Unicode 内容转换成 UTF-8 再传输到浏览器</p><img src="/2019/04/18/pyDay1/Code2.png" title="codeChange2"><blockquote><p><a href="https://www.cnblogs.com/loulijun/archive/2012/03/28/2421568.html" target="_blank" rel="noopener">JSP中pageEncoding和charset区别，中文乱码解决方案</a></p></blockquote><hr><p>将 abs 指向一个整数，就无法再调用原来的 abs 函数了，重启 python 交互环境，由于<code>abs</code>函数实际上是定义在<code>import builtins</code>模块中的，所以要让修改<code>abs</code>变量的指向在其它模块也生效，要用<code>import builtins; builtins.abs = 10</code>。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UTF-8 与 Unicode&lt;/p&gt;
&lt;p&gt;UTF-8 Unicode Transformation Format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在计算机内存统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码&lt;/p&gt;
&lt;p&gt;记
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>DMP_deploy</title>
    <link href="http://yoursite.com/2019/04/15/DMP-deploy/"/>
    <id>http://yoursite.com/2019/04/15/DMP-deploy/</id>
    <published>2019-04-15T00:58:59.000Z</published>
    <updated>2019-11-27T09:33:05.157Z</updated>
    
    <content type="html"><![CDATA[<p>/home/edh</p><p>修改 tomcat 端口</p><p><code>&lt;Server port=&quot;9992(跟原端口有区分即可)&quot; shutdown=&quot;SHUTDOWN&quot;\&gt;</code></p><p><code>&lt;Connector port=&quot;9026(跟原端口有区别即可)&quot; protocal=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/\&gt;</code></p><h5 id="Server-xml-元素分类"><a href="#Server-xml-元素分类" class="headerlink" title="Server.xml 元素分类"></a>Server.xml 元素分类</h5><p>server.xml文件中的元素可以分为以下4类：</p><p>（1）顶层元素：&lt;Server>和&lt;Service></p><p>&lt;Server>元素是整个配置文件的根元素，&lt;Service>元素则代表一个Engine元素以及一组与之相连的Connector元素。</p><p>（2）连接器：&lt;Connector></p><p>&lt;Connector>代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。</p><p>（3）容器：&lt;Engine>&lt;Host>&lt;Context></p><p>容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。</p><p>（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。</p><a id="more"></a><ul><li><p>Server 元素的作用</p><p>Server 在元素的最顶层，代表 tomcat 容器，因此必须是 Server.xml 中唯一的一个外层元素，一个 Server 中可以包含多个 service 元素</p><ul><li>Server 中 shutdown 端口的作用</li></ul><p>shutdown 属性表示关闭 Server 的指令；port 属性表示 Server 接受 shutdown 指令的端口号，设为 -1 可以禁止掉该端口</p><ul><li><p>Server 中 redirect 端口的作用</p><p>当用户用http请求某个资源，而该资源本身又被设置了必须要https方式访问，此时Tomcat会自动重定向到这个redirectPort设置的https端口。</p></li></ul></li><li><p>Server 下 Service 的作用</p><p>Service 在 Connection 与 Engine 外包裹一层，将他们组装在一起，对外提供服务。一个 Service 可以包含多个 Connection 跟一个 Engine，Connection 用来接受客户端的请求，Engine 用来处理请求。Server 中可以只包含一个 Service ，名为 “Catalina”（名称没有限制），也可以包含多个 Service 来监听不同端口的请求</p></li><li><p>Service 下 Connector 的功能</p><p>Connection 的主要功能是接收连接请求，创建 Request 与 Response 对象用于和请求端交换数据，分配线程让 Engine 来处理这个请求，并把产生的 Request 与 Response 传递给 Engine</p><p>Tomcat 监听 HTTP 请求一般用 8080 端口，而不是 80 端口（一般不将 Tomcat 直接对外开放请求，在 Tomcat 和客户端之间加一层代理服务器，如 nginx，用于请求转发、负载均衡、处理静态文件等）</p><p>配置第二个 Connector 客户端可以通过 8009 端口使用 AJP 协议访问 tomcat ，AJP 协议负责与其他 Http 服务器（如 Apache 与 IIS 等 HTTP 服务器）等集成，Tomcat 用作 Servlet/JSP 容器，处理动态资源，Apahe 等处理静态资源</p></li><li><p>Service 下的 Engine 组件</p><p>Engine 组件在 Service 中有且只有一个；Engine 是 Service 组件中的请求处理组件。Engine 组件从一个或多个 Connector 接收请求并处理，将完成的请求返回给 Connector ，最终传递给客户端</p><p>Engine、Host、Context 都是容器，它们是父子关系，Engine 包含 Host，Host 包含 Context</p><p>Engine 配置 <code>&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</code></p><p>name 属性用于日志和错误信息，在整个 Server 中唯一。defaultHost 用于指定默认 host 名，当发往本机的 host 名不存在时，使用 defaultHost 指定的 host 进行处理，所以 defaultHost 指定的值必须与 Engine 中其中一个 Host 组件的 name 属性值匹配。</p></li><li><p>Engine 的子容器 Host</p><p>Engine 中可以内嵌一个或多个 Host 组件，每个 Host 组件代表 Engine 中一个虚拟主机，Host 组件至少有一个，且其 name 与 defaultHost 属性相匹配。</p><p>host 虚拟主机，作用是运行多个 web 应用（一个 Context 代表一个 Web 应用），负责安装、展开、启动、结束每个 Web 应用</p><p>Host 组件代表一个虚拟主机，对应服务器的 IP 地址（192.168.0.128）或将 IP</p></li><li><p>Context 元素</p><p>docBase 指定该 web 应用的 war 包路径，或应用目录。在自动部署时(配置文件位于xmlBase中)，docBase不在appBase目录中需要指定，如果 war 包在 docBase 中则不需要指定，如果指定会出错。</p><p>path 指定了上下文路径，请求到来时，Tomcat 会根据 Web 应用的 path 属性与 URI 的匹配程度选择 Web 应用的处理相应请求。如果请求时 /app1/index.html 则将其交由 “/app1” path 的 Web 应用处理，如果是 /app2/index.html 的请求，则交由 “/app2” 的 path 的 Web 应用处理，如果 path 属性为 “ “ ，那么用默认的 Web 应用处理</p></li></ul><h5 id="Tomcat-请求由谁处理"><a href="#Tomcat-请求由谁处理" class="headerlink" title="Tomcat 请求由谁处理"></a>Tomcat 请求由谁处理</h5><ul><li><p>根据协议和端口号选定Service和Engine</p><p>Service中的Connector组件可以接收特定端口的请求，因此，当Tomcat启动时，Service组件就会监听特定的端口。Catalina这个Service监听了8080端口（基于HTTP协议）和8009端口（基于AJP协议）。当请求进来时，Tomcat便可以根据协议和端口号选定处理请求的Service；Service一旦选定，Engine也就确定。</p></li></ul><p>就是说 Service 中配置特定的 connector ，其端口就是用户可以访问到的端口</p><p>通过在Server中配置多个Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。</p><ul><li><p>根据域名或IP地址选定Host</p><p>Service确定后，Tomcat在Service中寻找名称与域名/IP地址匹配的Host处理该请求。如果没有找到，则使用Engine中指定的defaultHost来处理该请求。在第一部分的例子中，由于只有一个Host（name属性为localhost），因此该Service/Engine的所有请求都交给该Host处理。</p></li><li><p>根据URI选定Context/Web应用</p><p>Tomcat根据应用的 path属性与URI的匹配程度来选择Web应用处理相应请求。</p></li><li><p>例</p><p>以请求<a href="http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。" target="_blank" rel="noopener">http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。</a></p></li></ul><blockquote><p>出处：<a href="http://www.importnew.com/26156.html" target="_blank" rel="noopener">详解 Tomcat 配置文件 server.xml</a></p></blockquote><hr><h5 id="linux-修改文件权限-chmod"><a href="#linux-修改文件权限-chmod" class="headerlink" title="linux 修改文件权限 chmod"></a>linux 修改文件权限 chmod</h5><p>chmod的语法格式如下：</p><p>chmod [who] [opt] [mode] 文件/目录名</p><p>其中who表示对象，是以下字母中的一个或组合： </p><p>u：表示文件所有者<br>g：表示同组用户<br>o：表示其它用户<br>a：表示所有用户 </p><p>opt则是代表操作，可以为：<br>+：添加某个权限<br>-：取消某个权限<br>=：赋予给定的权限，并取消原有的权限</p><p>而mode则代表权限：<br>r：可读 </p><p>w：可写</p><p>x：可执行</p><p>首先看第一个参数，目前我的需求是可以执行就行了，所以我让文件的拥有着，也就是root用户有可执行的权限就可以了，所以构造命令如下：</p><p>chmod u</p><p>再看第二个参数，opt，很明显是加权限了，如下：</p><p>chmod u + </p><p>再看第三个参数，这里是需要可执行的命令，也就是x，构造之后的命令如下：</p><p>chmod u + x</p><p>最后加上文件名称：</p><p>chmod u + x start-redis-cluster.sh</p><blockquote><p><a href="https://blog.csdn.net/ksdb0468473/article/details/52150262" target="_blank" rel="noopener">https://blog.csdn.net/ksdb0468473/article/details/52150262</a></p></blockquote><hr><h5 id="查询-java-jdk-安装路径：which-java-–-gt-usr-bin-java"><a href="#查询-java-jdk-安装路径：which-java-–-gt-usr-bin-java" class="headerlink" title="查询 java jdk 安装路径：which java –&gt;/usr/bin/java"></a>查询 java jdk 安装路径：which java –&gt;/usr/bin/java</h5><p>跳转到 usr/bin/</p><p>查找 java，发现这是一个快捷方式，后有箭头指向 /etc/alternatives/java</p><p>跳转到 /etc/alternatives/</p><p>在其目录下寻找对应 jre，jre 后有箭头指向目录 /user/lob/jvm/jre-1.7.0-openjdkx86 64</p><p>该目录就是需要的 jdk 路径</p><hr><h5 id="idea-启动-tomcat-显示-1099-地址已被占用"><a href="#idea-启动-tomcat-显示-1099-地址已被占用" class="headerlink" title="idea 启动 tomcat 显示 1099 地址已被占用"></a>idea 启动 tomcat 显示 1099 地址已被占用</h5><p><code>Address localhost:1099 is aleady in use</code></p><p>使用 cmd 命令行查找 1099 端口的进程<code>netstat -ano|findstr&quot;1099&quot;</code></p><p>发现进程 <code>0.0.0.0:1099   6284</code> PID 为 6284</p><p>使用 taskkill -f -pid 6284 将其进程结束就行</p><p>为什么 tomcat 地址是 0.0.0.0:8080 因为这是<b> 动态地址 </b> ，本来本地 ip 应该是 127.0.0.1 但是这个 ip 是保留 ip ，无论外部 ip 是什么，系统都会保留这个 ip 识别。0.0.0.0 作为动态 ip 使用，上网后它会被外部 ip 替代</p><blockquote><p>参考：<a href="https://yeluotiying.iteye.com/blog/2245820" target="_blank" rel="noopener">ip 0.0.0.0</a> </p></blockquote><hr><p>linux 下执行 window 中拷贝的 .sh shell 文件赋予权限后会报 python^M：bad interpreter:没有那个文件或目录的异常</p><p>其实IDE开发环境或者代码编辑器中都可以设置编程风格，在Linux下有最一般的修改方法，下面在Linux下修改：</p><p>方法一，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/^M//g' test.py</span><br></pre></td></tr></table></figure><p>注意^M这个输入方法不是输入^再输入M，而是按住Ctrl+V快捷键，然后松开V，Ctrl不松，按M，按完之后^M就一并打好了，只有这个方法输入才是可以的，其他字符输入都一样</p><p>或者</p><p>用 vim 命令打开文件，底部模式下运行命令 ：set ff 或者 ：set fileformat 查看当前文件的换行标识，linux 返回的是 fileformat=unix，windows 换行返回的是 fileformat=dos</p><p>通过命令修改成 unix 风格的换行，使用 <code>:set ff=unix</code> 或者 <code>:set fileformat=unix</code> 回车后 wq 保存，如果要转成 window 风格将值改成 doc 即可。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/freeweb/p/5194614.html" target="_blank" rel="noopener">由于Windows和Linux行尾标识引起脚本无法运行的解决</a></p></blockquote><hr><h5 id="DMP-页面无法登陆"><a href="#DMP-页面无法登陆" class="headerlink" title="DMP 页面无法登陆"></a>DMP 页面无法登陆</h5><p>后台 tomcat 报错，tomcat:java.lang.OutOfMemoryError: PermGen space</p><p>临时重启 tomcat 可以解决</p><p>深入问题解决方法：</p><blockquote><p><a href="http://outofmemory.cn/c/java-outOfMemoryError" target="_blank" rel="noopener">Java 内存溢出（java.lang.OutOfMemoryError）的常见情况和处理方式总结</a></p></blockquote><hr><h5 id="tomcat-启动无报错无法找到页面"><a href="#tomcat-启动无报错无法找到页面" class="headerlink" title="tomcat 启动无报错无法找到页面"></a>tomcat 启动无报错无法找到页面</h5><p>可能端口被修改过</p><p>查看 tomcat 进程</p><p>ps -aux | grep tomcat</p><p>使用命令查看 tomcat 端口号</p><p>sudo netstat -naop | grep 14177</p><p><a href="https://blog.csdn.net/theonegis/article/details/49121497" target="_blank" rel="noopener">Linux下Tomcat端口号以及进程相关命令</a></p><hr><h5 id="linux-tomcat-重启脚本"><a href="#linux-tomcat-重启脚本" class="headerlink" title="linux tomcat 重启脚本"></a>linux tomcat 重启脚本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep tomcat|grep 9080|grep -v grep|awk</span><br></pre></td></tr></table></figure><hr><h5 id="linux-查找某路径下含有某字符串的文件"><a href="#linux-查找某路径下含有某字符串的文件" class="headerlink" title="linux 查找某路径下含有某字符串的文件"></a>linux 查找某路径下含有某字符串的文件</h5><p>grep -rl ‘fileContent’ /root/crowsong/</p><hr><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><h5 id="Q-tomcat-启动报错："><a href="#Q-tomcat-启动报错：" class="headerlink" title="Q:tomcat 启动报错："></a>Q:tomcat 启动报错：</h5><p>`Cannot find ./catalina.sh， The file is absent or does not have execute permission </p><p>A:sh 文件没有运行没有权限</p><p><code>chmod +x /data/tomcat7/bin/*.sh</code><br>或者<br><code>chmod 755 /data/tomcat7/bin/*.sh</code></p><blockquote><p>出处：<a href="https://blog.csdn.net/u012599988/article/details/44080673" target="_blank" rel="noopener">https://blog.csdn.net/u012599988/article/details/44080673</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;/home/edh&lt;/p&gt;
&lt;p&gt;修改 tomcat 端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Server port=&amp;quot;9992(跟原端口有区分即可)&amp;quot; shutdown=&amp;quot;SHUTDOWN&amp;quot;\&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Connector port=&amp;quot;9026(跟原端口有区别即可)&amp;quot; protocal=&amp;quot;HTTP/1.1&amp;quot; connectionTimeout=&amp;quot;20000&amp;quot; redirectPort=&amp;quot;8443&amp;quot; URIEncoding=&amp;quot;UTF-8&amp;quot;/\&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;Server-xml-元素分类&quot;&gt;&lt;a href=&quot;#Server-xml-元素分类&quot; class=&quot;headerlink&quot; title=&quot;Server.xml 元素分类&quot;&gt;&lt;/a&gt;Server.xml 元素分类&lt;/h5&gt;&lt;p&gt;server.xml文件中的元素可以分为以下4类：&lt;/p&gt;
&lt;p&gt;（1）顶层元素：&amp;lt;Server&gt;和&amp;lt;Service&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;Server&gt;元素是整个配置文件的根元素，&amp;lt;Service&gt;元素则代表一个Engine元素以及一组与之相连的Connector元素。&lt;/p&gt;
&lt;p&gt;（2）连接器：&amp;lt;Connector&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;Connector&gt;代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。&lt;/p&gt;
&lt;p&gt;（3）容器：&amp;lt;Engine&gt;&amp;lt;Host&gt;&amp;lt;Context&gt;&lt;/p&gt;
&lt;p&gt;容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。&lt;/p&gt;
&lt;p&gt;（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
