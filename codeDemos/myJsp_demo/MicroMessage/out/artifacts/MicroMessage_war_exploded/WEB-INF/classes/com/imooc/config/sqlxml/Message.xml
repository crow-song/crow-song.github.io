<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2009-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--类似于 java package 的用法，用来区分不同项目,namespace 必须添加-->
<mapper namespace="Message">

  <!--对应 jdbc 的 message.setId(rs.getString("ID")); 等方法-->
  <!--type 表示的是数据库字段对应 java 中哪个类的对象；id 随意取名；-->
  <!--如果在数据库中为主键，则配 id colum,否则配 result colum 标签；-->
  <!--colum 对应数据库列的属性名；property 是数据库对应 java bean对象中的属性名-->
  <!--jdbcType 对应数据库中属性的类型 Int、varchar 等-->
  <resultMap type="com.imooc.bean.Message" id="MessageResult">
    <id column="ID" jdbcType="INTEGER" property="id"/>
    <result column="COMMAND" jdbcType="VARCHAR" property="command"/>
    <result column="DESCRIPTION" jdbcType="VARCHAR" property="description"/>
    <result column="CONTENT" jdbcType="VARCHAR" property="content"/>
  </resultMap>
  <!--select id 必须是唯一的，但与 resultMap 中的 id 可以重名-->
  <!--parameterType 是传入 sqlSession 的参数的属性-->
  <!--resultMap 指向 resultMap 标签的 id-->

  <!--OGNL 表达式 如果是自定义类型就直接写自定义属性的属性名（command）-->
  <!--可以从 java 对象中调用属性值 而且可以直接调用 java 对象的方法-->
  <!--但是 与符号 && 需要转义成 &amp;&amp  或者用 OGNl 的 and 操作符-->
  <!--双引号 "" 需要转义成 &quot;&quot;-->

  <!--占位符 ? 需要用 #{command} 来替换，表示用 command 值来填充 ? 这是 mybatis 的解析规则-->
  <!--mybatis 配置中 sql 语句前后不需要留空格，会自动拼接-->
  <!--模糊查询 like 跟 '%' 保留，问号 ? 替换，问号两边依旧保留空格 -->
  <select id="queryMessageList" parameterType="com.imooc.bean.Message" resultMap="MessageResult">
    select ID,COMMAND,DESCRIPTION,CONTENT from MESSAGE where 1=1


    <if test="command != null &amp;&amp; !&quot;&quot;.equals(command.trim()) "> and COMMAND=#{command} </if>
    <if test="description != null and !&quot;&quot;.equals(description.trim()) ">
     and DESCRIPTION like '%' #{description} '%'
    </if>
  </select>
    <!--单个删除-->
 <!--#{} 中的取值写法可以视为与 OGNL 相同：当参数为 String 与基本数据类型时，标签属性为 _parameter,
 若为自定义类型则写自定义类型属性名-->
  <delete id="deleteOne" parameterType="int">
    delete from MESSAGE where ID = #{_parameter}
  </delete>

    <!--批量删除-->
    <delete id="deleteBatch" parameterType="java.util.List">
        delete from MESSAGE where ID in (
          <foreach collection="list" item="item" separator=",">
              #{item}
          </foreach>
        )
    </delete>
</mapper>
